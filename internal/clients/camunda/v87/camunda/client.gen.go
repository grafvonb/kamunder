// Package camunda provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package camunda

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for DocumentReferenceBaseCamundaDocumentType.
const (
	Camunda DocumentReferenceBaseCamundaDocumentType = "camunda"
)

// Defines values for IncidentFilterRequestBaseErrorType.
const (
	IncidentFilterRequestBaseErrorTypeCALLEDDECISIONERROR        IncidentFilterRequestBaseErrorType = "CALLED_DECISION_ERROR"
	IncidentFilterRequestBaseErrorTypeCALLEDELEMENTERROR         IncidentFilterRequestBaseErrorType = "CALLED_ELEMENT_ERROR"
	IncidentFilterRequestBaseErrorTypeCONDITIONERROR             IncidentFilterRequestBaseErrorType = "CONDITION_ERROR"
	IncidentFilterRequestBaseErrorTypeDECISIONEVALUATIONERROR    IncidentFilterRequestBaseErrorType = "DECISION_EVALUATION_ERROR"
	IncidentFilterRequestBaseErrorTypeEXECUTIONLISTENERNORETRIES IncidentFilterRequestBaseErrorType = "EXECUTION_LISTENER_NO_RETRIES"
	IncidentFilterRequestBaseErrorTypeEXTRACTVALUEERROR          IncidentFilterRequestBaseErrorType = "EXTRACT_VALUE_ERROR"
	IncidentFilterRequestBaseErrorTypeFORMNOTFOUND               IncidentFilterRequestBaseErrorType = "FORM_NOT_FOUND"
	IncidentFilterRequestBaseErrorTypeIOMAPPINGERROR             IncidentFilterRequestBaseErrorType = "IO_MAPPING_ERROR"
	IncidentFilterRequestBaseErrorTypeJOBNORETRIES               IncidentFilterRequestBaseErrorType = "JOB_NO_RETRIES"
	IncidentFilterRequestBaseErrorTypeMESSAGESIZEEXCEEDED        IncidentFilterRequestBaseErrorType = "MESSAGE_SIZE_EXCEEDED"
	IncidentFilterRequestBaseErrorTypeRESOURCENOTFOUND           IncidentFilterRequestBaseErrorType = "RESOURCE_NOT_FOUND"
	IncidentFilterRequestBaseErrorTypeUNHANDLEDERROREVENT        IncidentFilterRequestBaseErrorType = "UNHANDLED_ERROR_EVENT"
	IncidentFilterRequestBaseErrorTypeUNKNOWN                    IncidentFilterRequestBaseErrorType = "UNKNOWN"
	IncidentFilterRequestBaseErrorTypeUNSPECIFIED                IncidentFilterRequestBaseErrorType = "UNSPECIFIED"
)

// Defines values for IncidentFilterRequestBaseState.
const (
	IncidentFilterRequestBaseStateACTIVE   IncidentFilterRequestBaseState = "ACTIVE"
	IncidentFilterRequestBaseStateMIGRATED IncidentFilterRequestBaseState = "MIGRATED"
	IncidentFilterRequestBaseStatePENDING  IncidentFilterRequestBaseState = "PENDING"
	IncidentFilterRequestBaseStateRESOLVED IncidentFilterRequestBaseState = "RESOLVED"
)

// Defines values for IncidentItemBaseErrorType.
const (
	IncidentItemBaseErrorTypeCALLEDDECISIONERROR        IncidentItemBaseErrorType = "CALLED_DECISION_ERROR"
	IncidentItemBaseErrorTypeCALLEDELEMENTERROR         IncidentItemBaseErrorType = "CALLED_ELEMENT_ERROR"
	IncidentItemBaseErrorTypeCONDITIONERROR             IncidentItemBaseErrorType = "CONDITION_ERROR"
	IncidentItemBaseErrorTypeDECISIONEVALUATIONERROR    IncidentItemBaseErrorType = "DECISION_EVALUATION_ERROR"
	IncidentItemBaseErrorTypeEXECUTIONLISTENERNORETRIES IncidentItemBaseErrorType = "EXECUTION_LISTENER_NO_RETRIES"
	IncidentItemBaseErrorTypeEXTRACTVALUEERROR          IncidentItemBaseErrorType = "EXTRACT_VALUE_ERROR"
	IncidentItemBaseErrorTypeFORMNOTFOUND               IncidentItemBaseErrorType = "FORM_NOT_FOUND"
	IncidentItemBaseErrorTypeIOMAPPINGERROR             IncidentItemBaseErrorType = "IO_MAPPING_ERROR"
	IncidentItemBaseErrorTypeJOBNORETRIES               IncidentItemBaseErrorType = "JOB_NO_RETRIES"
	IncidentItemBaseErrorTypeMESSAGESIZEEXCEEDED        IncidentItemBaseErrorType = "MESSAGE_SIZE_EXCEEDED"
	IncidentItemBaseErrorTypeRESOURCENOTFOUND           IncidentItemBaseErrorType = "RESOURCE_NOT_FOUND"
	IncidentItemBaseErrorTypeUNHANDLEDERROREVENT        IncidentItemBaseErrorType = "UNHANDLED_ERROR_EVENT"
	IncidentItemBaseErrorTypeUNKNOWN                    IncidentItemBaseErrorType = "UNKNOWN"
	IncidentItemBaseErrorTypeUNSPECIFIED                IncidentItemBaseErrorType = "UNSPECIFIED"
)

// Defines values for IncidentItemBaseState.
const (
	IncidentItemBaseStateACTIVE   IncidentItemBaseState = "ACTIVE"
	IncidentItemBaseStateMIGRATED IncidentItemBaseState = "MIGRATED"
	IncidentItemBaseStatePENDING  IncidentItemBaseState = "PENDING"
	IncidentItemBaseStateRESOLVED IncidentItemBaseState = "RESOLVED"
)

// Defines values for OperationItemState.
const (
	OperationItemStateCOMPLETED OperationItemState = "COMPLETED"
	OperationItemStateFAILED    OperationItemState = "FAILED"
	OperationItemStateLOCKED    OperationItemState = "LOCKED"
	OperationItemStateSCHEDULED OperationItemState = "SCHEDULED"
	OperationItemStateSENT      OperationItemState = "SENT"
)

// Defines values for OperationItemType.
const (
	ADDVARIABLE              OperationItemType = "ADD_VARIABLE"
	CANCELPROCESSINSTANCE    OperationItemType = "CANCEL_PROCESS_INSTANCE"
	DELETEDECISIONDEFINITION OperationItemType = "DELETE_DECISION_DEFINITION"
	DELETEPROCESSDEFINITION  OperationItemType = "DELETE_PROCESS_DEFINITION"
	DELETEPROCESSINSTANCE    OperationItemType = "DELETE_PROCESS_INSTANCE"
	MIGRATEPROCESSINSTANCE   OperationItemType = "MIGRATE_PROCESS_INSTANCE"
	MODIFYPROCESSINSTANCE    OperationItemType = "MODIFY_PROCESS_INSTANCE"
	RESOLVEINCIDENT          OperationItemType = "RESOLVE_INCIDENT"
	UPDATEVARIABLE           OperationItemType = "UPDATE_VARIABLE"
)

// Defines values for PartitionHealth.
const (
	Dead      PartitionHealth = "dead"
	Healthy   PartitionHealth = "healthy"
	Unhealthy PartitionHealth = "unhealthy"
)

// Defines values for PartitionRole.
const (
	Follower PartitionRole = "follower"
	Inactive PartitionRole = "inactive"
	Leader   PartitionRole = "leader"
)

// Defines values for ProcessInstanceItemBaseState.
const (
	ProcessInstanceItemBaseStateACTIVE      ProcessInstanceItemBaseState = "ACTIVE"
	ProcessInstanceItemBaseStateCANCELED    ProcessInstanceItemBaseState = "CANCELED"
	ProcessInstanceItemBaseStateCOMPLETED   ProcessInstanceItemBaseState = "COMPLETED"
	ProcessInstanceItemBaseStateINCIDENT    ProcessInstanceItemBaseState = "INCIDENT"
	ProcessInstanceItemBaseStateUNKNOWN     ProcessInstanceItemBaseState = "UNKNOWN"
	ProcessInstanceItemBaseStateUNSPECIFIED ProcessInstanceItemBaseState = "UNSPECIFIED"
)

// ActivatedJob Base properties for ActivatedJob
type ActivatedJob = ActivatedJobBase

// ActivatedJobBase Base properties for ActivatedJob
type ActivatedJobBase struct {
	// CustomHeaders a set of custom headers defined during modelling; returned as a serialized JSON document
	CustomHeaders *map[string]interface{} `json:"customHeaders,omitempty"`

	// Deadline when the job can be activated again, sent as a UNIX epoch timestamp
	Deadline *int64 `json:"deadline,omitempty"`

	// ElementId the associated task element ID
	ElementId *string `json:"elementId,omitempty"`

	// ProcessDefinitionId the bpmn process ID of the job's process definition
	ProcessDefinitionId *string `json:"processDefinitionId,omitempty"`

	// ProcessDefinitionVersion the version of the job's process definition
	ProcessDefinitionVersion *int32 `json:"processDefinitionVersion,omitempty"`

	// Retries the amount of retries left to this job (should always be positive)
	Retries *int32 `json:"retries,omitempty"`

	// TenantId The ID of the tenant that owns the job
	TenantId *string `json:"tenantId,omitempty"`

	// Type the type of the job (should match what was requested)
	Type *string `json:"type,omitempty"`

	// Variables All variables visible to the task scope, computed at activation time
	Variables *map[string]interface{} `json:"variables,omitempty"`

	// Worker the name of the worker which activated this job
	Worker *string `json:"worker,omitempty"`
}

// ActivatedJobResult Base properties for ActivatedJob
type ActivatedJobResult = ActivatedJobBase

// BrokerInfo Provides information on a broker node.
type BrokerInfo struct {
	// Host The hostname for reaching the broker.
	Host *string `json:"host,omitempty"`

	// NodeId The unique (within a cluster) node ID for the broker.
	NodeId *int32 `json:"nodeId,omitempty"`

	// Partitions A list of partitions managed or replicated on this broker.
	Partitions *[]Partition `json:"partitions,omitempty"`

	// Port The port for reaching the broker.
	Port *int32 `json:"port,omitempty"`

	// Version The broker version.
	Version *string `json:"version,omitempty"`
}

// CancelProcessInstanceRequest defines model for CancelProcessInstanceRequest.
type CancelProcessInstanceRequest struct {
	// OperationReference A reference key chosen by the user that will be part of all records resulting from this operation.
	// Must be > 0 if provided.
	OperationReference *int64 `json:"operationReference,omitempty"`
}

// Changeset JSON object with changed task attribute values.
//
// The following attributes can be adjusted with this endpoint, additional attributes
// will be ignored:
//
// * `candidateGroups` - reset by providing an empty list
// * `candidateUsers` - reset by providing an empty list
// * `dueDate` - reset by providing an empty String
// * `followUpDate` - reset by providing an empty String
// * `priority` - minimum 0, maximum 100, default 50
//
// Providing any of those attributes with a `null` value or omitting it preserves
// the persisted attribute's value.
//
// The assignee cannot be adjusted with this endpoint, use the Assign task endpoint.
// This ensures correct event emission for assignee changes.
type Changeset struct {
	// CandidateGroups The list of candidate groups of the task. Reset by providing an empty list.
	CandidateGroups *[]string `json:"candidateGroups"`

	// CandidateUsers The list of candidate users of the task. Reset by providing an empty list.
	CandidateUsers *[]string `json:"candidateUsers"`

	// DueDate The due date of the task. Reset by providing an empty String.
	DueDate *time.Time `json:"dueDate"`

	// FollowUpDate The follow-up date of the task. Reset by providing an empty String.
	FollowUpDate *time.Time `json:"followUpDate"`

	// Priority The priority of the task.
	Priority             *int32                 `json:"priority"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ClockPinRequest defines model for ClockPinRequest.
type ClockPinRequest struct {
	// Timestamp The exact time in epoch milliseconds to which the clock should be pinned.
	Timestamp int64 `json:"timestamp"`
}

// CreateProcessInstanceRequest Base properties for CreateProcessInstanceRequest
type CreateProcessInstanceRequest = CreateProcessInstanceRequestBase

// CreateProcessInstanceRequestBase Base properties for CreateProcessInstanceRequest
type CreateProcessInstanceRequestBase struct {
	// AwaitCompletion Wait for the process instance to complete. If the process instance completion does
	// not occur within the requestTimeout, the request will be closed. This can lead to a 504
	// response status. Disabled by default.
	AwaitCompletion *bool `json:"awaitCompletion,omitempty"`

	// FetchVariables List of variables names to be included in the response.
	// If empty, all visible variables in the root scope will be returned.
	FetchVariables *[]string `json:"fetchVariables,omitempty"`

	// OperationReference A reference key chosen by the user that will be part of all records resulting from this operation.
	// Must be >0 if provided.
	OperationReference *int64 `json:"operationReference,omitempty"`

	// ProcessDefinitionId The BPMN process ID of the process definition to start an instance of.
	// Cannot be used together with processDefinitionKey.
	ProcessDefinitionId *string `json:"processDefinitionId,omitempty"`

	// ProcessDefinitionVersion The version of the process. Only considered when a processDefinitionId is provided.
	// By default, the latest version of the process is used.
	ProcessDefinitionVersion *int32 `json:"processDefinitionVersion,omitempty"`

	// RequestTimeout Timeout (in ms) the request waits for the process to complete. By default or
	// when set to 0, the generic request timeout configured in the cluster is applied.
	RequestTimeout *int64 `json:"requestTimeout,omitempty"`

	// StartInstructions List of start instructions. By default, the process instance will start at
	// the start event. If provided, the process instance will apply start instructions
	// after it has been created.
	StartInstructions *[]ProcessInstanceCreationStartInstruction `json:"startInstructions,omitempty"`

	// TenantId The tenant ID of the process definition.
	TenantId *string `json:"tenantId,omitempty"`

	// Variables JSON object that will instantiate the variables for the root variable scope
	// of the process instance.
	Variables *map[string]interface{} `json:"variables,omitempty"`
}

// CreateProcessInstanceResponse Base properties for CreateProcessInstanceResponse
type CreateProcessInstanceResponse = CreateProcessInstanceResponseBase

// CreateProcessInstanceResponseBase Base properties for CreateProcessInstanceResponse
type CreateProcessInstanceResponseBase struct {
	// ProcessDefinitionId The BPMN process ID of the process definition which was used to create the process.
	// instance
	ProcessDefinitionId *string `json:"processDefinitionId,omitempty"`

	// ProcessDefinitionVersion The version of the process definition which was used to create the process instance.
	ProcessDefinitionVersion *int32 `json:"processDefinitionVersion,omitempty"`

	// TenantId The tenant ID of the created process instance.
	TenantId *string `json:"tenantId,omitempty"`

	// Variables All the variables visible in the root scope.
	Variables *map[string]interface{} `json:"variables,omitempty"`
}

// CreateProcessInstanceResult Base properties for CreateProcessInstanceResponse
type CreateProcessInstanceResult = CreateProcessInstanceResponseBase

// DecisionDefinitionFilterRequest Base properties for DecisionDefinitionFilterRequest
type DecisionDefinitionFilterRequest = DecisionDefinitionFilterRequestBase

// DecisionDefinitionFilterRequestBase Base properties for DecisionDefinitionFilterRequest
type DecisionDefinitionFilterRequestBase struct {
	// DecisionDefinitionId The DMN id of the decision definition.
	DecisionDefinitionId *string `json:"decisionDefinitionId,omitempty"`

	// DecisionDefinitionName The DMN name of the decision definition.
	DecisionDefinitionName *string `json:"decisionDefinitionName,omitempty"`

	// DecisionRequirementsId the DMN id of the decision requirements graph that the decision definition is part of.
	DecisionRequirementsId *string `json:"decisionRequirementsId,omitempty"`

	// TenantId The tenant id of the decision definition.
	TenantId *string `json:"tenantId,omitempty"`

	// Version The assigned version of the decision definition.
	Version *int32 `json:"version,omitempty"`
}

// DecisionDefinitionItem Base properties for DecisionDefinitionItem
type DecisionDefinitionItem = DecisionDefinitionItemBase

// DecisionDefinitionItemBase Base properties for DecisionDefinitionItem
type DecisionDefinitionItemBase struct {
	// DecisionDefinitionId The DMN id of the decision definition.
	DecisionDefinitionId *string `json:"decisionDefinitionId,omitempty"`

	// DecisionDefinitionName The DMN name of the decision definition.
	DecisionDefinitionName *string `json:"decisionDefinitionName,omitempty"`

	// DecisionRequirementsId the DMN id of the decision requirements graph that the decision definition is part of.
	DecisionRequirementsId *string `json:"decisionRequirementsId,omitempty"`

	// TenantId The tenant id of the decision definition.
	TenantId *string `json:"tenantId,omitempty"`

	// Version The assigned version of the decision definition.
	Version *int32 `json:"version,omitempty"`
}

// DecisionDefinitionResult Base properties for DecisionDefinitionItem
type DecisionDefinitionResult = DecisionDefinitionItemBase

// DecisionDefinitionSearchQuery defines model for DecisionDefinitionSearchQuery.
type DecisionDefinitionSearchQuery = SearchQueryRequest

// DecisionDefinitionSearchQueryRequest defines model for DecisionDefinitionSearchQueryRequest.
type DecisionDefinitionSearchQueryRequest = SearchQueryRequest

// DecisionDefinitionSearchQueryResponse defines model for DecisionDefinitionSearchQueryResponse.
type DecisionDefinitionSearchQueryResponse = SearchQueryResponse

// DecisionDefinitionSearchQueryResult defines model for DecisionDefinitionSearchQueryResult.
type DecisionDefinitionSearchQueryResult = SearchQueryResponse

// DecisionEvaluationInstruction Base properties for EvaluateDecisionRequest
type DecisionEvaluationInstruction = EvaluateDecisionRequestBase

// DecisionInstanceFilter Base properties for DecisionInstanceFilterRequest
type DecisionInstanceFilter = DecisionInstanceFilterRequestBase

// DecisionInstanceFilterRequest Base properties for DecisionInstanceFilterRequest
type DecisionInstanceFilterRequest = DecisionInstanceFilterRequestBase

// DecisionInstanceFilterRequestBase Base properties for DecisionInstanceFilterRequest
type DecisionInstanceFilterRequestBase struct {
	// DecisionDefinitionId The ID of the DMN decision.
	DecisionDefinitionId *string `json:"decisionDefinitionId,omitempty"`

	// DecisionDefinitionName The name of the DMN decision.
	DecisionDefinitionName *string                   `json:"decisionDefinitionName,omitempty"`
	DecisionDefinitionType *DecisionInstanceTypeEnum `json:"decisionDefinitionType,omitempty"`

	// DecisionDefinitionVersion The version of the decision.
	DecisionDefinitionVersion *int32 `json:"decisionDefinitionVersion,omitempty"`

	// EvaluationFailure The evaluation failure of the decision instance.
	EvaluationFailure *string                    `json:"evaluationFailure,omitempty"`
	State             *DecisionInstanceStateEnum `json:"state,omitempty"`

	// TenantId The tenant ID of the decision instance.
	TenantId *string `json:"tenantId,omitempty"`
}

// DecisionInstanceItem Base properties for DecisionInstanceItem
type DecisionInstanceItem = DecisionInstanceItemBase

// DecisionInstanceItemBase Base properties for DecisionInstanceItem
type DecisionInstanceItemBase struct {
	// DecisionDefinitionId The ID of the DMN decision.
	DecisionDefinitionId *string `json:"decisionDefinitionId,omitempty"`

	// DecisionDefinitionName The name of the DMN decision.
	DecisionDefinitionName *string                   `json:"decisionDefinitionName,omitempty"`
	DecisionDefinitionType *DecisionInstanceTypeEnum `json:"decisionDefinitionType,omitempty"`

	// DecisionDefinitionVersion The version of the decision.
	DecisionDefinitionVersion *int32 `json:"decisionDefinitionVersion,omitempty"`

	// EvaluationDate The evaluation date of the decision instance.
	EvaluationDate *time.Time `json:"evaluationDate,omitempty"`

	// EvaluationFailure The evaluation failure of the decision instance.
	EvaluationFailure *string `json:"evaluationFailure,omitempty"`

	// Result The result of the decision instance.
	Result *string                    `json:"result,omitempty"`
	State  *DecisionInstanceStateEnum `json:"state,omitempty"`

	// TenantId The tenant ID of the decision instance.
	TenantId *string `json:"tenantId,omitempty"`
}

// DecisionInstanceResult Base properties for DecisionInstanceItem
type DecisionInstanceResult = DecisionInstanceItemBase

// DecisionInstanceSearchQuery defines model for DecisionInstanceSearchQuery.
type DecisionInstanceSearchQuery = SearchQueryRequest

// DecisionInstanceSearchQueryRequest defines model for DecisionInstanceSearchQueryRequest.
type DecisionInstanceSearchQueryRequest = SearchQueryRequest

// DecisionInstanceSearchQueryResponse defines model for DecisionInstanceSearchQueryResponse.
type DecisionInstanceSearchQueryResponse = SearchQueryResponse

// DecisionInstanceSearchQueryResult defines model for DecisionInstanceSearchQueryResult.
type DecisionInstanceSearchQueryResult = SearchQueryResponse

// DecisionInstanceStateEnum defines model for DecisionInstanceStateEnum.
type DecisionInstanceStateEnum = interface{}

// DecisionInstanceTypeEnum defines model for DecisionInstanceTypeEnum.
type DecisionInstanceTypeEnum = interface{}

// DecisionRequirementsFilter Base properties for DecisionRequirementsFilterRequest
type DecisionRequirementsFilter = DecisionRequirementsFilterRequestBase

// DecisionRequirementsFilterRequest Base properties for DecisionRequirementsFilterRequest
type DecisionRequirementsFilterRequest = DecisionRequirementsFilterRequestBase

// DecisionRequirementsFilterRequestBase Base properties for DecisionRequirementsFilterRequest
type DecisionRequirementsFilterRequestBase struct {
	// DecisionRequirementsId the DMN id of the decision requirements.
	DecisionRequirementsId *string `json:"decisionRequirementsId,omitempty"`

	// DecisionRequirementsName The DMN name of the decision requirements.
	DecisionRequirementsName *string `json:"decisionRequirementsName,omitempty"`

	// TenantId The tenant ID of the decision requirements.
	TenantId *string `json:"tenantId,omitempty"`

	// Version The assigned version of the decision requirements.
	Version *int32 `json:"version,omitempty"`
}

// DecisionRequirementsItem Base properties for DecisionRequirementsItem
type DecisionRequirementsItem = DecisionRequirementsItemBase

// DecisionRequirementsItemBase Base properties for DecisionRequirementsItem
type DecisionRequirementsItemBase struct {
	// DecisionRequirementsId the DMN id of the decision requirements.
	DecisionRequirementsId *string `json:"decisionRequirementsId,omitempty"`

	// DecisionRequirementsName The DMN name of the decision requirements.
	DecisionRequirementsName *string `json:"decisionRequirementsName,omitempty"`

	// ResourceName The name of the resource from which this decision requirements was parsed.
	ResourceName *string `json:"resourceName,omitempty"`

	// TenantId The tenant ID of the decision requirements.
	TenantId *string `json:"tenantId,omitempty"`

	// Version The assigned version of the decision requirements.
	Version *int32 `json:"version,omitempty"`
}

// DecisionRequirementsResult Base properties for DecisionRequirementsItem
type DecisionRequirementsResult = DecisionRequirementsItemBase

// DecisionRequirementsSearchQuery defines model for DecisionRequirementsSearchQuery.
type DecisionRequirementsSearchQuery = SearchQueryRequest

// DecisionRequirementsSearchQueryRequest defines model for DecisionRequirementsSearchQueryRequest.
type DecisionRequirementsSearchQueryRequest = SearchQueryRequest

// DecisionRequirementsSearchQueryResponse defines model for DecisionRequirementsSearchQueryResponse.
type DecisionRequirementsSearchQueryResponse = SearchQueryResponse

// DecisionRequirementsSearchQueryResult defines model for DecisionRequirementsSearchQueryResult.
type DecisionRequirementsSearchQueryResult = SearchQueryResponse

// DeleteResourceRequest defines model for DeleteResourceRequest.
type DeleteResourceRequest struct {
	// OperationReference A reference key chosen by the user that will be part of all records resulting from this operation.
	// Must be > 0 if provided.
	OperationReference *int64 `json:"operationReference,omitempty"`
}

// DeploymentDecision Base properties for DeploymentDecision.
type DeploymentDecision = DeploymentDecisionBase

// DeploymentDecisionBase Base properties for DeploymentDecision.
type DeploymentDecisionBase struct {
	// DecisionDefinitionId The dmn decision ID, as parsed during deployment, together with the version forms a
	// unique identifier for a specific decision.
	DecisionDefinitionId *string `json:"decisionDefinitionId,omitempty"`

	// DecisionRequirementsId The dmn ID of the decision requirements graph that this decision is part of, as parsed during deployment.
	DecisionRequirementsId *string `json:"decisionRequirementsId,omitempty"`

	// Name The DMN name of the decision, as parsed during deployment.
	Name *string `json:"name,omitempty"`

	// TenantId The tenant ID of the deployed decision.
	TenantId *string `json:"tenantId,omitempty"`

	// Version The assigned decision version.
	Version *int32 `json:"version,omitempty"`
}

// DeploymentDecisionRequirements Base properties for DeploymentDecisionRequirements.
type DeploymentDecisionRequirements = DeploymentDecisionRequirementsBase

// DeploymentDecisionRequirementsBase Base properties for DeploymentDecisionRequirements.
type DeploymentDecisionRequirementsBase struct {
	// DecisionRequirementsId The dmn decision requirements ID, as parsed during deployment; together with the versions forms a unique identifier for a specific decision.
	DecisionRequirementsId *string `json:"decisionRequirementsId,omitempty"`

	// DecisionRequirementsName The DMN name of the decision requirements, as parsed during deployment.
	DecisionRequirementsName *string `json:"decisionRequirementsName,omitempty"`

	// ResourceName The resource name from which this decision requirements was parsed.
	ResourceName *string `json:"resourceName,omitempty"`

	// TenantId The tenant ID of the deployed decision requirements.
	TenantId *string `json:"tenantId,omitempty"`

	// Version The assigned decision requirements version.
	Version *int32 `json:"version,omitempty"`
}

// DeploymentDecisionRequirementsResult Base properties for DeploymentDecisionRequirements.
type DeploymentDecisionRequirementsResult = DeploymentDecisionRequirementsBase

// DeploymentDecisionResult Base properties for DeploymentDecision.
type DeploymentDecisionResult = DeploymentDecisionBase

// DeploymentForm Base properties for DeploymentForm.
type DeploymentForm = DeploymentFormBase

// DeploymentFormBase Base properties for DeploymentForm.
type DeploymentFormBase struct {
	// FormId The form ID, as parsed during deployment, together with the version forms a
	// unique identifier for a specific form.
	FormId *string `json:"formId,omitempty"`

	// ResourceName The resource name from which this form was parsed.
	ResourceName *string `json:"resourceName,omitempty"`

	// TenantId The tenant ID of the deployed form.
	TenantId *string `json:"tenantId,omitempty"`

	// Version The assigned form version.
	Version *int32 `json:"version,omitempty"`
}

// DeploymentFormResult Base properties for DeploymentForm.
type DeploymentFormResult = DeploymentFormBase

// DeploymentMetadata defines model for DeploymentMetadata.
type DeploymentMetadata struct {
	// DecisionDefinition A deployed decision.
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	DecisionDefinition *DeploymentDecision `json:"decisionDefinition,omitempty"`

	// DecisionRequirements Deployed decision requirements.
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	DecisionRequirements *DeploymentDecisionRequirements `json:"decisionRequirements,omitempty"`

	// Form A deployed form.
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Form *DeploymentForm `json:"form,omitempty"`

	// ProcessDefinition A deployed process.
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	ProcessDefinition *DeploymentProcess `json:"processDefinition,omitempty"`

	// Resource A deployed Resource.
	Resource *DeploymentResource `json:"resource,omitempty"`
}

// DeploymentMetadataResult defines model for DeploymentMetadataResult.
type DeploymentMetadataResult struct {
	// DecisionDefinition A deployed decision.
	DecisionDefinition *DeploymentDecisionResult `json:"decisionDefinition,omitempty"`

	// DecisionRequirements Deployed decision requirements.
	DecisionRequirements *DeploymentDecisionRequirementsResult `json:"decisionRequirements,omitempty"`

	// Form A deployed form.
	Form *DeploymentFormResult `json:"form,omitempty"`

	// ProcessDefinition A deployed process.
	ProcessDefinition *DeploymentProcessResult `json:"processDefinition,omitempty"`

	// Resource A deployed Resource.
	Resource *DeploymentResourceResult `json:"resource,omitempty"`
}

// DeploymentProcess Base properties for DeploymentProcess.
type DeploymentProcess = DeploymentProcessBase

// DeploymentProcessBase Base properties for DeploymentProcess.
type DeploymentProcessBase struct {
	// ProcessDefinitionId The bpmn process ID, as parsed during deployment, together with the version forms a
	// unique identifier for a specific process definition.
	ProcessDefinitionId *string `json:"processDefinitionId,omitempty"`

	// ProcessDefinitionVersion The assigned process version.
	ProcessDefinitionVersion *int32 `json:"processDefinitionVersion,omitempty"`

	// ResourceName The resource name from which this process was parsed.
	ResourceName *string `json:"resourceName,omitempty"`

	// TenantId The tenant ID of the deployed process.
	TenantId *string `json:"tenantId,omitempty"`
}

// DeploymentProcessResult Base properties for DeploymentProcess.
type DeploymentProcessResult = DeploymentProcessBase

// DeploymentResource Base properties for DeploymentResource.
type DeploymentResource = DeploymentResourceBase

// DeploymentResourceBase Base properties for DeploymentResource.
type DeploymentResourceBase struct {
	// ResourceId The resource ID, as parsed during deployment, together with the version forms a
	// unique identifier for a specific form.
	ResourceId *string `json:"resourceId,omitempty"`

	// ResourceName The resource name from which this resource was parsed.
	ResourceName *string `json:"resourceName,omitempty"`

	// TenantId The tenant ID of the deployed form.
	TenantId *string `json:"tenantId,omitempty"`

	// Version The assigned resource version.
	Version *int32 `json:"version,omitempty"`
}

// DeploymentResourceResult Base properties for DeploymentResource.
type DeploymentResourceResult = DeploymentResourceBase

// DeploymentResponse Base properties for DeploymentResponse
type DeploymentResponse = DeploymentResponseBase

// DeploymentResponseBase Base properties for DeploymentResponse
type DeploymentResponseBase struct {
	TenantId *string `json:"tenantId,omitempty"`
}

// DeploymentResult Base properties for DeploymentResponse
type DeploymentResult = DeploymentResponseBase

// DocumentCreationBatchResponse defines model for DocumentCreationBatchResponse.
type DocumentCreationBatchResponse = DocumentCreationBatchResponseBase

// DocumentCreationBatchResponseBase defines model for DocumentCreationBatchResponseBase.
type DocumentCreationBatchResponseBase struct {
	// FailedDocuments Documents that failed creation.
	FailedDocuments *[]DocumentCreationFailureDetail `json:"failedDocuments,omitempty"`
}

// DocumentCreationBatchResult defines model for DocumentCreationBatchResult.
type DocumentCreationBatchResult = DocumentCreationBatchResponseBase

// DocumentCreationFailureDetail defines model for DocumentCreationFailureDetail.
type DocumentCreationFailureDetail struct {
	// Detail The detail of the failure.
	Detail *string `json:"detail,omitempty"`

	// FileName The name of the file.
	FileName *string `json:"fileName,omitempty"`
}

// DocumentDetails Information about the document.
type DocumentDetails = DocumentMetadataBase

// DocumentLink defines model for DocumentLink.
type DocumentLink struct {
	// ExpiresAt The date and time when the link expires.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Url The link to the document.
	Url *string `json:"url,omitempty"`
}

// DocumentLinkRequest defines model for DocumentLinkRequest.
type DocumentLinkRequest struct {
	// TimeToLive The time-to-live of the document link in ms.
	TimeToLive *int64 `json:"timeToLive,omitempty"`
}

// DocumentMetadata Information about the document.
type DocumentMetadata = DocumentMetadataBase

// DocumentMetadataBase Information about the document.
type DocumentMetadataBase struct {
	// ContentType The content type of the document.
	ContentType *string `json:"contentType,omitempty"`

	// CustomProperties Custom properties of the document.
	CustomProperties *map[string]interface{} `json:"customProperties,omitempty"`

	// ExpiresAt The date and time when the document expires.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// FileName The name of the file.
	FileName *string `json:"fileName,omitempty"`

	// ProcessDefinitionId The ID of the process definition that created the document.
	ProcessDefinitionId *string `json:"processDefinitionId,omitempty"`

	// Size The size of the document in bytes.
	Size *int64 `json:"size,omitempty"`
}

// DocumentReference defines model for DocumentReference.
type DocumentReference = DocumentReferenceBase

// DocumentReferenceBase defines model for DocumentReferenceBase.
type DocumentReferenceBase struct {
	// CamundaDocumentType Document discriminator. Always set to "camunda".
	CamundaDocumentType *DocumentReferenceBaseCamundaDocumentType `json:"camunda.document.type,omitempty"`

	// ContentHash The hash of the document.
	ContentHash *string `json:"contentHash,omitempty"`

	// DocumentId The ID of the document.
	DocumentId *string `json:"documentId,omitempty"`

	// StoreId The ID of the document store.
	StoreId *string `json:"storeId,omitempty"`
}

// DocumentReferenceBaseCamundaDocumentType Document discriminator. Always set to "camunda".
type DocumentReferenceBaseCamundaDocumentType string

// DocumentReferenceResult defines model for DocumentReferenceResult.
type DocumentReferenceResult = DocumentReferenceBase

// EvaluateDecisionRequest Base properties for EvaluateDecisionRequest
type EvaluateDecisionRequest = EvaluateDecisionRequestBase

// EvaluateDecisionRequestBase Base properties for EvaluateDecisionRequest
type EvaluateDecisionRequestBase struct {
	// DecisionDefinitionId The ID of the decision to be evaluated.
	// Cannot be used together with decisionDefinitionKey. When using the decision ID, the latest
	// deployed version of the decision is used.
	DecisionDefinitionId *string `json:"decisionDefinitionId,omitempty"`

	// TenantId The tenant ID of the decision.
	TenantId *string `json:"tenantId,omitempty"`

	// Variables The message variables as JSON document.
	Variables *map[string]interface{} `json:"variables,omitempty"`
}

// EvaluateDecisionResponse Base properties for EvaluateDecisionResponse
type EvaluateDecisionResponse = EvaluateDecisionResponseBase

// EvaluateDecisionResponseBase Base properties for EvaluateDecisionResponse
type EvaluateDecisionResponseBase struct {
	// DecisionDefinitionId The ID of the decision which was evaluated.
	DecisionDefinitionId *string `json:"decisionDefinitionId,omitempty"`

	// DecisionDefinitionName The name of the decision which was evaluated.
	DecisionDefinitionName *string `json:"decisionDefinitionName,omitempty"`

	// DecisionDefinitionVersion The version of the decision which was evaluated.
	DecisionDefinitionVersion *int32 `json:"decisionDefinitionVersion,omitempty"`

	// DecisionRequirementsId The ID of the decision requirements graph that the decision which was evaluated is part of.
	DecisionRequirementsId *string `json:"decisionRequirementsId,omitempty"`

	// FailedDecisionDefinitionId The ID of the decision which failed during evaluation.
	FailedDecisionDefinitionId *string `json:"failedDecisionDefinitionId,omitempty"`

	// FailureMessage Message describing why the decision which was evaluated failed.
	FailureMessage *string `json:"failureMessage,omitempty"`

	// Output JSON document that will instantiate the result of the decision which was evaluated.
	Output *string `json:"output,omitempty"`

	// TenantId The tenant ID of the evaluated decision.
	TenantId *string `json:"tenantId,omitempty"`
}

// EvaluateDecisionResult Base properties for EvaluateDecisionResponse
type EvaluateDecisionResult = EvaluateDecisionResponseBase

// EvaluatedDecisionInputItem The decision inputs that were evaluated within this decision evaluation.
type EvaluatedDecisionInputItem struct {
	// InputId The ID of the evaluated decision input.
	InputId *string `json:"inputId,omitempty"`

	// InputName The name of the evaluated decision input.
	InputName *string `json:"inputName,omitempty"`

	// InputValue The value of the evaluated decision input.
	InputValue *string `json:"inputValue,omitempty"`
}

// EvaluatedDecisionItem Base properties for EvaluatedDecisionItem
type EvaluatedDecisionItem = EvaluatedDecisionItemBase

// EvaluatedDecisionItemBase Base properties for EvaluatedDecisionItem
type EvaluatedDecisionItemBase struct {
	// DecisionDefinitionId The ID of the decision which was evaluated.
	DecisionDefinitionId *string `json:"decisionDefinitionId,omitempty"`

	// DecisionDefinitionName The name of the decision which was evaluated.
	DecisionDefinitionName *string `json:"decisionDefinitionName,omitempty"`

	// DecisionDefinitionType The type of the decision which was evaluated.
	DecisionDefinitionType *string `json:"decisionDefinitionType,omitempty"`

	// DecisionDefinitionVersion The version of the decision which was evaluated.
	DecisionDefinitionVersion *int32                        `json:"decisionDefinitionVersion,omitempty"`
	EvaluatedInputs           *[]EvaluatedDecisionInputItem `json:"evaluatedInputs,omitempty"`
	MatchedRules              *[]MatchedDecisionRuleItem    `json:"matchedRules,omitempty"`

	// Output JSON document that will instantiate the result of the decision which was evaluated.
	Output *string `json:"output,omitempty"`

	// TenantId The tenant ID of the evaluated decision.
	TenantId *string `json:"tenantId,omitempty"`
}

// EvaluatedDecisionOutputItem The evaluated decision outputs.
type EvaluatedDecisionOutputItem struct {
	// OutputId The ID of the evaluated decision output.
	OutputId *string `json:"outputId,omitempty"`

	// OutputName The name of the evaluated decision output.
	OutputName *string `json:"outputName,omitempty"`

	// OutputValue The value of the evaluated decision output.
	OutputValue *string `json:"outputValue,omitempty"`
}

// EvaluatedDecisionResult Base properties for EvaluatedDecisionItem
type EvaluatedDecisionResult = EvaluatedDecisionItemBase

// FlowNodeInstanceFilter Base properties for FlowNodeInstanceFilterRequest
type FlowNodeInstanceFilter = FlowNodeInstanceFilterRequestBase

// FlowNodeInstanceFilterRequest Base properties for FlowNodeInstanceFilterRequest
type FlowNodeInstanceFilterRequest = FlowNodeInstanceFilterRequestBase

// FlowNodeInstanceFilterRequestBase Base properties for FlowNodeInstanceFilterRequest
type FlowNodeInstanceFilterRequestBase struct {
	// FlowNodeId The flow node id
	FlowNodeId *string `json:"flowNodeId,omitempty"`

	// FlowNodeName The flow node name
	FlowNodeName *string `json:"flowNodeName,omitempty"`

	// Incident Shows whether this flow node instance has an incident related to
	Incident *bool `json:"incident,omitempty"`

	// State The state, one of ACTIVE, COMPLETED, TERMINATED.
	State *string `json:"state,omitempty"`

	// TenantId The tenant id
	TenantId *string `json:"tenantId,omitempty"`

	// TreePath The path of keys from process instance to this flow node instance separated by '/'
	TreePath *string `json:"treePath,omitempty"`

	// Type The flow node type
	Type *string `json:"type,omitempty"`
}

// FlowNodeInstanceItem Base properties for FlowNodeInstanceItem
type FlowNodeInstanceItem = FlowNodeInstanceItemBase

// FlowNodeInstanceItemBase Base properties for FlowNodeInstanceItem
type FlowNodeInstanceItemBase struct {
	EndDate      *string `json:"endDate,omitempty"`
	FlowNodeId   *string `json:"flowNodeId,omitempty"`
	FlowNodeName *string `json:"flowNodeName,omitempty"`
	Incident     *bool   `json:"incident,omitempty"`
	StartDate    *string `json:"startDate,omitempty"`
	State        *string `json:"state,omitempty"`
	TenantId     *string `json:"tenantId,omitempty"`
	TreePath     *string `json:"treePath,omitempty"`
	Type         *string `json:"type,omitempty"`
}

// FlowNodeInstanceResult Base properties for FlowNodeInstanceItem
type FlowNodeInstanceResult = FlowNodeInstanceItemBase

// FlowNodeInstanceSearchQuery defines model for FlowNodeInstanceSearchQuery.
type FlowNodeInstanceSearchQuery = SearchQueryRequest

// FlowNodeInstanceSearchQueryRequest defines model for FlowNodeInstanceSearchQueryRequest.
type FlowNodeInstanceSearchQueryRequest = SearchQueryRequest

// FlowNodeInstanceSearchQueryResponse defines model for FlowNodeInstanceSearchQueryResponse.
type FlowNodeInstanceSearchQueryResponse = SearchQueryResponse

// FlowNodeInstanceSearchQueryResult defines model for FlowNodeInstanceSearchQueryResult.
type FlowNodeInstanceSearchQueryResult = SearchQueryResponse

// IncidentFilter Base properties for IncidentFilterRequest
type IncidentFilter = IncidentFilterRequestBase

// IncidentFilterRequest Base properties for IncidentFilterRequest
type IncidentFilterRequest = IncidentFilterRequestBase

// IncidentFilterRequestBase Base properties for IncidentFilterRequest
type IncidentFilterRequestBase struct {
	// CreationTime Date of incident creation.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// ErrorMessage Error message which describes the error in more detail.
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// ErrorType Incident error type with a defined set of values.
	ErrorType *IncidentFilterRequestBaseErrorType `json:"errorType,omitempty"`

	// FlowNodeId The flow node id associated to this incident.
	FlowNodeId *string `json:"flowNodeId,omitempty"`

	// ProcessDefinitionId The bpmn process id associated to this incident.
	ProcessDefinitionId *string `json:"processDefinitionId,omitempty"`

	// State State of this incident with a defined set of values.
	State *IncidentFilterRequestBaseState `json:"state,omitempty"`

	// TenantId The tenant id of the incident.
	TenantId *string `json:"tenantId,omitempty"`

	// TreePath The path from process instance via flow node ids and flow node instance keys leading to this incident.
	TreePath *string `json:"treePath,omitempty"`
}

// IncidentFilterRequestBaseErrorType Incident error type with a defined set of values.
type IncidentFilterRequestBaseErrorType string

// IncidentFilterRequestBaseState State of this incident with a defined set of values.
type IncidentFilterRequestBaseState string

// IncidentItem Base properties for IncidentItem
type IncidentItem = IncidentItemBase

// IncidentItemBase Base properties for IncidentItem
type IncidentItemBase struct {
	// CreationTime Date of incident creation.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// ErrorMessage Error message which describes the error in more detail.
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// ErrorType Incident error type with a defined set of values.
	ErrorType *IncidentItemBaseErrorType `json:"errorType,omitempty"`

	// FlowNodeId The flow node id associated to this incident.
	FlowNodeId *string `json:"flowNodeId,omitempty"`

	// ProcessDefinitionId The bpmn process id associated to this incident.
	ProcessDefinitionId *string `json:"processDefinitionId,omitempty"`

	// State State of this incident with a defined set of values.
	State *IncidentItemBaseState `json:"state,omitempty"`

	// TenantId The tenant id of the incident.
	TenantId *string `json:"tenantId,omitempty"`

	// TreePath The path from process instance via flow node ids and flow node instance keys leading to this incident.
	TreePath *string `json:"treePath,omitempty"`
}

// IncidentItemBaseErrorType Incident error type with a defined set of values.
type IncidentItemBaseErrorType string

// IncidentItemBaseState State of this incident with a defined set of values.
type IncidentItemBaseState string

// IncidentResult Base properties for IncidentItem
type IncidentResult = IncidentItemBase

// IncidentSearchQuery defines model for IncidentSearchQuery.
type IncidentSearchQuery = SearchQueryRequest

// IncidentSearchQueryRequest defines model for IncidentSearchQueryRequest.
type IncidentSearchQueryRequest = SearchQueryRequest

// IncidentSearchQueryResponse defines model for IncidentSearchQueryResponse.
type IncidentSearchQueryResponse = SearchQueryResponse

// IncidentSearchQueryResult defines model for IncidentSearchQueryResult.
type IncidentSearchQueryResult = SearchQueryResponse

// JobActivationRequest defines model for JobActivationRequest.
type JobActivationRequest struct {
	// FetchVariable a list of variables to fetch as the job variables; if empty, all visible variables at the time of activation for the scope of the job will be returned
	FetchVariable *[]string `json:"fetchVariable"`

	// MaxJobsToActivate the maximum jobs to activate by this request
	MaxJobsToActivate int32 `json:"maxJobsToActivate"`

	// RequestTimeout The request will be completed when at least one job is activated or after the requestTimeout (in ms). If the requestTimeout = 0, a default timeout is used. If the requestTimeout < 0, long polling is disabled and the request is completed immediately, even when no job is activated.
	RequestTimeout *int64 `json:"requestTimeout"`

	// TenantIds a list of IDs of tenants for which to activate jobs
	TenantIds *[]string `json:"tenantIds"`

	// Timeout a job returned after this call will not be activated by another call until the timeout (in ms) has been reached
	Timeout int64 `json:"timeout"`

	// Type the job type, as defined in the BPMN process (e.g. <zeebe:taskDefinition type="payment-service" />)
	Type string `json:"type"`

	// Worker the name of the worker activating the jobs, mostly used for logging purposes
	Worker *string `json:"worker"`
}

// JobActivationResponse Base properties for JobActivationResponse
type JobActivationResponse = JobActivationResponseBase

// JobActivationResponseBase Base properties for JobActivationResponse
type JobActivationResponseBase = map[string]interface{}

// JobActivationResult Base properties for JobActivationResponse
type JobActivationResult = JobActivationResponseBase

// JobChangeset JSON object with changed job attribute values.
//
// The following attributes can be adjusted with this endpoint, additional attributes
// will be ignored:
//
// * `retries` - The new amount of retries for the job; must be a positive number.
// * `timeout` - The duration of the new timeout in ms, starting from the current moment.
//
// Providing any of those attributes with a null value or omitting it preserves the persisted attribute’s value.
//
// The job cannot be completed or failed with this endpoint, use the complete job or fail job endpoints instead.
type JobChangeset struct {
	// Retries The new amount of retries for the job; must be a positive number.
	Retries *int32 `json:"retries"`

	// Timeout The duration of the new timeout in ms, starting from the current moment.
	Timeout *int64 `json:"timeout"`
}

// JobCompletionRequest defines model for JobCompletionRequest.
type JobCompletionRequest struct {
	// Variables The variables to complete the job with.
	Variables *map[string]interface{} `json:"variables"`
}

// JobErrorRequest defines model for JobErrorRequest.
type JobErrorRequest struct {
	// ErrorCode The error code that will be matched with an error catch event.
	ErrorCode string `json:"errorCode"`

	// ErrorMessage An error message that provides additional context.
	ErrorMessage *string `json:"errorMessage"`

	// Variables JSON object that will instantiate the variables at the local scope of the error catch event that catches the thrown error.
	Variables *map[string]interface{} `json:"variables"`
}

// JobFailRequest defines model for JobFailRequest.
type JobFailRequest struct {
	// ErrorMessage An optional message describing why the job failed. This is particularly useful if a job runs out of retries and an incident is raised, as this message can help explain why an incident was raised.
	ErrorMessage *string `json:"errorMessage"`

	// Retries The amount of retries the job should have left
	Retries *int32 `json:"retries,omitempty"`

	// RetryBackOff The backoff timeout (in ms) for the next retry.
	RetryBackOff *int64 `json:"retryBackOff,omitempty"`

	// Variables JSON object that will instantiate the variables at the local scope of the job's associated task.
	Variables *map[string]interface{} `json:"variables"`
}

// JobUpdateRequest defines model for JobUpdateRequest.
type JobUpdateRequest struct {
	// Changeset JSON object with changed job attribute values.
	//
	// The following attributes can be adjusted with this endpoint, additional attributes
	// will be ignored:
	//
	// * `retries` - The new amount of retries for the job; must be a positive number.
	// * `timeout` - The duration of the new timeout in ms, starting from the current moment.
	//
	// Providing any of those attributes with a null value or omitting it preserves the persisted attribute’s value.
	//
	// The job cannot be completed or failed with this endpoint, use the complete job or fail job endpoints instead.
	Changeset JobChangeset `json:"changeset"`
}

// LicenseResponse The response of a license request.
type LicenseResponse struct {
	// LicenseType Will return the license type property of the Camunda license
	LicenseType *string `json:"licenseType,omitempty"`

	// ValidLicense True if the Camunda license is valid, false if otherwise
	ValidLicense *bool `json:"validLicense,omitempty"`
}

// MatchedDecisionRuleItem The decision rules that matched within this decision evaluation.
type MatchedDecisionRuleItem struct {
	EvaluatedOutputs *[]EvaluatedDecisionOutputItem `json:"evaluatedOutputs,omitempty"`

	// RuleId The ID of the matched rule.
	RuleId *string `json:"ruleId,omitempty"`

	// RuleIndex The index of the matched rule.
	RuleIndex *int32 `json:"ruleIndex,omitempty"`
}

// MessageCorrelationRequest defines model for MessageCorrelationRequest.
type MessageCorrelationRequest struct {
	// CorrelationKey The correlation key of the message
	CorrelationKey *string `json:"correlationKey,omitempty"`

	// Name The message name as defined in the BPMN process
	Name *string `json:"name,omitempty"`

	// TenantId the tenant for which the message is published
	TenantId *string `json:"tenantId"`

	// Variables The message variables as JSON document
	Variables *map[string]interface{} `json:"variables"`
}

// MessageCorrelationResponse Base properties for MessageCorrelationResponse
type MessageCorrelationResponse = MessageCorrelationResponseBase

// MessageCorrelationResponseBase Base properties for MessageCorrelationResponse
type MessageCorrelationResponseBase struct {
	// TenantId The tenant ID of the correlated message
	TenantId *string `json:"tenantId,omitempty"`
}

// MessageCorrelationResult Base properties for MessageCorrelationResponse
type MessageCorrelationResult = MessageCorrelationResponseBase

// MessagePublicationRequest defines model for MessagePublicationRequest.
type MessagePublicationRequest struct {
	// CorrelationKey The correlation key of the message.
	CorrelationKey string `json:"correlationKey"`

	// MessageId The unique ID of the message. Only useful to ensure only one message with the given ID
	// will ever be published (during its lifetime).
	MessageId *string `json:"messageId"`

	// Name The name of the message.
	Name string `json:"name"`

	// TenantId The tenant of the message sender.
	TenantId *string `json:"tenantId"`

	// TimeToLive Timespan (in ms) to buffer the message on the broker.
	TimeToLive *int64 `json:"timeToLive,omitempty"`

	// Variables The message variables as JSON document.
	Variables *map[string]interface{} `json:"variables"`
}

// MessagePublicationResponse Base properties for MessagePublicationResponse
type MessagePublicationResponse = MessagePublicationResponseBase

// MessagePublicationResponseBase Base properties for MessagePublicationResponse
type MessagePublicationResponseBase struct {
	// TenantId The tenant ID of the message.
	TenantId *string `json:"tenantId,omitempty"`
}

// MessagePublicationResult Base properties for MessagePublicationResponse
type MessagePublicationResult = MessagePublicationResponseBase

// MigrateProcessInstanceMappingInstruction The mapping instructions describe how to map elements from the source process definition to the target process definition.
type MigrateProcessInstanceMappingInstruction struct {
	// SourceElementId The element ID to migrate from.
	SourceElementId string `json:"sourceElementId"`

	// TargetElementId The element ID to migrate into.
	TargetElementId string `json:"targetElementId"`
}

// MigrateProcessInstanceRequest Base properties for MigrateProcessInstanceRequest
type MigrateProcessInstanceRequest = MigrateProcessInstanceRequestBase

// MigrateProcessInstanceRequestBase Base properties for MigrateProcessInstanceRequest
type MigrateProcessInstanceRequestBase struct {
	MappingInstructions *[]MigrateProcessInstanceMappingInstruction `json:"mappingInstructions,omitempty"`

	// OperationReference A reference key chosen by the user that will be part of all records resulting from this operation. Must be > 0 if provided.
	OperationReference *int64 `json:"operationReference,omitempty"`
}

// ModifyProcessInstanceActivateInstruction Base properties for ModifyProcessInstanceActivateInstruction
type ModifyProcessInstanceActivateInstruction = ModifyProcessInstanceActivateInstructionBase

// ModifyProcessInstanceActivateInstructionBase Base properties for ModifyProcessInstanceActivateInstruction
type ModifyProcessInstanceActivateInstructionBase struct {
	// ElementId The ID of the element that should be activated.
	ElementId            *string                                     `json:"elementId,omitempty"`
	VariableInstructions *[]ModifyProcessInstanceVariableInstruction `json:"variableInstructions,omitempty"`
}

// ModifyProcessInstanceRequest Base properties for ModifyProcessInstanceRequest
type ModifyProcessInstanceRequest = ModifyProcessInstanceRequestBase

// ModifyProcessInstanceRequestBase Base properties for ModifyProcessInstanceRequest
type ModifyProcessInstanceRequestBase struct {
	// OperationReference A reference key chosen by the user that will be part of all records resulting from this operation. Must be > 0 if provided.
	OperationReference *int64 `json:"operationReference,omitempty"`
}

// ModifyProcessInstanceTerminateInstruction Instructions describing which elements should be terminated.
type ModifyProcessInstanceTerminateInstruction struct {
	// ElementInstanceKey The ID of the element that should be terminated.
	ElementInstanceKey int64 `json:"elementInstanceKey"`
}

// ModifyProcessInstanceVariableInstruction Instructions describing which variables should be created.
type ModifyProcessInstanceVariableInstruction struct {
	// ScopeId The ID of the element in which scope the variables should be created.
	// Leave empty to create the variables in the global scope of the process instance
	ScopeId *string `json:"scopeId,omitempty"`

	// Variables JSON document that will instantiate the variables for the root variable scope of the process instance.
	// It must be a JSON object, as variables will be mapped in a key-value fashion.
	Variables map[string]interface{} `json:"variables"`
}

// OperationItem  Operation
type OperationItem struct {
	BatchOperationId *string             `json:"batchOperationId,omitempty"`
	CompletedDate    *time.Time          `json:"completedDate,omitempty"`
	ErrorMessage     *string             `json:"errorMessage,omitempty"`
	Id               *string             `json:"id,omitempty"`
	State            *OperationItemState `json:"state,omitempty"`
	Type             *OperationItemType  `json:"type,omitempty"`
}

// OperationItemState defines model for OperationItem.State.
type OperationItemState string

// OperationItemType defines model for OperationItem.Type.
type OperationItemType string

// Partition Provides information on a partition within a broker node.
type Partition struct {
	// Health Describes the current health of the partition.
	Health *PartitionHealth `json:"health,omitempty"`

	// PartitionId The unique ID of this partition.
	PartitionId *int32 `json:"partitionId,omitempty"`

	// Role Describes the Raft role of the broker for a given partition.
	Role *PartitionRole `json:"role,omitempty"`
}

// PartitionHealth Describes the current health of the partition.
type PartitionHealth string

// PartitionRole Describes the Raft role of the broker for a given partition.
type PartitionRole string

// ProblemDetail A Problem detail object as described in [RFC 9457](https://www.rfc-editor.org/rfc/rfc9457). There may be additional properties specific to the problem type.
type ProblemDetail struct {
	// Detail An explanation of the problem in more detail.
	Detail *string `json:"detail,omitempty"`

	// Instance A URI identifying the origin of the problem.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code for this problem.
	Status *int32 `json:"status,omitempty"`

	// Title A summary of the problem type.
	Title *string `json:"title,omitempty"`

	// Type A URI identifying the problem type.
	Type *string `json:"type,omitempty"`
}

// ProcessInstanceCreationInstruction Base properties for CreateProcessInstanceRequest
type ProcessInstanceCreationInstruction = CreateProcessInstanceRequestBase

// ProcessInstanceCreationStartInstruction defines model for ProcessInstanceCreationStartInstruction.
type ProcessInstanceCreationStartInstruction struct {
	// ElementId Future extensions might include:
	//   - different types of start instructions
	//   - ability to set local variables for different flow scopes
	//
	// For now, however, the start instruction is implicitly a "startBeforeElement" instruction
	ElementId *string `json:"elementId,omitempty"`
}

// ProcessInstanceFilter Base properties for ProcessInstanceFilterRequest
type ProcessInstanceFilter = ProcessInstanceFilterRequestBase

// ProcessInstanceFilterRequest Base properties for ProcessInstanceFilterRequest
type ProcessInstanceFilterRequest = ProcessInstanceFilterRequestBase

// ProcessInstanceFilterRequestBase Base properties for ProcessInstanceFilterRequest
type ProcessInstanceFilterRequestBase struct {
	Active           *bool   `json:"active,omitempty"`
	ActivityId       *string `json:"activityId,omitempty"`
	BatchOperationId *string `json:"batchOperationId,omitempty"`

	// BpmnProcessId The bpmn process ID.
	BpmnProcessId            *string                               `json:"bpmnProcessId,omitempty"`
	Canceled                 *bool                                 `json:"canceled,omitempty"`
	Completed                *bool                                 `json:"completed,omitempty"`
	EndDate                  *time.Time                            `json:"endDate,omitempty"`
	ErrorMessage             *string                               `json:"errorMessage,omitempty"`
	Finished                 *bool                                 `json:"finished,omitempty"`
	Incidents                *bool                                 `json:"incidents,omitempty"`
	ProcessDefinitionVersion *int32                                `json:"processDefinitionVersion,omitempty"`
	RetriesLeft              *bool                                 `json:"retriesLeft,omitempty"`
	Running                  *bool                                 `json:"running,omitempty"`
	StartDate                *time.Time                            `json:"startDate,omitempty"`
	TenantId                 *string                               `json:"tenantId,omitempty"`
	Variable                 *ProcessInstanceVariableFilterRequest `json:"variable,omitempty"`
}

// ProcessInstanceItem Base properties for ProcessInstanceItem
type ProcessInstanceItem = ProcessInstanceItemBase

// ProcessInstanceItemBase Base properties for ProcessInstanceItem
type ProcessInstanceItemBase struct {
	BpmnProcessId      *string                         `json:"bpmnProcessId,omitempty"`
	CallHierarchy      *[]ProcessInstanceReferenceItem `json:"callHierarchy,omitempty"`
	EndDate            *time.Time                      `json:"endDate,omitempty"`
	HasActiveOperation *bool                           `json:"hasActiveOperation,omitempty"`
	Incident           *bool                           `json:"incident,omitempty"`
	Operations         *[]OperationItem                `json:"operations,omitempty"`

	// ProcessDefinitionName The process name.
	ProcessDefinitionName    *string                       `json:"processDefinitionName,omitempty"`
	ProcessDefinitionVersion *int32                        `json:"processDefinitionVersion,omitempty"`
	RootInstanceId           *string                       `json:"rootInstanceId,omitempty"`
	StartDate                *time.Time                    `json:"startDate,omitempty"`
	State                    *ProcessInstanceItemBaseState `json:"state,omitempty"`
	TenantId                 *string                       `json:"tenantId,omitempty"`
}

// ProcessInstanceItemBaseState defines model for ProcessInstanceItemBase.State.
type ProcessInstanceItemBaseState string

// ProcessInstanceMigrationInstruction Base properties for MigrateProcessInstanceRequest
type ProcessInstanceMigrationInstruction = MigrateProcessInstanceRequestBase

// ProcessInstanceModificationActivateInstruction Base properties for ModifyProcessInstanceActivateInstruction
type ProcessInstanceModificationActivateInstruction = ModifyProcessInstanceActivateInstructionBase

// ProcessInstanceModificationInstruction Base properties for ModifyProcessInstanceRequest
type ProcessInstanceModificationInstruction = ModifyProcessInstanceRequestBase

// ProcessInstanceModificationTerminateInstruction Instructions describing which elements should be terminated.
type ProcessInstanceModificationTerminateInstruction struct {
	// ElementInstanceKey The ID of the element that should be terminated.
	ElementInstanceKey string `json:"elementInstanceKey"`
}

// ProcessInstanceReferenceItem Process instance reference description
type ProcessInstanceReferenceItem struct {
	InstanceId            *string `json:"instanceId,omitempty"`
	ProcessDefinitionId   *string `json:"processDefinitionId,omitempty"`
	ProcessDefinitionName *string `json:"processDefinitionName,omitempty"`
}

// ProcessInstanceResult Base properties for ProcessInstanceItem
type ProcessInstanceResult = ProcessInstanceItemBase

// ProcessInstanceSearchQuery defines model for ProcessInstanceSearchQuery.
type ProcessInstanceSearchQuery = SearchQueryRequest

// ProcessInstanceSearchQueryRequest defines model for ProcessInstanceSearchQueryRequest.
type ProcessInstanceSearchQueryRequest = SearchQueryRequest

// ProcessInstanceSearchQueryResponse defines model for ProcessInstanceSearchQueryResponse.
type ProcessInstanceSearchQueryResponse = SearchQueryResponse

// ProcessInstanceSearchQueryResult defines model for ProcessInstanceSearchQueryResult.
type ProcessInstanceSearchQueryResult = SearchQueryResponse

// ProcessInstanceVariableFilterRequest defines model for ProcessInstanceVariableFilterRequest.
type ProcessInstanceVariableFilterRequest struct {
	Name   *string   `json:"name,omitempty"`
	Values *[]string `json:"values,omitempty"`
}

// ResourceResult defines model for ResourceResult.
type ResourceResult struct {
	// ResourceId The resource ID of this resource.
	ResourceId *string `json:"resourceId,omitempty"`

	// ResourceKey The unique key of this resource.
	ResourceKey *string `json:"resourceKey,omitempty"`

	// ResourceName The resource name from which this resource was parsed.
	ResourceName *string `json:"resourceName,omitempty"`

	// TenantId The tenant ID of this resource.
	TenantId *string `json:"tenantId,omitempty"`

	// Version The assigned resource version.
	Version *int32 `json:"version,omitempty"`

	// VersionTag The version tag of this resource.
	VersionTag *string `json:"versionTag,omitempty"`
}

// SearchQueryPageRequest defines model for SearchQueryPageRequest.
type SearchQueryPageRequest struct {
	From         *int32                    `json:"from,omitempty"`
	Limit        *int32                    `json:"limit,omitempty"`
	SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
	SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
}

// SearchQueryPageResponse defines model for SearchQueryPageResponse.
type SearchQueryPageResponse struct {
	FirstSortValues *[]map[string]interface{} `json:"firstSortValues,omitempty"`
	LastSortValues  *[]map[string]interface{} `json:"lastSortValues,omitempty"`
	TotalItems      *int64                    `json:"totalItems,omitempty"`
}

// SearchQueryRequest defines model for SearchQueryRequest.
type SearchQueryRequest struct {
	Page *SearchQueryPageRequest   `json:"page,omitempty"`
	Sort *[]SearchQuerySortRequest `json:"sort,omitempty"`
}

// SearchQueryResponse defines model for SearchQueryResponse.
type SearchQueryResponse struct {
	Page *SearchQueryPageResponse `json:"page,omitempty"`
}

// SearchQuerySortRequest defines model for SearchQuerySortRequest.
type SearchQuerySortRequest struct {
	Field string  `json:"field"`
	Order *string `json:"order,omitempty"`
}

// SetVariableRequest defines model for SetVariableRequest.
type SetVariableRequest struct {
	// Local If set to true, the variables are merged strictly into the local scope (as specified by the `elementInstanceKey`).
	// Otherwise, the variables are propagated to upper scopes and set at the outermost one.
	//
	// Let’s consider the following example:
	//
	// There are two scopes '1' and '2'.
	// Scope '1' is the parent scope of '2'. The effective variables of the scopes are:
	// 1 => { "foo" : 2 }
	// 2 => { "bar" : 1 }
	//
	// An update request with elementInstanceKey as '2', variables { "foo" : 5 }, and local set
	// to true leaves scope '1' unchanged and adjusts scope '2' to { "bar" : 1, "foo" 5 }.
	//
	// By default, with local set to false, scope '1' will be { "foo": 5 }
	// and scope '2' will be { "bar" : 1 }.
	Local *bool `json:"local,omitempty"`

	// OperationReference A reference key chosen by the user that will be part of all records resulting from this operation. Must be > 0 if provided.
	OperationReference *int64 `json:"operationReference,omitempty"`

	// Variables JSON object representing the variables to set in the element’s scope.
	Variables map[string]interface{} `json:"variables"`
}

// SignalBroadcastRequest defines model for SignalBroadcastRequest.
type SignalBroadcastRequest struct {
	// SignalName The name of the signal to broadcast.
	SignalName string `json:"signalName"`

	// TenantId The ID of the tenant that owns the signal.
	TenantId *string `json:"tenantId,omitempty"`

	// Variables The signal variables as a JSON object.
	Variables *map[string]interface{} `json:"variables,omitempty"`
}

// SignalBroadcastResponse Base properties for SignalBroadcastResponse
type SignalBroadcastResponse = SignalBroadcastResponseBase

// SignalBroadcastResponseBase Base properties for SignalBroadcastResponse
type SignalBroadcastResponseBase struct {
	// TenantId The tenant ID of the signal that was broadcast.
	TenantId *string `json:"tenantId,omitempty"`
}

// SignalBroadcastResult Base properties for SignalBroadcastResponse
type SignalBroadcastResult = SignalBroadcastResponseBase

// TopologyResponse The response of a topology request.
type TopologyResponse struct {
	// Brokers A list of brokers that are part of this cluster.
	Brokers *[]BrokerInfo `json:"brokers"`

	// ClusterSize The number of brokers in the cluster.
	ClusterSize *int32 `json:"clusterSize"`

	// GatewayVersion The version of the Zeebe Gateway.
	GatewayVersion *string `json:"gatewayVersion"`

	// PartitionsCount The number of partitions are spread across the cluster.
	PartitionsCount *int32 `json:"partitionsCount"`

	// ReplicationFactor The configured replication factor for this cluster.
	ReplicationFactor *int32 `json:"replicationFactor"`
}

// UserTaskAssignmentRequest defines model for UserTaskAssignmentRequest.
type UserTaskAssignmentRequest struct {
	// Action A custom action value that will be accessible from user task events resulting from this endpoint invocation. If not provided, it will default to "assign".
	Action *string `json:"action"`

	// AllowOverride By default, the task is reassigned if it was already assigned. Set this to `false` to return an error in such cases. The task must then first be unassigned to be assigned again. Use this when you have users picking from group task queues to prevent race conditions.
	AllowOverride *bool `json:"allowOverride"`

	// Assignee The assignee for the user task. The assignee must not be empty or `null`.
	Assignee *string `json:"assignee,omitempty"`
}

// UserTaskCompletionRequest defines model for UserTaskCompletionRequest.
type UserTaskCompletionRequest struct {
	// Action A custom action value that will be accessible from user task events resulting from this endpoint invocation. If not provided, it will default to "complete".
	Action *string `json:"action"`

	// Variables The variables to complete the user task with.
	Variables *map[string]interface{} `json:"variables"`
}

// UserTaskFilter Base properties for ProcessInstanceFilterRequest
type UserTaskFilter = UserTaskFilterRequestBase

// UserTaskFilterRequest Base properties for ProcessInstanceFilterRequest
type UserTaskFilterRequest = UserTaskFilterRequestBase

// UserTaskFilterRequestBase Base properties for ProcessInstanceFilterRequest
type UserTaskFilterRequestBase struct {
	Assignee            *string `json:"assignee,omitempty"`
	CandidateGroup      *string `json:"candidateGroup,omitempty"`
	CandidateUser       *string `json:"candidateUser,omitempty"`
	ElementId           *string `json:"elementId,omitempty"`
	ProcessDefinitionId *string `json:"processDefinitionId,omitempty"`
	State               *string `json:"state,omitempty"`
	TenantIds           *string `json:"tenantIds,omitempty"`
}

// UserTaskItem Base properties for UserTaskItem
type UserTaskItem = UserTaskItemBase

// UserTaskItemBase Base properties for UserTaskItem
type UserTaskItemBase struct {
	Assignee              *string            `json:"assignee,omitempty"`
	CandidateGroup        *[]string          `json:"candidateGroup,omitempty"`
	CandidateUser         *[]string          `json:"candidateUser,omitempty"`
	CompletionDate        *time.Time         `json:"completionDate,omitempty"`
	CreationDate          *time.Time         `json:"creationDate,omitempty"`
	CustomHeaders         *map[string]string `json:"customHeaders,omitempty"`
	DueDate               *time.Time         `json:"dueDate,omitempty"`
	ElementId             *string            `json:"elementId,omitempty"`
	ExternalFormReference *string            `json:"externalFormReference,omitempty"`
	FollowUpDate          *time.Time         `json:"followUpDate,omitempty"`

	// Priority The priority of a user task. The higher the value the higher the priority.
	Priority                 *int    `json:"priority,omitempty"`
	ProcessDefinitionId      *string `json:"processDefinitionId,omitempty"`
	ProcessDefinitionVersion *int32  `json:"processDefinitionVersion,omitempty"`
	State                    *string `json:"state,omitempty"`
	TenantIds                *string `json:"tenantIds,omitempty"`
}

// UserTaskResult Base properties for UserTaskItem
type UserTaskResult = UserTaskItemBase

// UserTaskSearchQuery defines model for UserTaskSearchQuery.
type UserTaskSearchQuery = SearchQueryRequest

// UserTaskSearchQueryRequest defines model for UserTaskSearchQueryRequest.
type UserTaskSearchQueryRequest = SearchQueryRequest

// UserTaskSearchQueryResponse defines model for UserTaskSearchQueryResponse.
type UserTaskSearchQueryResponse = SearchQueryResponse

// UserTaskSearchQueryResult defines model for UserTaskSearchQueryResult.
type UserTaskSearchQueryResult = SearchQueryResponse

// UserTaskUpdateRequest defines model for UserTaskUpdateRequest.
type UserTaskUpdateRequest struct {
	// Action A custom action value that will be accessible from user task events resulting from this endpoint invocation. If not provided, it will default to "update".
	Action *string `json:"action"`

	// Changeset JSON object with changed task attribute values.
	//
	// The following attributes can be adjusted with this endpoint, additional attributes
	// will be ignored:
	//
	// * `candidateGroups` - reset by providing an empty list
	// * `candidateUsers` - reset by providing an empty list
	// * `dueDate` - reset by providing an empty String
	// * `followUpDate` - reset by providing an empty String
	// * `priority` - minimum 0, maximum 100, default 50
	//
	// Providing any of those attributes with a `null` value or omitting it preserves
	// the persisted attribute's value.
	//
	// The assignee cannot be adjusted with this endpoint, use the Assign task endpoint.
	// This ensures correct event emission for assignee changes.
	Changeset *Changeset `json:"changeset"`
}

// InternalServerError A Problem detail object as described in [RFC 9457](https://www.rfc-editor.org/rfc/rfc9457). There may be additional properties specific to the problem type.
type InternalServerError = ProblemDetail

// PostDeploymentsMultipartBody defines parameters for PostDeployments.
type PostDeploymentsMultipartBody struct {
	// Resources The binary data to create the deployment resources. It is possible to have more than one form part with different form part names for the binary data to create a deployment.
	Resources *[]openapi_types.File `json:"resources,omitempty"`

	// TenantId The tenant to deploy the resources to.
	TenantId *string `json:"tenantId,omitempty"`
}

// CreateDocumentMultipartBody defines parameters for CreateDocument.
type CreateDocumentMultipartBody struct {
	File openapi_types.File `json:"file"`

	// Metadata Information about the document.
	Metadata *DocumentMetadata `json:"metadata,omitempty"`
}

// CreateDocumentParams defines parameters for CreateDocument.
type CreateDocumentParams struct {
	// StoreId The ID of the document store to upload the documents to. Currently, only a single document store is supported per cluster. However, this attribute is included to allow for potential future support of multiple document stores.
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`

	// DocumentId The ID of the document to upload. If not provided, a new ID will be generated. Specifying an existing ID will result in an error if the document already exists.
	DocumentId *string `form:"documentId,omitempty" json:"documentId,omitempty"`
}

// CreateDocumentsMultipartBody defines parameters for CreateDocuments.
type CreateDocumentsMultipartBody struct {
	// Files The documents to upload.
	Files []openapi_types.File `json:"files"`
}

// CreateDocumentsParams defines parameters for CreateDocuments.
type CreateDocumentsParams struct {
	// StoreId The ID of the document store to upload the documents to. Currently, only a single document store is supported per cluster. However, this attribute is included to allow for potential future support of multiple document stores.
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`
}

// DeleteDocumentParams defines parameters for DeleteDocument.
type DeleteDocumentParams struct {
	// StoreId The ID of the document store to delete the document from.
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`
}

// GetDocumentParams defines parameters for GetDocument.
type GetDocumentParams struct {
	// StoreId The ID of the document store to download the document from.
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`

	// ContentHash The hash of the document content that was computed by the document store during upload. The hash is part of the document reference that is returned when uploading a document. If the client fails to provide the correct hash, the request will be rejected.
	ContentHash *string `form:"contentHash,omitempty" json:"contentHash,omitempty"`
}

// CreateDocumentLinkParams defines parameters for CreateDocumentLink.
type CreateDocumentLinkParams struct {
	// StoreId The ID of the document store to link the document from.
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`

	// ContentHash The hash of the document content that was computed by the document store during upload. The hash is part of the document reference that is returned when uploading a document. If the client fails to provide the correct hash, the request will be rejected.
	ContentHash *string `form:"contentHash,omitempty" json:"contentHash,omitempty"`
}

// PutClockJSONRequestBody defines body for PutClock for application/json ContentType.
type PutClockJSONRequestBody = ClockPinRequest

// PostDecisionDefinitionsEvaluationJSONRequestBody defines body for PostDecisionDefinitionsEvaluation for application/json ContentType.
type PostDecisionDefinitionsEvaluationJSONRequestBody = DecisionEvaluationInstruction

// PostDecisionDefinitionsEvaluationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody defines body for PostDecisionDefinitionsEvaluation for application/vnd.camunda.api.keys.number+json ContentType.
type PostDecisionDefinitionsEvaluationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody = EvaluateDecisionRequest

// PostDecisionDefinitionsEvaluationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody defines body for PostDecisionDefinitionsEvaluation for application/vnd.camunda.api.keys.string+json ContentType.
type PostDecisionDefinitionsEvaluationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody = DecisionEvaluationInstruction

// PostDecisionDefinitionsSearchJSONRequestBody defines body for PostDecisionDefinitionsSearch for application/json ContentType.
type PostDecisionDefinitionsSearchJSONRequestBody = DecisionDefinitionSearchQuery

// PostDecisionDefinitionsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody defines body for PostDecisionDefinitionsSearch for application/vnd.camunda.api.keys.number+json ContentType.
type PostDecisionDefinitionsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody = DecisionDefinitionSearchQueryRequest

// PostDecisionDefinitionsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody defines body for PostDecisionDefinitionsSearch for application/vnd.camunda.api.keys.string+json ContentType.
type PostDecisionDefinitionsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody = DecisionDefinitionSearchQuery

// PostDecisionInstancesSearchJSONRequestBody defines body for PostDecisionInstancesSearch for application/json ContentType.
type PostDecisionInstancesSearchJSONRequestBody = DecisionInstanceSearchQuery

// PostDecisionInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody defines body for PostDecisionInstancesSearch for application/vnd.camunda.api.keys.number+json ContentType.
type PostDecisionInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody = DecisionInstanceSearchQueryRequest

// PostDecisionInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody defines body for PostDecisionInstancesSearch for application/vnd.camunda.api.keys.string+json ContentType.
type PostDecisionInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody = DecisionInstanceSearchQuery

// PostDecisionRequirementsSearchJSONRequestBody defines body for PostDecisionRequirementsSearch for application/json ContentType.
type PostDecisionRequirementsSearchJSONRequestBody = DecisionRequirementsSearchQuery

// PostDecisionRequirementsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody defines body for PostDecisionRequirementsSearch for application/vnd.camunda.api.keys.number+json ContentType.
type PostDecisionRequirementsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody = DecisionRequirementsSearchQueryRequest

// PostDecisionRequirementsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody defines body for PostDecisionRequirementsSearch for application/vnd.camunda.api.keys.string+json ContentType.
type PostDecisionRequirementsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody = DecisionRequirementsSearchQuery

// PostDeploymentsMultipartRequestBody defines body for PostDeployments for multipart/form-data ContentType.
type PostDeploymentsMultipartRequestBody PostDeploymentsMultipartBody

// CreateDocumentMultipartRequestBody defines body for CreateDocument for multipart/form-data ContentType.
type CreateDocumentMultipartRequestBody CreateDocumentMultipartBody

// CreateDocumentsMultipartRequestBody defines body for CreateDocuments for multipart/form-data ContentType.
type CreateDocumentsMultipartRequestBody CreateDocumentsMultipartBody

// CreateDocumentLinkJSONRequestBody defines body for CreateDocumentLink for application/json ContentType.
type CreateDocumentLinkJSONRequestBody = DocumentLinkRequest

// PutElementInstancesElementInstanceKeyVariablesJSONRequestBody defines body for PutElementInstancesElementInstanceKeyVariables for application/json ContentType.
type PutElementInstancesElementInstanceKeyVariablesJSONRequestBody = SetVariableRequest

// PostFlownodeInstancesSearchJSONRequestBody defines body for PostFlownodeInstancesSearch for application/json ContentType.
type PostFlownodeInstancesSearchJSONRequestBody = FlowNodeInstanceSearchQuery

// PostFlownodeInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody defines body for PostFlownodeInstancesSearch for application/vnd.camunda.api.keys.number+json ContentType.
type PostFlownodeInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody = FlowNodeInstanceSearchQueryRequest

// PostFlownodeInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody defines body for PostFlownodeInstancesSearch for application/vnd.camunda.api.keys.string+json ContentType.
type PostFlownodeInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody = FlowNodeInstanceSearchQuery

// PostIncidentsSearchJSONRequestBody defines body for PostIncidentsSearch for application/json ContentType.
type PostIncidentsSearchJSONRequestBody = IncidentSearchQuery

// PostIncidentsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody defines body for PostIncidentsSearch for application/vnd.camunda.api.keys.number+json ContentType.
type PostIncidentsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody = IncidentSearchQueryRequest

// PostIncidentsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody defines body for PostIncidentsSearch for application/vnd.camunda.api.keys.string+json ContentType.
type PostIncidentsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody = IncidentSearchQuery

// PostJobsActivationJSONRequestBody defines body for PostJobsActivation for application/json ContentType.
type PostJobsActivationJSONRequestBody = JobActivationRequest

// PatchJobsJobKeyJSONRequestBody defines body for PatchJobsJobKey for application/json ContentType.
type PatchJobsJobKeyJSONRequestBody = JobUpdateRequest

// PostJobsJobKeyCompletionJSONRequestBody defines body for PostJobsJobKeyCompletion for application/json ContentType.
type PostJobsJobKeyCompletionJSONRequestBody = JobCompletionRequest

// ThrowJobErrorJSONRequestBody defines body for ThrowJobError for application/json ContentType.
type ThrowJobErrorJSONRequestBody = JobErrorRequest

// PostJobsJobKeyFailureJSONRequestBody defines body for PostJobsJobKeyFailure for application/json ContentType.
type PostJobsJobKeyFailureJSONRequestBody = JobFailRequest

// PostMessagesCorrelationJSONRequestBody defines body for PostMessagesCorrelation for application/json ContentType.
type PostMessagesCorrelationJSONRequestBody = MessageCorrelationRequest

// PostMessagesPublicationJSONRequestBody defines body for PostMessagesPublication for application/json ContentType.
type PostMessagesPublicationJSONRequestBody = MessagePublicationRequest

// PostProcessInstancesJSONRequestBody defines body for PostProcessInstances for application/json ContentType.
type PostProcessInstancesJSONRequestBody = ProcessInstanceCreationInstruction

// PostProcessInstancesApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody defines body for PostProcessInstances for application/vnd.camunda.api.keys.number+json ContentType.
type PostProcessInstancesApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody = CreateProcessInstanceRequest

// PostProcessInstancesApplicationVndCamundaAPIKeysStringPlusJSONRequestBody defines body for PostProcessInstances for application/vnd.camunda.api.keys.string+json ContentType.
type PostProcessInstancesApplicationVndCamundaAPIKeysStringPlusJSONRequestBody = ProcessInstanceCreationInstruction

// PostProcessInstancesSearchJSONRequestBody defines body for PostProcessInstancesSearch for application/json ContentType.
type PostProcessInstancesSearchJSONRequestBody = ProcessInstanceSearchQuery

// PostProcessInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody defines body for PostProcessInstancesSearch for application/vnd.camunda.api.keys.number+json ContentType.
type PostProcessInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody = ProcessInstanceSearchQueryRequest

// PostProcessInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody defines body for PostProcessInstancesSearch for application/vnd.camunda.api.keys.string+json ContentType.
type PostProcessInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody = ProcessInstanceSearchQuery

// PostProcessInstancesProcessInstanceKeyCancellationJSONRequestBody defines body for PostProcessInstancesProcessInstanceKeyCancellation for application/json ContentType.
type PostProcessInstancesProcessInstanceKeyCancellationJSONRequestBody = CancelProcessInstanceRequest

// PostProcessInstancesProcessInstanceKeyMigrationJSONRequestBody defines body for PostProcessInstancesProcessInstanceKeyMigration for application/json ContentType.
type PostProcessInstancesProcessInstanceKeyMigrationJSONRequestBody = ProcessInstanceMigrationInstruction

// PostProcessInstancesProcessInstanceKeyMigrationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody defines body for PostProcessInstancesProcessInstanceKeyMigration for application/vnd.camunda.api.keys.number+json ContentType.
type PostProcessInstancesProcessInstanceKeyMigrationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody = MigrateProcessInstanceRequest

// PostProcessInstancesProcessInstanceKeyMigrationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody defines body for PostProcessInstancesProcessInstanceKeyMigration for application/vnd.camunda.api.keys.string+json ContentType.
type PostProcessInstancesProcessInstanceKeyMigrationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody = ProcessInstanceMigrationInstruction

// PostProcessInstancesProcessInstanceKeyModificationJSONRequestBody defines body for PostProcessInstancesProcessInstanceKeyModification for application/json ContentType.
type PostProcessInstancesProcessInstanceKeyModificationJSONRequestBody = ProcessInstanceModificationInstruction

// PostProcessInstancesProcessInstanceKeyModificationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody defines body for PostProcessInstancesProcessInstanceKeyModification for application/vnd.camunda.api.keys.number+json ContentType.
type PostProcessInstancesProcessInstanceKeyModificationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody = ModifyProcessInstanceRequest

// PostProcessInstancesProcessInstanceKeyModificationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody defines body for PostProcessInstancesProcessInstanceKeyModification for application/vnd.camunda.api.keys.string+json ContentType.
type PostProcessInstancesProcessInstanceKeyModificationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody = ProcessInstanceModificationInstruction

// PostResourcesResourceKeyDeletionJSONRequestBody defines body for PostResourcesResourceKeyDeletion for application/json ContentType.
type PostResourcesResourceKeyDeletionJSONRequestBody = DeleteResourceRequest

// PostSignalsBroadcastJSONRequestBody defines body for PostSignalsBroadcast for application/json ContentType.
type PostSignalsBroadcastJSONRequestBody = SignalBroadcastRequest

// PostUserTasksSearchJSONRequestBody defines body for PostUserTasksSearch for application/json ContentType.
type PostUserTasksSearchJSONRequestBody = UserTaskSearchQuery

// PostUserTasksSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody defines body for PostUserTasksSearch for application/vnd.camunda.api.keys.number+json ContentType.
type PostUserTasksSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody = UserTaskSearchQueryRequest

// PostUserTasksSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody defines body for PostUserTasksSearch for application/vnd.camunda.api.keys.string+json ContentType.
type PostUserTasksSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody = UserTaskSearchQuery

// PatchUserTasksUserTaskKeyJSONRequestBody defines body for PatchUserTasksUserTaskKey for application/json ContentType.
type PatchUserTasksUserTaskKeyJSONRequestBody = UserTaskUpdateRequest

// PostUserTasksUserTaskKeyAssignmentJSONRequestBody defines body for PostUserTasksUserTaskKeyAssignment for application/json ContentType.
type PostUserTasksUserTaskKeyAssignmentJSONRequestBody = UserTaskAssignmentRequest

// PostUserTasksUserTaskKeyCompletionJSONRequestBody defines body for PostUserTasksUserTaskKeyCompletion for application/json ContentType.
type PostUserTasksUserTaskKeyCompletionJSONRequestBody = UserTaskCompletionRequest

// Getter for additional properties for Changeset. Returns the specified
// element and whether it was found
func (a Changeset) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Changeset
func (a *Changeset) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Changeset to handle AdditionalProperties
func (a *Changeset) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["candidateGroups"]; found {
		err = json.Unmarshal(raw, &a.CandidateGroups)
		if err != nil {
			return fmt.Errorf("error reading 'candidateGroups': %w", err)
		}
		delete(object, "candidateGroups")
	}

	if raw, found := object["candidateUsers"]; found {
		err = json.Unmarshal(raw, &a.CandidateUsers)
		if err != nil {
			return fmt.Errorf("error reading 'candidateUsers': %w", err)
		}
		delete(object, "candidateUsers")
	}

	if raw, found := object["dueDate"]; found {
		err = json.Unmarshal(raw, &a.DueDate)
		if err != nil {
			return fmt.Errorf("error reading 'dueDate': %w", err)
		}
		delete(object, "dueDate")
	}

	if raw, found := object["followUpDate"]; found {
		err = json.Unmarshal(raw, &a.FollowUpDate)
		if err != nil {
			return fmt.Errorf("error reading 'followUpDate': %w", err)
		}
		delete(object, "followUpDate")
	}

	if raw, found := object["priority"]; found {
		err = json.Unmarshal(raw, &a.Priority)
		if err != nil {
			return fmt.Errorf("error reading 'priority': %w", err)
		}
		delete(object, "priority")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Changeset to handle AdditionalProperties
func (a Changeset) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CandidateGroups != nil {
		object["candidateGroups"], err = json.Marshal(a.CandidateGroups)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'candidateGroups': %w", err)
		}
	}

	if a.CandidateUsers != nil {
		object["candidateUsers"], err = json.Marshal(a.CandidateUsers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'candidateUsers': %w", err)
		}
	}

	if a.DueDate != nil {
		object["dueDate"], err = json.Marshal(a.DueDate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dueDate': %w", err)
		}
	}

	if a.FollowUpDate != nil {
		object["followUpDate"], err = json.Marshal(a.FollowUpDate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'followUpDate': %w", err)
		}
	}

	if a.Priority != nil {
		object["priority"], err = json.Marshal(a.Priority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priority': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PutClockWithBody request with any body
	PutClockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutClock(ctx context.Context, body PutClockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClockReset request
	PostClockReset(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDecisionDefinitionsEvaluationWithBody request with any body
	PostDecisionDefinitionsEvaluationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDecisionDefinitionsEvaluation(ctx context.Context, body PostDecisionDefinitionsEvaluationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDecisionDefinitionsEvaluationWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostDecisionDefinitionsEvaluationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDecisionDefinitionsEvaluationWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostDecisionDefinitionsEvaluationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDecisionDefinitionsSearchWithBody request with any body
	PostDecisionDefinitionsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDecisionDefinitionsSearch(ctx context.Context, body PostDecisionDefinitionsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDecisionDefinitionsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostDecisionDefinitionsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDecisionDefinitionsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostDecisionDefinitionsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDecisionDefinitionsDecisionDefinitionKeyXml request
	GetDecisionDefinitionsDecisionDefinitionKeyXml(ctx context.Context, decisionDefinitionKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDecisionInstancesSearchWithBody request with any body
	PostDecisionInstancesSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDecisionInstancesSearch(ctx context.Context, body PostDecisionInstancesSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDecisionInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostDecisionInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDecisionInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostDecisionInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDecisionRequirementsSearchWithBody request with any body
	PostDecisionRequirementsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDecisionRequirementsSearch(ctx context.Context, body PostDecisionRequirementsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDecisionRequirementsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostDecisionRequirementsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDecisionRequirementsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostDecisionRequirementsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeploymentsWithBody request with any body
	PostDeploymentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDocumentWithBody request with any body
	CreateDocumentWithBody(ctx context.Context, params *CreateDocumentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDocumentsWithBody request with any body
	CreateDocumentsWithBody(ctx context.Context, params *CreateDocumentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDocument request
	DeleteDocument(ctx context.Context, documentId string, params *DeleteDocumentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDocument request
	GetDocument(ctx context.Context, documentId string, params *GetDocumentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDocumentLinkWithBody request with any body
	CreateDocumentLinkWithBody(ctx context.Context, documentId string, params *CreateDocumentLinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDocumentLink(ctx context.Context, documentId string, params *CreateDocumentLinkParams, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutElementInstancesElementInstanceKeyVariablesWithBody request with any body
	PutElementInstancesElementInstanceKeyVariablesWithBody(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutElementInstancesElementInstanceKeyVariables(ctx context.Context, elementInstanceKey string, body PutElementInstancesElementInstanceKeyVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFlownodeInstancesSearchWithBody request with any body
	PostFlownodeInstancesSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFlownodeInstancesSearch(ctx context.Context, body PostFlownodeInstancesSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFlownodeInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostFlownodeInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFlownodeInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostFlownodeInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIncidentsSearchWithBody request with any body
	PostIncidentsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIncidentsSearch(ctx context.Context, body PostIncidentsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIncidentsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostIncidentsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIncidentsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostIncidentsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentsIncidentKey request
	GetIncidentsIncidentKey(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIncidentsIncidentKeyResolution request
	PostIncidentsIncidentKeyResolution(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJobsActivationWithBody request with any body
	PostJobsActivationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJobsActivation(ctx context.Context, body PostJobsActivationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchJobsJobKeyWithBody request with any body
	PatchJobsJobKeyWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchJobsJobKey(ctx context.Context, jobKey string, body PatchJobsJobKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJobsJobKeyCompletionWithBody request with any body
	PostJobsJobKeyCompletionWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJobsJobKeyCompletion(ctx context.Context, jobKey string, body PostJobsJobKeyCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ThrowJobErrorWithBody request with any body
	ThrowJobErrorWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ThrowJobError(ctx context.Context, jobKey string, body ThrowJobErrorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJobsJobKeyFailureWithBody request with any body
	PostJobsJobKeyFailureWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJobsJobKeyFailure(ctx context.Context, jobKey string, body PostJobsJobKeyFailureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLicense request
	GetLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMessagesCorrelationWithBody request with any body
	PostMessagesCorrelationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMessagesCorrelation(ctx context.Context, body PostMessagesCorrelationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMessagesPublicationWithBody request with any body
	PostMessagesPublicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMessagesPublication(ctx context.Context, body PostMessagesPublicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProcessInstancesWithBody request with any body
	PostProcessInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProcessInstances(ctx context.Context, body PostProcessInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProcessInstancesWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostProcessInstancesApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProcessInstancesWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostProcessInstancesApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProcessInstancesSearchWithBody request with any body
	PostProcessInstancesSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProcessInstancesSearch(ctx context.Context, body PostProcessInstancesSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProcessInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostProcessInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProcessInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostProcessInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProcessInstancesProcessInstanceKeyCancellationWithBody request with any body
	PostProcessInstancesProcessInstanceKeyCancellationWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProcessInstancesProcessInstanceKeyCancellation(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyCancellationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProcessInstancesProcessInstanceKeyMigrationWithBody request with any body
	PostProcessInstancesProcessInstanceKeyMigrationWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProcessInstancesProcessInstanceKeyMigration(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProcessInstancesProcessInstanceKeyMigrationWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProcessInstancesProcessInstanceKeyMigrationWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProcessInstancesProcessInstanceKeyModificationWithBody request with any body
	PostProcessInstancesProcessInstanceKeyModificationWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProcessInstancesProcessInstanceKeyModification(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProcessInstancesProcessInstanceKeyModificationWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProcessInstancesProcessInstanceKeyModificationWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourcesResourceKey request
	GetResourcesResourceKey(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourcesResourceKeyContent request
	GetResourcesResourceKeyContent(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostResourcesResourceKeyDeletionWithBody request with any body
	PostResourcesResourceKeyDeletionWithBody(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostResourcesResourceKeyDeletion(ctx context.Context, resourceKey string, body PostResourcesResourceKeyDeletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSignalsBroadcastWithBody request with any body
	PostSignalsBroadcastWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSignalsBroadcast(ctx context.Context, body PostSignalsBroadcastJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTopology request
	GetTopology(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserTasksSearchWithBody request with any body
	PostUserTasksSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserTasksSearch(ctx context.Context, body PostUserTasksSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserTasksSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostUserTasksSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserTasksSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostUserTasksSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUserTasksUserTaskKeyWithBody request with any body
	PatchUserTasksUserTaskKeyWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUserTasksUserTaskKey(ctx context.Context, userTaskKey string, body PatchUserTasksUserTaskKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserTasksUserTaskKeyAssignee request
	DeleteUserTasksUserTaskKeyAssignee(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserTasksUserTaskKeyAssignmentWithBody request with any body
	PostUserTasksUserTaskKeyAssignmentWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserTasksUserTaskKeyAssignment(ctx context.Context, userTaskKey string, body PostUserTasksUserTaskKeyAssignmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserTasksUserTaskKeyCompletionWithBody request with any body
	PostUserTasksUserTaskKeyCompletionWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserTasksUserTaskKeyCompletion(ctx context.Context, userTaskKey string, body PostUserTasksUserTaskKeyCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PutClockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClockRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClock(ctx context.Context, body PutClockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClockRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClockReset(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClockResetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionDefinitionsEvaluationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionDefinitionsEvaluationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionDefinitionsEvaluation(ctx context.Context, body PostDecisionDefinitionsEvaluationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionDefinitionsEvaluationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionDefinitionsEvaluationWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostDecisionDefinitionsEvaluationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionDefinitionsEvaluationRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionDefinitionsEvaluationWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostDecisionDefinitionsEvaluationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionDefinitionsEvaluationRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionDefinitionsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionDefinitionsSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionDefinitionsSearch(ctx context.Context, body PostDecisionDefinitionsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionDefinitionsSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionDefinitionsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostDecisionDefinitionsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionDefinitionsSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionDefinitionsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostDecisionDefinitionsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionDefinitionsSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDecisionDefinitionsDecisionDefinitionKeyXml(ctx context.Context, decisionDefinitionKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDecisionDefinitionsDecisionDefinitionKeyXmlRequest(c.Server, decisionDefinitionKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionInstancesSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionInstancesSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionInstancesSearch(ctx context.Context, body PostDecisionInstancesSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionInstancesSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostDecisionInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionInstancesSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostDecisionInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionInstancesSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionRequirementsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionRequirementsSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionRequirementsSearch(ctx context.Context, body PostDecisionRequirementsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionRequirementsSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionRequirementsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostDecisionRequirementsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionRequirementsSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDecisionRequirementsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostDecisionRequirementsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDecisionRequirementsSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeploymentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeploymentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDocumentWithBody(ctx context.Context, params *CreateDocumentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDocumentRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDocumentsWithBody(ctx context.Context, params *CreateDocumentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDocumentsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDocument(ctx context.Context, documentId string, params *DeleteDocumentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDocumentRequest(c.Server, documentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDocument(ctx context.Context, documentId string, params *GetDocumentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDocumentRequest(c.Server, documentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDocumentLinkWithBody(ctx context.Context, documentId string, params *CreateDocumentLinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDocumentLinkRequestWithBody(c.Server, documentId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDocumentLink(ctx context.Context, documentId string, params *CreateDocumentLinkParams, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDocumentLinkRequest(c.Server, documentId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutElementInstancesElementInstanceKeyVariablesWithBody(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutElementInstancesElementInstanceKeyVariablesRequestWithBody(c.Server, elementInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutElementInstancesElementInstanceKeyVariables(ctx context.Context, elementInstanceKey string, body PutElementInstancesElementInstanceKeyVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutElementInstancesElementInstanceKeyVariablesRequest(c.Server, elementInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlownodeInstancesSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlownodeInstancesSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlownodeInstancesSearch(ctx context.Context, body PostFlownodeInstancesSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlownodeInstancesSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlownodeInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostFlownodeInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlownodeInstancesSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlownodeInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostFlownodeInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlownodeInstancesSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIncidentsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIncidentsSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIncidentsSearch(ctx context.Context, body PostIncidentsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIncidentsSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIncidentsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostIncidentsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIncidentsSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIncidentsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostIncidentsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIncidentsSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentsIncidentKey(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentsIncidentKeyRequest(c.Server, incidentKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIncidentsIncidentKeyResolution(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIncidentsIncidentKeyResolutionRequest(c.Server, incidentKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobsActivationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobsActivationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobsActivation(ctx context.Context, body PostJobsActivationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobsActivationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchJobsJobKeyWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchJobsJobKeyRequestWithBody(c.Server, jobKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchJobsJobKey(ctx context.Context, jobKey string, body PatchJobsJobKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchJobsJobKeyRequest(c.Server, jobKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobsJobKeyCompletionWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobsJobKeyCompletionRequestWithBody(c.Server, jobKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobsJobKeyCompletion(ctx context.Context, jobKey string, body PostJobsJobKeyCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobsJobKeyCompletionRequest(c.Server, jobKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThrowJobErrorWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThrowJobErrorRequestWithBody(c.Server, jobKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ThrowJobError(ctx context.Context, jobKey string, body ThrowJobErrorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewThrowJobErrorRequest(c.Server, jobKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobsJobKeyFailureWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobsJobKeyFailureRequestWithBody(c.Server, jobKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobsJobKeyFailure(ctx context.Context, jobKey string, body PostJobsJobKeyFailureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobsJobKeyFailureRequest(c.Server, jobKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLicenseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessagesCorrelationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessagesCorrelationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessagesCorrelation(ctx context.Context, body PostMessagesCorrelationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessagesCorrelationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessagesPublicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessagesPublicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessagesPublication(ctx context.Context, body PostMessagesPublicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessagesPublicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstances(ctx context.Context, body PostProcessInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostProcessInstancesApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostProcessInstancesApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesSearch(ctx context.Context, body PostProcessInstancesSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostProcessInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostProcessInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesProcessInstanceKeyCancellationWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesProcessInstanceKeyCancellationRequestWithBody(c.Server, processInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesProcessInstanceKeyCancellation(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyCancellationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesProcessInstanceKeyCancellationRequest(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesProcessInstanceKeyMigrationWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesProcessInstanceKeyMigrationRequestWithBody(c.Server, processInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesProcessInstanceKeyMigration(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesProcessInstanceKeyMigrationRequest(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesProcessInstanceKeyMigrationWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesProcessInstanceKeyMigrationRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesProcessInstanceKeyMigrationWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesProcessInstanceKeyMigrationRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesProcessInstanceKeyModificationWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesProcessInstanceKeyModificationRequestWithBody(c.Server, processInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesProcessInstanceKeyModification(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesProcessInstanceKeyModificationRequest(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesProcessInstanceKeyModificationWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesProcessInstanceKeyModificationRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessInstancesProcessInstanceKeyModificationWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessInstancesProcessInstanceKeyModificationRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourcesResourceKey(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourcesResourceKeyRequest(c.Server, resourceKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourcesResourceKeyContent(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourcesResourceKeyContentRequest(c.Server, resourceKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesResourceKeyDeletionWithBody(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesResourceKeyDeletionRequestWithBody(c.Server, resourceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesResourceKeyDeletion(ctx context.Context, resourceKey string, body PostResourcesResourceKeyDeletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesResourceKeyDeletionRequest(c.Server, resourceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSignalsBroadcastWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSignalsBroadcastRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSignalsBroadcast(ctx context.Context, body PostSignalsBroadcastJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSignalsBroadcastRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTopology(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTopologyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserTasksSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserTasksSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserTasksSearch(ctx context.Context, body PostUserTasksSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserTasksSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserTasksSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx context.Context, body PostUserTasksSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserTasksSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserTasksSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx context.Context, body PostUserTasksSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserTasksSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserTasksUserTaskKeyWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserTasksUserTaskKeyRequestWithBody(c.Server, userTaskKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserTasksUserTaskKey(ctx context.Context, userTaskKey string, body PatchUserTasksUserTaskKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserTasksUserTaskKeyRequest(c.Server, userTaskKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserTasksUserTaskKeyAssignee(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserTasksUserTaskKeyAssigneeRequest(c.Server, userTaskKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserTasksUserTaskKeyAssignmentWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserTasksUserTaskKeyAssignmentRequestWithBody(c.Server, userTaskKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserTasksUserTaskKeyAssignment(ctx context.Context, userTaskKey string, body PostUserTasksUserTaskKeyAssignmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserTasksUserTaskKeyAssignmentRequest(c.Server, userTaskKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserTasksUserTaskKeyCompletionWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserTasksUserTaskKeyCompletionRequestWithBody(c.Server, userTaskKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserTasksUserTaskKeyCompletion(ctx context.Context, userTaskKey string, body PostUserTasksUserTaskKeyCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserTasksUserTaskKeyCompletionRequest(c.Server, userTaskKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPutClockRequest calls the generic PutClock builder with application/json body
func NewPutClockRequest(server string, body PutClockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutClockRequestWithBody(server, "application/json", bodyReader)
}

// NewPutClockRequestWithBody generates requests for PutClock with any type of body
func NewPutClockRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostClockResetRequest generates requests for PostClockReset
func NewPostClockResetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clock/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDecisionDefinitionsEvaluationRequest calls the generic PostDecisionDefinitionsEvaluation builder with application/json body
func NewPostDecisionDefinitionsEvaluationRequest(server string, body PostDecisionDefinitionsEvaluationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDecisionDefinitionsEvaluationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDecisionDefinitionsEvaluationRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody calls the generic PostDecisionDefinitionsEvaluation builder with application/vnd.camunda.api.keys.number+json body
func NewPostDecisionDefinitionsEvaluationRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(server string, body PostDecisionDefinitionsEvaluationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDecisionDefinitionsEvaluationRequestWithBody(server, "application/vnd.camunda.api.keys.number+json", bodyReader)
}

// NewPostDecisionDefinitionsEvaluationRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody calls the generic PostDecisionDefinitionsEvaluation builder with application/vnd.camunda.api.keys.string+json body
func NewPostDecisionDefinitionsEvaluationRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(server string, body PostDecisionDefinitionsEvaluationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDecisionDefinitionsEvaluationRequestWithBody(server, "application/vnd.camunda.api.keys.string+json", bodyReader)
}

// NewPostDecisionDefinitionsEvaluationRequestWithBody generates requests for PostDecisionDefinitionsEvaluation with any type of body
func NewPostDecisionDefinitionsEvaluationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-definitions/evaluation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDecisionDefinitionsSearchRequest calls the generic PostDecisionDefinitionsSearch builder with application/json body
func NewPostDecisionDefinitionsSearchRequest(server string, body PostDecisionDefinitionsSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDecisionDefinitionsSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDecisionDefinitionsSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody calls the generic PostDecisionDefinitionsSearch builder with application/vnd.camunda.api.keys.number+json body
func NewPostDecisionDefinitionsSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(server string, body PostDecisionDefinitionsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDecisionDefinitionsSearchRequestWithBody(server, "application/vnd.camunda.api.keys.number+json", bodyReader)
}

// NewPostDecisionDefinitionsSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody calls the generic PostDecisionDefinitionsSearch builder with application/vnd.camunda.api.keys.string+json body
func NewPostDecisionDefinitionsSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(server string, body PostDecisionDefinitionsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDecisionDefinitionsSearchRequestWithBody(server, "application/vnd.camunda.api.keys.string+json", bodyReader)
}

// NewPostDecisionDefinitionsSearchRequestWithBody generates requests for PostDecisionDefinitionsSearch with any type of body
func NewPostDecisionDefinitionsSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-definitions/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDecisionDefinitionsDecisionDefinitionKeyXmlRequest generates requests for GetDecisionDefinitionsDecisionDefinitionKeyXml
func NewGetDecisionDefinitionsDecisionDefinitionKeyXmlRequest(server string, decisionDefinitionKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "decisionDefinitionKey", runtime.ParamLocationPath, decisionDefinitionKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-definitions/%s/xml", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDecisionInstancesSearchRequest calls the generic PostDecisionInstancesSearch builder with application/json body
func NewPostDecisionInstancesSearchRequest(server string, body PostDecisionInstancesSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDecisionInstancesSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDecisionInstancesSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody calls the generic PostDecisionInstancesSearch builder with application/vnd.camunda.api.keys.number+json body
func NewPostDecisionInstancesSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(server string, body PostDecisionInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDecisionInstancesSearchRequestWithBody(server, "application/vnd.camunda.api.keys.number+json", bodyReader)
}

// NewPostDecisionInstancesSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody calls the generic PostDecisionInstancesSearch builder with application/vnd.camunda.api.keys.string+json body
func NewPostDecisionInstancesSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(server string, body PostDecisionInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDecisionInstancesSearchRequestWithBody(server, "application/vnd.camunda.api.keys.string+json", bodyReader)
}

// NewPostDecisionInstancesSearchRequestWithBody generates requests for PostDecisionInstancesSearch with any type of body
func NewPostDecisionInstancesSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDecisionRequirementsSearchRequest calls the generic PostDecisionRequirementsSearch builder with application/json body
func NewPostDecisionRequirementsSearchRequest(server string, body PostDecisionRequirementsSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDecisionRequirementsSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDecisionRequirementsSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody calls the generic PostDecisionRequirementsSearch builder with application/vnd.camunda.api.keys.number+json body
func NewPostDecisionRequirementsSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(server string, body PostDecisionRequirementsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDecisionRequirementsSearchRequestWithBody(server, "application/vnd.camunda.api.keys.number+json", bodyReader)
}

// NewPostDecisionRequirementsSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody calls the generic PostDecisionRequirementsSearch builder with application/vnd.camunda.api.keys.string+json body
func NewPostDecisionRequirementsSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(server string, body PostDecisionRequirementsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDecisionRequirementsSearchRequestWithBody(server, "application/vnd.camunda.api.keys.string+json", bodyReader)
}

// NewPostDecisionRequirementsSearchRequestWithBody generates requests for PostDecisionRequirementsSearch with any type of body
func NewPostDecisionRequirementsSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-requirements/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDeploymentsRequestWithBody generates requests for PostDeployments with any type of body
func NewPostDeploymentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDocumentRequestWithBody generates requests for CreateDocument with any type of body
func NewCreateDocumentRequestWithBody(server string, params *CreateDocumentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DocumentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "documentId", runtime.ParamLocationQuery, *params.DocumentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDocumentsRequestWithBody generates requests for CreateDocuments with any type of body
func NewCreateDocumentsRequestWithBody(server string, params *CreateDocumentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDocumentRequest generates requests for DeleteDocument
func NewDeleteDocumentRequest(server string, documentId string, params *DeleteDocumentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "documentId", runtime.ParamLocationPath, documentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDocumentRequest generates requests for GetDocument
func NewGetDocumentRequest(server string, documentId string, params *GetDocumentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "documentId", runtime.ParamLocationPath, documentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContentHash != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contentHash", runtime.ParamLocationQuery, *params.ContentHash); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDocumentLinkRequest calls the generic CreateDocumentLink builder with application/json body
func NewCreateDocumentLinkRequest(server string, documentId string, params *CreateDocumentLinkParams, body CreateDocumentLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDocumentLinkRequestWithBody(server, documentId, params, "application/json", bodyReader)
}

// NewCreateDocumentLinkRequestWithBody generates requests for CreateDocumentLink with any type of body
func NewCreateDocumentLinkRequestWithBody(server string, documentId string, params *CreateDocumentLinkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "documentId", runtime.ParamLocationPath, documentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/%s/links", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContentHash != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contentHash", runtime.ParamLocationQuery, *params.ContentHash); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutElementInstancesElementInstanceKeyVariablesRequest calls the generic PutElementInstancesElementInstanceKeyVariables builder with application/json body
func NewPutElementInstancesElementInstanceKeyVariablesRequest(server string, elementInstanceKey string, body PutElementInstancesElementInstanceKeyVariablesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutElementInstancesElementInstanceKeyVariablesRequestWithBody(server, elementInstanceKey, "application/json", bodyReader)
}

// NewPutElementInstancesElementInstanceKeyVariablesRequestWithBody generates requests for PutElementInstancesElementInstanceKeyVariables with any type of body
func NewPutElementInstancesElementInstanceKeyVariablesRequestWithBody(server string, elementInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elementInstanceKey", runtime.ParamLocationPath, elementInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/element-instances/%s/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostFlownodeInstancesSearchRequest calls the generic PostFlownodeInstancesSearch builder with application/json body
func NewPostFlownodeInstancesSearchRequest(server string, body PostFlownodeInstancesSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFlownodeInstancesSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFlownodeInstancesSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody calls the generic PostFlownodeInstancesSearch builder with application/vnd.camunda.api.keys.number+json body
func NewPostFlownodeInstancesSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(server string, body PostFlownodeInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFlownodeInstancesSearchRequestWithBody(server, "application/vnd.camunda.api.keys.number+json", bodyReader)
}

// NewPostFlownodeInstancesSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody calls the generic PostFlownodeInstancesSearch builder with application/vnd.camunda.api.keys.string+json body
func NewPostFlownodeInstancesSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(server string, body PostFlownodeInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFlownodeInstancesSearchRequestWithBody(server, "application/vnd.camunda.api.keys.string+json", bodyReader)
}

// NewPostFlownodeInstancesSearchRequestWithBody generates requests for PostFlownodeInstancesSearch with any type of body
func NewPostFlownodeInstancesSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flownode-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIncidentsSearchRequest calls the generic PostIncidentsSearch builder with application/json body
func NewPostIncidentsSearchRequest(server string, body PostIncidentsSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIncidentsSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIncidentsSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody calls the generic PostIncidentsSearch builder with application/vnd.camunda.api.keys.number+json body
func NewPostIncidentsSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(server string, body PostIncidentsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIncidentsSearchRequestWithBody(server, "application/vnd.camunda.api.keys.number+json", bodyReader)
}

// NewPostIncidentsSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody calls the generic PostIncidentsSearch builder with application/vnd.camunda.api.keys.string+json body
func NewPostIncidentsSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(server string, body PostIncidentsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIncidentsSearchRequestWithBody(server, "application/vnd.camunda.api.keys.string+json", bodyReader)
}

// NewPostIncidentsSearchRequestWithBody generates requests for PostIncidentsSearch with any type of body
func NewPostIncidentsSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentsIncidentKeyRequest generates requests for GetIncidentsIncidentKey
func NewGetIncidentsIncidentKeyRequest(server string, incidentKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incidentKey", runtime.ParamLocationPath, incidentKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIncidentsIncidentKeyResolutionRequest generates requests for PostIncidentsIncidentKeyResolution
func NewPostIncidentsIncidentKeyResolutionRequest(server string, incidentKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incidentKey", runtime.ParamLocationPath, incidentKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents/%s/resolution", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJobsActivationRequest calls the generic PostJobsActivation builder with application/json body
func NewPostJobsActivationRequest(server string, body PostJobsActivationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJobsActivationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJobsActivationRequestWithBody generates requests for PostJobsActivation with any type of body
func NewPostJobsActivationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/activation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchJobsJobKeyRequest calls the generic PatchJobsJobKey builder with application/json body
func NewPatchJobsJobKeyRequest(server string, jobKey string, body PatchJobsJobKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchJobsJobKeyRequestWithBody(server, jobKey, "application/json", bodyReader)
}

// NewPatchJobsJobKeyRequestWithBody generates requests for PatchJobsJobKey with any type of body
func NewPatchJobsJobKeyRequestWithBody(server string, jobKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJobsJobKeyCompletionRequest calls the generic PostJobsJobKeyCompletion builder with application/json body
func NewPostJobsJobKeyCompletionRequest(server string, jobKey string, body PostJobsJobKeyCompletionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJobsJobKeyCompletionRequestWithBody(server, jobKey, "application/json", bodyReader)
}

// NewPostJobsJobKeyCompletionRequestWithBody generates requests for PostJobsJobKeyCompletion with any type of body
func NewPostJobsJobKeyCompletionRequestWithBody(server string, jobKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/completion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewThrowJobErrorRequest calls the generic ThrowJobError builder with application/json body
func NewThrowJobErrorRequest(server string, jobKey string, body ThrowJobErrorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewThrowJobErrorRequestWithBody(server, jobKey, "application/json", bodyReader)
}

// NewThrowJobErrorRequestWithBody generates requests for ThrowJobError with any type of body
func NewThrowJobErrorRequestWithBody(server string, jobKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/error", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJobsJobKeyFailureRequest calls the generic PostJobsJobKeyFailure builder with application/json body
func NewPostJobsJobKeyFailureRequest(server string, jobKey string, body PostJobsJobKeyFailureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJobsJobKeyFailureRequestWithBody(server, jobKey, "application/json", bodyReader)
}

// NewPostJobsJobKeyFailureRequestWithBody generates requests for PostJobsJobKeyFailure with any type of body
func NewPostJobsJobKeyFailureRequestWithBody(server string, jobKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/failure", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLicenseRequest generates requests for GetLicense
func NewGetLicenseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/license")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMessagesCorrelationRequest calls the generic PostMessagesCorrelation builder with application/json body
func NewPostMessagesCorrelationRequest(server string, body PostMessagesCorrelationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMessagesCorrelationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMessagesCorrelationRequestWithBody generates requests for PostMessagesCorrelation with any type of body
func NewPostMessagesCorrelationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/correlation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMessagesPublicationRequest calls the generic PostMessagesPublication builder with application/json body
func NewPostMessagesPublicationRequest(server string, body PostMessagesPublicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMessagesPublicationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMessagesPublicationRequestWithBody generates requests for PostMessagesPublication with any type of body
func NewPostMessagesPublicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/publication")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProcessInstancesRequest calls the generic PostProcessInstances builder with application/json body
func NewPostProcessInstancesRequest(server string, body PostProcessInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProcessInstancesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProcessInstancesRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody calls the generic PostProcessInstances builder with application/vnd.camunda.api.keys.number+json body
func NewPostProcessInstancesRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(server string, body PostProcessInstancesApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProcessInstancesRequestWithBody(server, "application/vnd.camunda.api.keys.number+json", bodyReader)
}

// NewPostProcessInstancesRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody calls the generic PostProcessInstances builder with application/vnd.camunda.api.keys.string+json body
func NewPostProcessInstancesRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(server string, body PostProcessInstancesApplicationVndCamundaAPIKeysStringPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProcessInstancesRequestWithBody(server, "application/vnd.camunda.api.keys.string+json", bodyReader)
}

// NewPostProcessInstancesRequestWithBody generates requests for PostProcessInstances with any type of body
func NewPostProcessInstancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProcessInstancesSearchRequest calls the generic PostProcessInstancesSearch builder with application/json body
func NewPostProcessInstancesSearchRequest(server string, body PostProcessInstancesSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProcessInstancesSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProcessInstancesSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody calls the generic PostProcessInstancesSearch builder with application/vnd.camunda.api.keys.number+json body
func NewPostProcessInstancesSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(server string, body PostProcessInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProcessInstancesSearchRequestWithBody(server, "application/vnd.camunda.api.keys.number+json", bodyReader)
}

// NewPostProcessInstancesSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody calls the generic PostProcessInstancesSearch builder with application/vnd.camunda.api.keys.string+json body
func NewPostProcessInstancesSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(server string, body PostProcessInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProcessInstancesSearchRequestWithBody(server, "application/vnd.camunda.api.keys.string+json", bodyReader)
}

// NewPostProcessInstancesSearchRequestWithBody generates requests for PostProcessInstancesSearch with any type of body
func NewPostProcessInstancesSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProcessInstancesProcessInstanceKeyCancellationRequest calls the generic PostProcessInstancesProcessInstanceKeyCancellation builder with application/json body
func NewPostProcessInstancesProcessInstanceKeyCancellationRequest(server string, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyCancellationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProcessInstancesProcessInstanceKeyCancellationRequestWithBody(server, processInstanceKey, "application/json", bodyReader)
}

// NewPostProcessInstancesProcessInstanceKeyCancellationRequestWithBody generates requests for PostProcessInstancesProcessInstanceKeyCancellation with any type of body
func NewPostProcessInstancesProcessInstanceKeyCancellationRequestWithBody(server string, processInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/%s/cancellation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProcessInstancesProcessInstanceKeyMigrationRequest calls the generic PostProcessInstancesProcessInstanceKeyMigration builder with application/json body
func NewPostProcessInstancesProcessInstanceKeyMigrationRequest(server string, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProcessInstancesProcessInstanceKeyMigrationRequestWithBody(server, processInstanceKey, "application/json", bodyReader)
}

// NewPostProcessInstancesProcessInstanceKeyMigrationRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody calls the generic PostProcessInstancesProcessInstanceKeyMigration builder with application/vnd.camunda.api.keys.number+json body
func NewPostProcessInstancesProcessInstanceKeyMigrationRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(server string, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProcessInstancesProcessInstanceKeyMigrationRequestWithBody(server, processInstanceKey, "application/vnd.camunda.api.keys.number+json", bodyReader)
}

// NewPostProcessInstancesProcessInstanceKeyMigrationRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody calls the generic PostProcessInstancesProcessInstanceKeyMigration builder with application/vnd.camunda.api.keys.string+json body
func NewPostProcessInstancesProcessInstanceKeyMigrationRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(server string, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProcessInstancesProcessInstanceKeyMigrationRequestWithBody(server, processInstanceKey, "application/vnd.camunda.api.keys.string+json", bodyReader)
}

// NewPostProcessInstancesProcessInstanceKeyMigrationRequestWithBody generates requests for PostProcessInstancesProcessInstanceKeyMigration with any type of body
func NewPostProcessInstancesProcessInstanceKeyMigrationRequestWithBody(server string, processInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/%s/migration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProcessInstancesProcessInstanceKeyModificationRequest calls the generic PostProcessInstancesProcessInstanceKeyModification builder with application/json body
func NewPostProcessInstancesProcessInstanceKeyModificationRequest(server string, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProcessInstancesProcessInstanceKeyModificationRequestWithBody(server, processInstanceKey, "application/json", bodyReader)
}

// NewPostProcessInstancesProcessInstanceKeyModificationRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody calls the generic PostProcessInstancesProcessInstanceKeyModification builder with application/vnd.camunda.api.keys.number+json body
func NewPostProcessInstancesProcessInstanceKeyModificationRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(server string, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProcessInstancesProcessInstanceKeyModificationRequestWithBody(server, processInstanceKey, "application/vnd.camunda.api.keys.number+json", bodyReader)
}

// NewPostProcessInstancesProcessInstanceKeyModificationRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody calls the generic PostProcessInstancesProcessInstanceKeyModification builder with application/vnd.camunda.api.keys.string+json body
func NewPostProcessInstancesProcessInstanceKeyModificationRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(server string, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProcessInstancesProcessInstanceKeyModificationRequestWithBody(server, processInstanceKey, "application/vnd.camunda.api.keys.string+json", bodyReader)
}

// NewPostProcessInstancesProcessInstanceKeyModificationRequestWithBody generates requests for PostProcessInstancesProcessInstanceKeyModification with any type of body
func NewPostProcessInstancesProcessInstanceKeyModificationRequestWithBody(server string, processInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/%s/modification", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetResourcesResourceKeyRequest generates requests for GetResourcesResourceKey
func NewGetResourcesResourceKeyRequest(server string, resourceKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceKey", runtime.ParamLocationPath, resourceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourcesResourceKeyContentRequest generates requests for GetResourcesResourceKeyContent
func NewGetResourcesResourceKeyContentRequest(server string, resourceKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceKey", runtime.ParamLocationPath, resourceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s/content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostResourcesResourceKeyDeletionRequest calls the generic PostResourcesResourceKeyDeletion builder with application/json body
func NewPostResourcesResourceKeyDeletionRequest(server string, resourceKey string, body PostResourcesResourceKeyDeletionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostResourcesResourceKeyDeletionRequestWithBody(server, resourceKey, "application/json", bodyReader)
}

// NewPostResourcesResourceKeyDeletionRequestWithBody generates requests for PostResourcesResourceKeyDeletion with any type of body
func NewPostResourcesResourceKeyDeletionRequestWithBody(server string, resourceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceKey", runtime.ParamLocationPath, resourceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s/deletion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSignalsBroadcastRequest calls the generic PostSignalsBroadcast builder with application/json body
func NewPostSignalsBroadcastRequest(server string, body PostSignalsBroadcastJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSignalsBroadcastRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSignalsBroadcastRequestWithBody generates requests for PostSignalsBroadcast with any type of body
func NewPostSignalsBroadcastRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signals/broadcast")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTopologyRequest generates requests for GetTopology
func NewGetTopologyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/topology")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserTasksSearchRequest calls the generic PostUserTasksSearch builder with application/json body
func NewPostUserTasksSearchRequest(server string, body PostUserTasksSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserTasksSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserTasksSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody calls the generic PostUserTasksSearch builder with application/vnd.camunda.api.keys.number+json body
func NewPostUserTasksSearchRequestWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(server string, body PostUserTasksSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserTasksSearchRequestWithBody(server, "application/vnd.camunda.api.keys.number+json", bodyReader)
}

// NewPostUserTasksSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody calls the generic PostUserTasksSearch builder with application/vnd.camunda.api.keys.string+json body
func NewPostUserTasksSearchRequestWithApplicationVndCamundaAPIKeysStringPlusJSONBody(server string, body PostUserTasksSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserTasksSearchRequestWithBody(server, "application/vnd.camunda.api.keys.string+json", bodyReader)
}

// NewPostUserTasksSearchRequestWithBody generates requests for PostUserTasksSearch with any type of body
func NewPostUserTasksSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchUserTasksUserTaskKeyRequest calls the generic PatchUserTasksUserTaskKey builder with application/json body
func NewPatchUserTasksUserTaskKeyRequest(server string, userTaskKey string, body PatchUserTasksUserTaskKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUserTasksUserTaskKeyRequestWithBody(server, userTaskKey, "application/json", bodyReader)
}

// NewPatchUserTasksUserTaskKeyRequestWithBody generates requests for PatchUserTasksUserTaskKey with any type of body
func NewPatchUserTasksUserTaskKeyRequestWithBody(server string, userTaskKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserTasksUserTaskKeyAssigneeRequest generates requests for DeleteUserTasksUserTaskKeyAssignee
func NewDeleteUserTasksUserTaskKeyAssigneeRequest(server string, userTaskKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s/assignee", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserTasksUserTaskKeyAssignmentRequest calls the generic PostUserTasksUserTaskKeyAssignment builder with application/json body
func NewPostUserTasksUserTaskKeyAssignmentRequest(server string, userTaskKey string, body PostUserTasksUserTaskKeyAssignmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserTasksUserTaskKeyAssignmentRequestWithBody(server, userTaskKey, "application/json", bodyReader)
}

// NewPostUserTasksUserTaskKeyAssignmentRequestWithBody generates requests for PostUserTasksUserTaskKeyAssignment with any type of body
func NewPostUserTasksUserTaskKeyAssignmentRequestWithBody(server string, userTaskKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s/assignment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserTasksUserTaskKeyCompletionRequest calls the generic PostUserTasksUserTaskKeyCompletion builder with application/json body
func NewPostUserTasksUserTaskKeyCompletionRequest(server string, userTaskKey string, body PostUserTasksUserTaskKeyCompletionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserTasksUserTaskKeyCompletionRequestWithBody(server, userTaskKey, "application/json", bodyReader)
}

// NewPostUserTasksUserTaskKeyCompletionRequestWithBody generates requests for PostUserTasksUserTaskKeyCompletion with any type of body
func NewPostUserTasksUserTaskKeyCompletionRequestWithBody(server string, userTaskKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s/completion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PutClockWithBodyWithResponse request with any body
	PutClockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClockResponse, error)

	PutClockWithResponse(ctx context.Context, body PutClockJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClockResponse, error)

	// PostClockResetWithResponse request
	PostClockResetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostClockResetResponse, error)

	// PostDecisionDefinitionsEvaluationWithBodyWithResponse request with any body
	PostDecisionDefinitionsEvaluationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsEvaluationResponse, error)

	PostDecisionDefinitionsEvaluationWithResponse(ctx context.Context, body PostDecisionDefinitionsEvaluationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsEvaluationResponse, error)

	PostDecisionDefinitionsEvaluationWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionDefinitionsEvaluationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsEvaluationResponse, error)

	PostDecisionDefinitionsEvaluationWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionDefinitionsEvaluationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsEvaluationResponse, error)

	// PostDecisionDefinitionsSearchWithBodyWithResponse request with any body
	PostDecisionDefinitionsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsSearchResponse, error)

	PostDecisionDefinitionsSearchWithResponse(ctx context.Context, body PostDecisionDefinitionsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsSearchResponse, error)

	PostDecisionDefinitionsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionDefinitionsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsSearchResponse, error)

	PostDecisionDefinitionsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionDefinitionsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsSearchResponse, error)

	// GetDecisionDefinitionsDecisionDefinitionKeyXmlWithResponse request
	GetDecisionDefinitionsDecisionDefinitionKeyXmlWithResponse(ctx context.Context, decisionDefinitionKey string, reqEditors ...RequestEditorFn) (*GetDecisionDefinitionsDecisionDefinitionKeyXmlResponse, error)

	// PostDecisionInstancesSearchWithBodyWithResponse request with any body
	PostDecisionInstancesSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDecisionInstancesSearchResponse, error)

	PostDecisionInstancesSearchWithResponse(ctx context.Context, body PostDecisionInstancesSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionInstancesSearchResponse, error)

	PostDecisionInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionInstancesSearchResponse, error)

	PostDecisionInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionInstancesSearchResponse, error)

	// PostDecisionRequirementsSearchWithBodyWithResponse request with any body
	PostDecisionRequirementsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDecisionRequirementsSearchResponse, error)

	PostDecisionRequirementsSearchWithResponse(ctx context.Context, body PostDecisionRequirementsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionRequirementsSearchResponse, error)

	PostDecisionRequirementsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionRequirementsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionRequirementsSearchResponse, error)

	PostDecisionRequirementsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionRequirementsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionRequirementsSearchResponse, error)

	// PostDeploymentsWithBodyWithResponse request with any body
	PostDeploymentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeploymentsResponse, error)

	// CreateDocumentWithBodyWithResponse request with any body
	CreateDocumentWithBodyWithResponse(ctx context.Context, params *CreateDocumentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDocumentResponse, error)

	// CreateDocumentsWithBodyWithResponse request with any body
	CreateDocumentsWithBodyWithResponse(ctx context.Context, params *CreateDocumentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDocumentsResponse, error)

	// DeleteDocumentWithResponse request
	DeleteDocumentWithResponse(ctx context.Context, documentId string, params *DeleteDocumentParams, reqEditors ...RequestEditorFn) (*DeleteDocumentResponse, error)

	// GetDocumentWithResponse request
	GetDocumentWithResponse(ctx context.Context, documentId string, params *GetDocumentParams, reqEditors ...RequestEditorFn) (*GetDocumentResponse, error)

	// CreateDocumentLinkWithBodyWithResponse request with any body
	CreateDocumentLinkWithBodyWithResponse(ctx context.Context, documentId string, params *CreateDocumentLinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error)

	CreateDocumentLinkWithResponse(ctx context.Context, documentId string, params *CreateDocumentLinkParams, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error)

	// PutElementInstancesElementInstanceKeyVariablesWithBodyWithResponse request with any body
	PutElementInstancesElementInstanceKeyVariablesWithBodyWithResponse(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutElementInstancesElementInstanceKeyVariablesResponse, error)

	PutElementInstancesElementInstanceKeyVariablesWithResponse(ctx context.Context, elementInstanceKey string, body PutElementInstancesElementInstanceKeyVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutElementInstancesElementInstanceKeyVariablesResponse, error)

	// PostFlownodeInstancesSearchWithBodyWithResponse request with any body
	PostFlownodeInstancesSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlownodeInstancesSearchResponse, error)

	PostFlownodeInstancesSearchWithResponse(ctx context.Context, body PostFlownodeInstancesSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlownodeInstancesSearchResponse, error)

	PostFlownodeInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostFlownodeInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlownodeInstancesSearchResponse, error)

	PostFlownodeInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostFlownodeInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlownodeInstancesSearchResponse, error)

	// PostIncidentsSearchWithBodyWithResponse request with any body
	PostIncidentsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIncidentsSearchResponse, error)

	PostIncidentsSearchWithResponse(ctx context.Context, body PostIncidentsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIncidentsSearchResponse, error)

	PostIncidentsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostIncidentsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIncidentsSearchResponse, error)

	PostIncidentsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostIncidentsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIncidentsSearchResponse, error)

	// GetIncidentsIncidentKeyWithResponse request
	GetIncidentsIncidentKeyWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*GetIncidentsIncidentKeyResponse, error)

	// PostIncidentsIncidentKeyResolutionWithResponse request
	PostIncidentsIncidentKeyResolutionWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*PostIncidentsIncidentKeyResolutionResponse, error)

	// PostJobsActivationWithBodyWithResponse request with any body
	PostJobsActivationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobsActivationResponse, error)

	PostJobsActivationWithResponse(ctx context.Context, body PostJobsActivationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobsActivationResponse, error)

	// PatchJobsJobKeyWithBodyWithResponse request with any body
	PatchJobsJobKeyWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchJobsJobKeyResponse, error)

	PatchJobsJobKeyWithResponse(ctx context.Context, jobKey string, body PatchJobsJobKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchJobsJobKeyResponse, error)

	// PostJobsJobKeyCompletionWithBodyWithResponse request with any body
	PostJobsJobKeyCompletionWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobsJobKeyCompletionResponse, error)

	PostJobsJobKeyCompletionWithResponse(ctx context.Context, jobKey string, body PostJobsJobKeyCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobsJobKeyCompletionResponse, error)

	// ThrowJobErrorWithBodyWithResponse request with any body
	ThrowJobErrorWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThrowJobErrorResponse, error)

	ThrowJobErrorWithResponse(ctx context.Context, jobKey string, body ThrowJobErrorJSONRequestBody, reqEditors ...RequestEditorFn) (*ThrowJobErrorResponse, error)

	// PostJobsJobKeyFailureWithBodyWithResponse request with any body
	PostJobsJobKeyFailureWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobsJobKeyFailureResponse, error)

	PostJobsJobKeyFailureWithResponse(ctx context.Context, jobKey string, body PostJobsJobKeyFailureJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobsJobKeyFailureResponse, error)

	// GetLicenseWithResponse request
	GetLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLicenseResponse, error)

	// PostMessagesCorrelationWithBodyWithResponse request with any body
	PostMessagesCorrelationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessagesCorrelationResponse, error)

	PostMessagesCorrelationWithResponse(ctx context.Context, body PostMessagesCorrelationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessagesCorrelationResponse, error)

	// PostMessagesPublicationWithBodyWithResponse request with any body
	PostMessagesPublicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessagesPublicationResponse, error)

	PostMessagesPublicationWithResponse(ctx context.Context, body PostMessagesPublicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessagesPublicationResponse, error)

	// PostProcessInstancesWithBodyWithResponse request with any body
	PostProcessInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProcessInstancesResponse, error)

	PostProcessInstancesWithResponse(ctx context.Context, body PostProcessInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesResponse, error)

	PostProcessInstancesWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostProcessInstancesApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesResponse, error)

	PostProcessInstancesWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostProcessInstancesApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesResponse, error)

	// PostProcessInstancesSearchWithBodyWithResponse request with any body
	PostProcessInstancesSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProcessInstancesSearchResponse, error)

	PostProcessInstancesSearchWithResponse(ctx context.Context, body PostProcessInstancesSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesSearchResponse, error)

	PostProcessInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostProcessInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesSearchResponse, error)

	PostProcessInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostProcessInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesSearchResponse, error)

	// PostProcessInstancesProcessInstanceKeyCancellationWithBodyWithResponse request with any body
	PostProcessInstancesProcessInstanceKeyCancellationWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyCancellationResponse, error)

	PostProcessInstancesProcessInstanceKeyCancellationWithResponse(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyCancellationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyCancellationResponse, error)

	// PostProcessInstancesProcessInstanceKeyMigrationWithBodyWithResponse request with any body
	PostProcessInstancesProcessInstanceKeyMigrationWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyMigrationResponse, error)

	PostProcessInstancesProcessInstanceKeyMigrationWithResponse(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyMigrationResponse, error)

	PostProcessInstancesProcessInstanceKeyMigrationWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyMigrationResponse, error)

	PostProcessInstancesProcessInstanceKeyMigrationWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyMigrationResponse, error)

	// PostProcessInstancesProcessInstanceKeyModificationWithBodyWithResponse request with any body
	PostProcessInstancesProcessInstanceKeyModificationWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyModificationResponse, error)

	PostProcessInstancesProcessInstanceKeyModificationWithResponse(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyModificationResponse, error)

	PostProcessInstancesProcessInstanceKeyModificationWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyModificationResponse, error)

	PostProcessInstancesProcessInstanceKeyModificationWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyModificationResponse, error)

	// GetResourcesResourceKeyWithResponse request
	GetResourcesResourceKeyWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourcesResourceKeyResponse, error)

	// GetResourcesResourceKeyContentWithResponse request
	GetResourcesResourceKeyContentWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourcesResourceKeyContentResponse, error)

	// PostResourcesResourceKeyDeletionWithBodyWithResponse request with any body
	PostResourcesResourceKeyDeletionWithBodyWithResponse(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesResourceKeyDeletionResponse, error)

	PostResourcesResourceKeyDeletionWithResponse(ctx context.Context, resourceKey string, body PostResourcesResourceKeyDeletionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesResourceKeyDeletionResponse, error)

	// PostSignalsBroadcastWithBodyWithResponse request with any body
	PostSignalsBroadcastWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSignalsBroadcastResponse, error)

	PostSignalsBroadcastWithResponse(ctx context.Context, body PostSignalsBroadcastJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSignalsBroadcastResponse, error)

	// GetTopologyWithResponse request
	GetTopologyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTopologyResponse, error)

	// PostUserTasksSearchWithBodyWithResponse request with any body
	PostUserTasksSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserTasksSearchResponse, error)

	PostUserTasksSearchWithResponse(ctx context.Context, body PostUserTasksSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserTasksSearchResponse, error)

	PostUserTasksSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostUserTasksSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserTasksSearchResponse, error)

	PostUserTasksSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostUserTasksSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserTasksSearchResponse, error)

	// PatchUserTasksUserTaskKeyWithBodyWithResponse request with any body
	PatchUserTasksUserTaskKeyWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserTasksUserTaskKeyResponse, error)

	PatchUserTasksUserTaskKeyWithResponse(ctx context.Context, userTaskKey string, body PatchUserTasksUserTaskKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserTasksUserTaskKeyResponse, error)

	// DeleteUserTasksUserTaskKeyAssigneeWithResponse request
	DeleteUserTasksUserTaskKeyAssigneeWithResponse(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*DeleteUserTasksUserTaskKeyAssigneeResponse, error)

	// PostUserTasksUserTaskKeyAssignmentWithBodyWithResponse request with any body
	PostUserTasksUserTaskKeyAssignmentWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserTasksUserTaskKeyAssignmentResponse, error)

	PostUserTasksUserTaskKeyAssignmentWithResponse(ctx context.Context, userTaskKey string, body PostUserTasksUserTaskKeyAssignmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserTasksUserTaskKeyAssignmentResponse, error)

	// PostUserTasksUserTaskKeyCompletionWithBodyWithResponse request with any body
	PostUserTasksUserTaskKeyCompletionWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserTasksUserTaskKeyCompletionResponse, error)

	PostUserTasksUserTaskKeyCompletionWithResponse(ctx context.Context, userTaskKey string, body PostUserTasksUserTaskKeyCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserTasksUserTaskKeyCompletionResponse, error)
}

type PutClockResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PutClockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutClockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClockResetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostClockResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClockResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDecisionDefinitionsEvaluationResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *EvaluateDecisionResult
	ApplicationvndCamundaApiKeysNumberJSON200 *EvaluateDecisionResponse
	ApplicationvndCamundaApiKeysStringJSON200 *EvaluateDecisionResult
	ApplicationproblemJSON400                 *ProblemDetail
	ApplicationproblemJSON404                 *ProblemDetail
	ApplicationproblemJSON500                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostDecisionDefinitionsEvaluationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDecisionDefinitionsEvaluationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDecisionDefinitionsSearchResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *DecisionDefinitionSearchQueryResult
	ApplicationvndCamundaApiKeysNumberJSON200 *DecisionDefinitionSearchQueryResponse
	ApplicationvndCamundaApiKeysStringJSON200 *DecisionDefinitionSearchQueryResult
	ApplicationproblemJSON400                 *ProblemDetail
	ApplicationproblemJSON500                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostDecisionDefinitionsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDecisionDefinitionsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDecisionDefinitionsDecisionDefinitionKeyXmlResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	XML200                    *string
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r GetDecisionDefinitionsDecisionDefinitionKeyXmlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDecisionDefinitionsDecisionDefinitionKeyXmlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDecisionInstancesSearchResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *DecisionInstanceSearchQueryResult
	ApplicationvndCamundaApiKeysNumberJSON200 *DecisionInstanceSearchQueryResponse
	ApplicationvndCamundaApiKeysStringJSON200 *DecisionInstanceSearchQueryResult
	ApplicationproblemJSON400                 *ProblemDetail
	ApplicationproblemJSON500                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostDecisionInstancesSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDecisionInstancesSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDecisionRequirementsSearchResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *DecisionRequirementsSearchQueryResult
	ApplicationvndCamundaApiKeysNumberJSON200 *DecisionRequirementsSearchQueryResponse
	ApplicationvndCamundaApiKeysStringJSON200 *DecisionRequirementsSearchQueryResult
}

// Status returns HTTPResponse.Status
func (r PostDecisionRequirementsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDecisionRequirementsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeploymentsResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *DeploymentResult
	ApplicationvndCamundaApiKeysNumberJSON200 *DeploymentResponse
	ApplicationvndCamundaApiKeysStringJSON200 *DeploymentResult
	ApplicationproblemJSON400                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostDeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDocumentResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON201                                   *DocumentReference
	ApplicationvndCamundaApiKeysNumberJSON201 *DocumentReferenceResult
	ApplicationvndCamundaApiKeysStringJSON201 *DocumentReference
	ApplicationproblemJSON400                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r CreateDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDocumentsResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON201                                   *DocumentCreationBatchResponse
	ApplicationvndCamundaApiKeysNumberJSON201 *DocumentCreationBatchResult
	ApplicationvndCamundaApiKeysStringJSON201 *DocumentCreationBatchResponse
	JSON207                                   *DocumentCreationBatchResponse
	ApplicationvndCamundaApiKeysNumberJSON207 *DocumentCreationBatchResult
	ApplicationvndCamundaApiKeysStringJSON207 *DocumentCreationBatchResponse
	ApplicationproblemJSON400                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r CreateDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDocumentResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDocumentResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDocumentLinkResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *DocumentLink
	ApplicationproblemJSON400 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r CreateDocumentLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDocumentLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutElementInstancesElementInstanceKeyVariablesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PutElementInstancesElementInstanceKeyVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutElementInstancesElementInstanceKeyVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFlownodeInstancesSearchResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *FlowNodeInstanceSearchQueryResult
	ApplicationvndCamundaApiKeysNumberJSON200 *FlowNodeInstanceSearchQueryResponse
	ApplicationvndCamundaApiKeysStringJSON200 *FlowNodeInstanceSearchQueryResult
	ApplicationproblemJSON400                 *ProblemDetail
	ApplicationproblemJSON500                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostFlownodeInstancesSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFlownodeInstancesSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIncidentsSearchResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *IncidentSearchQueryResult
	ApplicationvndCamundaApiKeysNumberJSON200 *IncidentSearchQueryResponse
	ApplicationvndCamundaApiKeysStringJSON200 *IncidentSearchQueryResult
	ApplicationproblemJSON401                 *ProblemDetail
	ApplicationproblemJSON403                 *ProblemDetail
	ApplicationproblemJSON404                 *ProblemDetail
	ApplicationproblemJSON500                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostIncidentsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIncidentsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentsIncidentKeyResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *IncidentResult
	ApplicationvndCamundaApiKeysNumberJSON200 *IncidentItem
	ApplicationvndCamundaApiKeysStringJSON200 *IncidentResult
	ApplicationproblemJSON400                 *ProblemDetail
	ApplicationproblemJSON404                 *ProblemDetail
	ApplicationproblemJSON500                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r GetIncidentsIncidentKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentsIncidentKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIncidentsIncidentKeyResolutionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostIncidentsIncidentKeyResolutionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIncidentsIncidentKeyResolutionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJobsActivationResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *JobActivationResult
	ApplicationvndCamundaApiKeysNumberJSON200 *JobActivationResponse
	ApplicationvndCamundaApiKeysStringJSON200 *JobActivationResult
	ApplicationproblemJSON400                 *ProblemDetail
	ApplicationproblemJSON500                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostJobsActivationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJobsActivationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchJobsJobKeyResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON409 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PatchJobsJobKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchJobsJobKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJobsJobKeyCompletionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON409 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostJobsJobKeyCompletionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJobsJobKeyCompletionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ThrowJobErrorResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON409 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r ThrowJobErrorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ThrowJobErrorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJobsJobKeyFailureResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON409 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostJobsJobKeyFailureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJobsJobKeyFailureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LicenseResponse
}

// Status returns HTTPResponse.Status
func (r GetLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMessagesCorrelationResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *MessageCorrelationResult
	ApplicationvndCamundaApiKeysNumberJSON200 *MessageCorrelationResponse
	ApplicationvndCamundaApiKeysStringJSON200 *MessageCorrelationResult
	ApplicationproblemJSON400                 *ProblemDetail
	ApplicationproblemJSON403                 *ProblemDetail
	ApplicationproblemJSON404                 *ProblemDetail
	ApplicationproblemJSON500                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostMessagesCorrelationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMessagesCorrelationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMessagesPublicationResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *MessagePublicationResult
	ApplicationvndCamundaApiKeysNumberJSON200 *MessagePublicationResponse
	ApplicationvndCamundaApiKeysStringJSON200 *MessagePublicationResult
	ApplicationproblemJSON400                 *ProblemDetail
	ApplicationproblemJSON500                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostMessagesPublicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMessagesPublicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProcessInstancesResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *CreateProcessInstanceResult
	ApplicationvndCamundaApiKeysNumberJSON200 *CreateProcessInstanceResponse
	ApplicationvndCamundaApiKeysStringJSON200 *CreateProcessInstanceResult
	ApplicationproblemJSON500                 *ProblemDetail
	ApplicationproblemJSON504                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostProcessInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProcessInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProcessInstancesSearchResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *ProcessInstanceSearchQueryResult
	ApplicationvndCamundaApiKeysNumberJSON200 *ProcessInstanceSearchQueryResponse
	ApplicationvndCamundaApiKeysStringJSON200 *ProcessInstanceSearchQueryResult
	ApplicationproblemJSON400                 *ProblemDetail
	ApplicationproblemJSON500                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostProcessInstancesSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProcessInstancesSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProcessInstancesProcessInstanceKeyCancellationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostProcessInstancesProcessInstanceKeyCancellationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProcessInstancesProcessInstanceKeyCancellationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProcessInstancesProcessInstanceKeyMigrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostProcessInstancesProcessInstanceKeyMigrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProcessInstancesProcessInstanceKeyMigrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProcessInstancesProcessInstanceKeyModificationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostProcessInstancesProcessInstanceKeyModificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProcessInstancesProcessInstanceKeyModificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourcesResourceKeyResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ResourceResult
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r GetResourcesResourceKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourcesResourceKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourcesResourceKeyContentResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *string
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r GetResourcesResourceKeyContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourcesResourceKeyContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostResourcesResourceKeyDeletionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostResourcesResourceKeyDeletionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResourcesResourceKeyDeletionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSignalsBroadcastResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *SignalBroadcastResult
	ApplicationvndCamundaApiKeysNumberJSON200 *SignalBroadcastResponse
	ApplicationvndCamundaApiKeysStringJSON200 *SignalBroadcastResult
	ApplicationproblemJSON400                 *ProblemDetail
	ApplicationproblemJSON404                 *ProblemDetail
	ApplicationproblemJSON500                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostSignalsBroadcastResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSignalsBroadcastResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTopologyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TopologyResponse
}

// Status returns HTTPResponse.Status
func (r GetTopologyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTopologyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserTasksSearchResponse struct {
	Body                                      []byte
	HTTPResponse                              *http.Response
	JSON200                                   *UserTaskSearchQueryResult
	ApplicationvndCamundaApiKeysNumberJSON200 *UserTaskSearchQueryResponse
	ApplicationvndCamundaApiKeysStringJSON200 *UserTaskSearchQueryResult
	ApplicationproblemJSON400                 *ProblemDetail
	ApplicationproblemJSON500                 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostUserTasksSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserTasksSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUserTasksUserTaskKeyResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON409 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PatchUserTasksUserTaskKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUserTasksUserTaskKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserTasksUserTaskKeyAssigneeResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON409 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r DeleteUserTasksUserTaskKeyAssigneeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserTasksUserTaskKeyAssigneeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserTasksUserTaskKeyAssignmentResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON409 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostUserTasksUserTaskKeyAssignmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserTasksUserTaskKeyAssignmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserTasksUserTaskKeyCompletionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ProblemDetail
	ApplicationproblemJSON404 *ProblemDetail
	ApplicationproblemJSON409 *ProblemDetail
	ApplicationproblemJSON500 *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r PostUserTasksUserTaskKeyCompletionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserTasksUserTaskKeyCompletionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PutClockWithBodyWithResponse request with arbitrary body returning *PutClockResponse
func (c *ClientWithResponses) PutClockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClockResponse, error) {
	rsp, err := c.PutClockWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClockResponse(rsp)
}

func (c *ClientWithResponses) PutClockWithResponse(ctx context.Context, body PutClockJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClockResponse, error) {
	rsp, err := c.PutClock(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClockResponse(rsp)
}

// PostClockResetWithResponse request returning *PostClockResetResponse
func (c *ClientWithResponses) PostClockResetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostClockResetResponse, error) {
	rsp, err := c.PostClockReset(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClockResetResponse(rsp)
}

// PostDecisionDefinitionsEvaluationWithBodyWithResponse request with arbitrary body returning *PostDecisionDefinitionsEvaluationResponse
func (c *ClientWithResponses) PostDecisionDefinitionsEvaluationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsEvaluationResponse, error) {
	rsp, err := c.PostDecisionDefinitionsEvaluationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionDefinitionsEvaluationResponse(rsp)
}

func (c *ClientWithResponses) PostDecisionDefinitionsEvaluationWithResponse(ctx context.Context, body PostDecisionDefinitionsEvaluationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsEvaluationResponse, error) {
	rsp, err := c.PostDecisionDefinitionsEvaluation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionDefinitionsEvaluationResponse(rsp)
}

func (c *ClientWithResponses) PostDecisionDefinitionsEvaluationWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionDefinitionsEvaluationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsEvaluationResponse, error) {
	rsp, err := c.PostDecisionDefinitionsEvaluationWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionDefinitionsEvaluationResponse(rsp)
}

func (c *ClientWithResponses) PostDecisionDefinitionsEvaluationWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionDefinitionsEvaluationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsEvaluationResponse, error) {
	rsp, err := c.PostDecisionDefinitionsEvaluationWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionDefinitionsEvaluationResponse(rsp)
}

// PostDecisionDefinitionsSearchWithBodyWithResponse request with arbitrary body returning *PostDecisionDefinitionsSearchResponse
func (c *ClientWithResponses) PostDecisionDefinitionsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsSearchResponse, error) {
	rsp, err := c.PostDecisionDefinitionsSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionDefinitionsSearchResponse(rsp)
}

func (c *ClientWithResponses) PostDecisionDefinitionsSearchWithResponse(ctx context.Context, body PostDecisionDefinitionsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsSearchResponse, error) {
	rsp, err := c.PostDecisionDefinitionsSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionDefinitionsSearchResponse(rsp)
}

func (c *ClientWithResponses) PostDecisionDefinitionsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionDefinitionsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsSearchResponse, error) {
	rsp, err := c.PostDecisionDefinitionsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionDefinitionsSearchResponse(rsp)
}

func (c *ClientWithResponses) PostDecisionDefinitionsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionDefinitionsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionDefinitionsSearchResponse, error) {
	rsp, err := c.PostDecisionDefinitionsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionDefinitionsSearchResponse(rsp)
}

// GetDecisionDefinitionsDecisionDefinitionKeyXmlWithResponse request returning *GetDecisionDefinitionsDecisionDefinitionKeyXmlResponse
func (c *ClientWithResponses) GetDecisionDefinitionsDecisionDefinitionKeyXmlWithResponse(ctx context.Context, decisionDefinitionKey string, reqEditors ...RequestEditorFn) (*GetDecisionDefinitionsDecisionDefinitionKeyXmlResponse, error) {
	rsp, err := c.GetDecisionDefinitionsDecisionDefinitionKeyXml(ctx, decisionDefinitionKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDecisionDefinitionsDecisionDefinitionKeyXmlResponse(rsp)
}

// PostDecisionInstancesSearchWithBodyWithResponse request with arbitrary body returning *PostDecisionInstancesSearchResponse
func (c *ClientWithResponses) PostDecisionInstancesSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDecisionInstancesSearchResponse, error) {
	rsp, err := c.PostDecisionInstancesSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionInstancesSearchResponse(rsp)
}

func (c *ClientWithResponses) PostDecisionInstancesSearchWithResponse(ctx context.Context, body PostDecisionInstancesSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionInstancesSearchResponse, error) {
	rsp, err := c.PostDecisionInstancesSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionInstancesSearchResponse(rsp)
}

func (c *ClientWithResponses) PostDecisionInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionInstancesSearchResponse, error) {
	rsp, err := c.PostDecisionInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionInstancesSearchResponse(rsp)
}

func (c *ClientWithResponses) PostDecisionInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionInstancesSearchResponse, error) {
	rsp, err := c.PostDecisionInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionInstancesSearchResponse(rsp)
}

// PostDecisionRequirementsSearchWithBodyWithResponse request with arbitrary body returning *PostDecisionRequirementsSearchResponse
func (c *ClientWithResponses) PostDecisionRequirementsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDecisionRequirementsSearchResponse, error) {
	rsp, err := c.PostDecisionRequirementsSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionRequirementsSearchResponse(rsp)
}

func (c *ClientWithResponses) PostDecisionRequirementsSearchWithResponse(ctx context.Context, body PostDecisionRequirementsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionRequirementsSearchResponse, error) {
	rsp, err := c.PostDecisionRequirementsSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionRequirementsSearchResponse(rsp)
}

func (c *ClientWithResponses) PostDecisionRequirementsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionRequirementsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionRequirementsSearchResponse, error) {
	rsp, err := c.PostDecisionRequirementsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionRequirementsSearchResponse(rsp)
}

func (c *ClientWithResponses) PostDecisionRequirementsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostDecisionRequirementsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDecisionRequirementsSearchResponse, error) {
	rsp, err := c.PostDecisionRequirementsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDecisionRequirementsSearchResponse(rsp)
}

// PostDeploymentsWithBodyWithResponse request with arbitrary body returning *PostDeploymentsResponse
func (c *ClientWithResponses) PostDeploymentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeploymentsResponse, error) {
	rsp, err := c.PostDeploymentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeploymentsResponse(rsp)
}

// CreateDocumentWithBodyWithResponse request with arbitrary body returning *CreateDocumentResponse
func (c *ClientWithResponses) CreateDocumentWithBodyWithResponse(ctx context.Context, params *CreateDocumentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDocumentResponse, error) {
	rsp, err := c.CreateDocumentWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDocumentResponse(rsp)
}

// CreateDocumentsWithBodyWithResponse request with arbitrary body returning *CreateDocumentsResponse
func (c *ClientWithResponses) CreateDocumentsWithBodyWithResponse(ctx context.Context, params *CreateDocumentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDocumentsResponse, error) {
	rsp, err := c.CreateDocumentsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDocumentsResponse(rsp)
}

// DeleteDocumentWithResponse request returning *DeleteDocumentResponse
func (c *ClientWithResponses) DeleteDocumentWithResponse(ctx context.Context, documentId string, params *DeleteDocumentParams, reqEditors ...RequestEditorFn) (*DeleteDocumentResponse, error) {
	rsp, err := c.DeleteDocument(ctx, documentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDocumentResponse(rsp)
}

// GetDocumentWithResponse request returning *GetDocumentResponse
func (c *ClientWithResponses) GetDocumentWithResponse(ctx context.Context, documentId string, params *GetDocumentParams, reqEditors ...RequestEditorFn) (*GetDocumentResponse, error) {
	rsp, err := c.GetDocument(ctx, documentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDocumentResponse(rsp)
}

// CreateDocumentLinkWithBodyWithResponse request with arbitrary body returning *CreateDocumentLinkResponse
func (c *ClientWithResponses) CreateDocumentLinkWithBodyWithResponse(ctx context.Context, documentId string, params *CreateDocumentLinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error) {
	rsp, err := c.CreateDocumentLinkWithBody(ctx, documentId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDocumentLinkResponse(rsp)
}

func (c *ClientWithResponses) CreateDocumentLinkWithResponse(ctx context.Context, documentId string, params *CreateDocumentLinkParams, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error) {
	rsp, err := c.CreateDocumentLink(ctx, documentId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDocumentLinkResponse(rsp)
}

// PutElementInstancesElementInstanceKeyVariablesWithBodyWithResponse request with arbitrary body returning *PutElementInstancesElementInstanceKeyVariablesResponse
func (c *ClientWithResponses) PutElementInstancesElementInstanceKeyVariablesWithBodyWithResponse(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutElementInstancesElementInstanceKeyVariablesResponse, error) {
	rsp, err := c.PutElementInstancesElementInstanceKeyVariablesWithBody(ctx, elementInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutElementInstancesElementInstanceKeyVariablesResponse(rsp)
}

func (c *ClientWithResponses) PutElementInstancesElementInstanceKeyVariablesWithResponse(ctx context.Context, elementInstanceKey string, body PutElementInstancesElementInstanceKeyVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutElementInstancesElementInstanceKeyVariablesResponse, error) {
	rsp, err := c.PutElementInstancesElementInstanceKeyVariables(ctx, elementInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutElementInstancesElementInstanceKeyVariablesResponse(rsp)
}

// PostFlownodeInstancesSearchWithBodyWithResponse request with arbitrary body returning *PostFlownodeInstancesSearchResponse
func (c *ClientWithResponses) PostFlownodeInstancesSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlownodeInstancesSearchResponse, error) {
	rsp, err := c.PostFlownodeInstancesSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlownodeInstancesSearchResponse(rsp)
}

func (c *ClientWithResponses) PostFlownodeInstancesSearchWithResponse(ctx context.Context, body PostFlownodeInstancesSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlownodeInstancesSearchResponse, error) {
	rsp, err := c.PostFlownodeInstancesSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlownodeInstancesSearchResponse(rsp)
}

func (c *ClientWithResponses) PostFlownodeInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostFlownodeInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlownodeInstancesSearchResponse, error) {
	rsp, err := c.PostFlownodeInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlownodeInstancesSearchResponse(rsp)
}

func (c *ClientWithResponses) PostFlownodeInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostFlownodeInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlownodeInstancesSearchResponse, error) {
	rsp, err := c.PostFlownodeInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlownodeInstancesSearchResponse(rsp)
}

// PostIncidentsSearchWithBodyWithResponse request with arbitrary body returning *PostIncidentsSearchResponse
func (c *ClientWithResponses) PostIncidentsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIncidentsSearchResponse, error) {
	rsp, err := c.PostIncidentsSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIncidentsSearchResponse(rsp)
}

func (c *ClientWithResponses) PostIncidentsSearchWithResponse(ctx context.Context, body PostIncidentsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIncidentsSearchResponse, error) {
	rsp, err := c.PostIncidentsSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIncidentsSearchResponse(rsp)
}

func (c *ClientWithResponses) PostIncidentsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostIncidentsSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIncidentsSearchResponse, error) {
	rsp, err := c.PostIncidentsSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIncidentsSearchResponse(rsp)
}

func (c *ClientWithResponses) PostIncidentsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostIncidentsSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIncidentsSearchResponse, error) {
	rsp, err := c.PostIncidentsSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIncidentsSearchResponse(rsp)
}

// GetIncidentsIncidentKeyWithResponse request returning *GetIncidentsIncidentKeyResponse
func (c *ClientWithResponses) GetIncidentsIncidentKeyWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*GetIncidentsIncidentKeyResponse, error) {
	rsp, err := c.GetIncidentsIncidentKey(ctx, incidentKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentsIncidentKeyResponse(rsp)
}

// PostIncidentsIncidentKeyResolutionWithResponse request returning *PostIncidentsIncidentKeyResolutionResponse
func (c *ClientWithResponses) PostIncidentsIncidentKeyResolutionWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*PostIncidentsIncidentKeyResolutionResponse, error) {
	rsp, err := c.PostIncidentsIncidentKeyResolution(ctx, incidentKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIncidentsIncidentKeyResolutionResponse(rsp)
}

// PostJobsActivationWithBodyWithResponse request with arbitrary body returning *PostJobsActivationResponse
func (c *ClientWithResponses) PostJobsActivationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobsActivationResponse, error) {
	rsp, err := c.PostJobsActivationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobsActivationResponse(rsp)
}

func (c *ClientWithResponses) PostJobsActivationWithResponse(ctx context.Context, body PostJobsActivationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobsActivationResponse, error) {
	rsp, err := c.PostJobsActivation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobsActivationResponse(rsp)
}

// PatchJobsJobKeyWithBodyWithResponse request with arbitrary body returning *PatchJobsJobKeyResponse
func (c *ClientWithResponses) PatchJobsJobKeyWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchJobsJobKeyResponse, error) {
	rsp, err := c.PatchJobsJobKeyWithBody(ctx, jobKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchJobsJobKeyResponse(rsp)
}

func (c *ClientWithResponses) PatchJobsJobKeyWithResponse(ctx context.Context, jobKey string, body PatchJobsJobKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchJobsJobKeyResponse, error) {
	rsp, err := c.PatchJobsJobKey(ctx, jobKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchJobsJobKeyResponse(rsp)
}

// PostJobsJobKeyCompletionWithBodyWithResponse request with arbitrary body returning *PostJobsJobKeyCompletionResponse
func (c *ClientWithResponses) PostJobsJobKeyCompletionWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobsJobKeyCompletionResponse, error) {
	rsp, err := c.PostJobsJobKeyCompletionWithBody(ctx, jobKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobsJobKeyCompletionResponse(rsp)
}

func (c *ClientWithResponses) PostJobsJobKeyCompletionWithResponse(ctx context.Context, jobKey string, body PostJobsJobKeyCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobsJobKeyCompletionResponse, error) {
	rsp, err := c.PostJobsJobKeyCompletion(ctx, jobKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobsJobKeyCompletionResponse(rsp)
}

// ThrowJobErrorWithBodyWithResponse request with arbitrary body returning *ThrowJobErrorResponse
func (c *ClientWithResponses) ThrowJobErrorWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ThrowJobErrorResponse, error) {
	rsp, err := c.ThrowJobErrorWithBody(ctx, jobKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThrowJobErrorResponse(rsp)
}

func (c *ClientWithResponses) ThrowJobErrorWithResponse(ctx context.Context, jobKey string, body ThrowJobErrorJSONRequestBody, reqEditors ...RequestEditorFn) (*ThrowJobErrorResponse, error) {
	rsp, err := c.ThrowJobError(ctx, jobKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseThrowJobErrorResponse(rsp)
}

// PostJobsJobKeyFailureWithBodyWithResponse request with arbitrary body returning *PostJobsJobKeyFailureResponse
func (c *ClientWithResponses) PostJobsJobKeyFailureWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobsJobKeyFailureResponse, error) {
	rsp, err := c.PostJobsJobKeyFailureWithBody(ctx, jobKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobsJobKeyFailureResponse(rsp)
}

func (c *ClientWithResponses) PostJobsJobKeyFailureWithResponse(ctx context.Context, jobKey string, body PostJobsJobKeyFailureJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobsJobKeyFailureResponse, error) {
	rsp, err := c.PostJobsJobKeyFailure(ctx, jobKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobsJobKeyFailureResponse(rsp)
}

// GetLicenseWithResponse request returning *GetLicenseResponse
func (c *ClientWithResponses) GetLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLicenseResponse, error) {
	rsp, err := c.GetLicense(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLicenseResponse(rsp)
}

// PostMessagesCorrelationWithBodyWithResponse request with arbitrary body returning *PostMessagesCorrelationResponse
func (c *ClientWithResponses) PostMessagesCorrelationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessagesCorrelationResponse, error) {
	rsp, err := c.PostMessagesCorrelationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessagesCorrelationResponse(rsp)
}

func (c *ClientWithResponses) PostMessagesCorrelationWithResponse(ctx context.Context, body PostMessagesCorrelationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessagesCorrelationResponse, error) {
	rsp, err := c.PostMessagesCorrelation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessagesCorrelationResponse(rsp)
}

// PostMessagesPublicationWithBodyWithResponse request with arbitrary body returning *PostMessagesPublicationResponse
func (c *ClientWithResponses) PostMessagesPublicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessagesPublicationResponse, error) {
	rsp, err := c.PostMessagesPublicationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessagesPublicationResponse(rsp)
}

func (c *ClientWithResponses) PostMessagesPublicationWithResponse(ctx context.Context, body PostMessagesPublicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessagesPublicationResponse, error) {
	rsp, err := c.PostMessagesPublication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessagesPublicationResponse(rsp)
}

// PostProcessInstancesWithBodyWithResponse request with arbitrary body returning *PostProcessInstancesResponse
func (c *ClientWithResponses) PostProcessInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProcessInstancesResponse, error) {
	rsp, err := c.PostProcessInstancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostProcessInstancesWithResponse(ctx context.Context, body PostProcessInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesResponse, error) {
	rsp, err := c.PostProcessInstances(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostProcessInstancesWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostProcessInstancesApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesResponse, error) {
	rsp, err := c.PostProcessInstancesWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostProcessInstancesWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostProcessInstancesApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesResponse, error) {
	rsp, err := c.PostProcessInstancesWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesResponse(rsp)
}

// PostProcessInstancesSearchWithBodyWithResponse request with arbitrary body returning *PostProcessInstancesSearchResponse
func (c *ClientWithResponses) PostProcessInstancesSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProcessInstancesSearchResponse, error) {
	rsp, err := c.PostProcessInstancesSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesSearchResponse(rsp)
}

func (c *ClientWithResponses) PostProcessInstancesSearchWithResponse(ctx context.Context, body PostProcessInstancesSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesSearchResponse, error) {
	rsp, err := c.PostProcessInstancesSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesSearchResponse(rsp)
}

func (c *ClientWithResponses) PostProcessInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostProcessInstancesSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesSearchResponse, error) {
	rsp, err := c.PostProcessInstancesSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesSearchResponse(rsp)
}

func (c *ClientWithResponses) PostProcessInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostProcessInstancesSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesSearchResponse, error) {
	rsp, err := c.PostProcessInstancesSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesSearchResponse(rsp)
}

// PostProcessInstancesProcessInstanceKeyCancellationWithBodyWithResponse request with arbitrary body returning *PostProcessInstancesProcessInstanceKeyCancellationResponse
func (c *ClientWithResponses) PostProcessInstancesProcessInstanceKeyCancellationWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyCancellationResponse, error) {
	rsp, err := c.PostProcessInstancesProcessInstanceKeyCancellationWithBody(ctx, processInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesProcessInstanceKeyCancellationResponse(rsp)
}

func (c *ClientWithResponses) PostProcessInstancesProcessInstanceKeyCancellationWithResponse(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyCancellationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyCancellationResponse, error) {
	rsp, err := c.PostProcessInstancesProcessInstanceKeyCancellation(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesProcessInstanceKeyCancellationResponse(rsp)
}

// PostProcessInstancesProcessInstanceKeyMigrationWithBodyWithResponse request with arbitrary body returning *PostProcessInstancesProcessInstanceKeyMigrationResponse
func (c *ClientWithResponses) PostProcessInstancesProcessInstanceKeyMigrationWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyMigrationResponse, error) {
	rsp, err := c.PostProcessInstancesProcessInstanceKeyMigrationWithBody(ctx, processInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesProcessInstanceKeyMigrationResponse(rsp)
}

func (c *ClientWithResponses) PostProcessInstancesProcessInstanceKeyMigrationWithResponse(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyMigrationResponse, error) {
	rsp, err := c.PostProcessInstancesProcessInstanceKeyMigration(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesProcessInstanceKeyMigrationResponse(rsp)
}

func (c *ClientWithResponses) PostProcessInstancesProcessInstanceKeyMigrationWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyMigrationResponse, error) {
	rsp, err := c.PostProcessInstancesProcessInstanceKeyMigrationWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesProcessInstanceKeyMigrationResponse(rsp)
}

func (c *ClientWithResponses) PostProcessInstancesProcessInstanceKeyMigrationWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyMigrationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyMigrationResponse, error) {
	rsp, err := c.PostProcessInstancesProcessInstanceKeyMigrationWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesProcessInstanceKeyMigrationResponse(rsp)
}

// PostProcessInstancesProcessInstanceKeyModificationWithBodyWithResponse request with arbitrary body returning *PostProcessInstancesProcessInstanceKeyModificationResponse
func (c *ClientWithResponses) PostProcessInstancesProcessInstanceKeyModificationWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyModificationResponse, error) {
	rsp, err := c.PostProcessInstancesProcessInstanceKeyModificationWithBody(ctx, processInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesProcessInstanceKeyModificationResponse(rsp)
}

func (c *ClientWithResponses) PostProcessInstancesProcessInstanceKeyModificationWithResponse(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyModificationResponse, error) {
	rsp, err := c.PostProcessInstancesProcessInstanceKeyModification(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesProcessInstanceKeyModificationResponse(rsp)
}

func (c *ClientWithResponses) PostProcessInstancesProcessInstanceKeyModificationWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyModificationResponse, error) {
	rsp, err := c.PostProcessInstancesProcessInstanceKeyModificationWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesProcessInstanceKeyModificationResponse(rsp)
}

func (c *ClientWithResponses) PostProcessInstancesProcessInstanceKeyModificationWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, processInstanceKey string, body PostProcessInstancesProcessInstanceKeyModificationApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessInstancesProcessInstanceKeyModificationResponse, error) {
	rsp, err := c.PostProcessInstancesProcessInstanceKeyModificationWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessInstancesProcessInstanceKeyModificationResponse(rsp)
}

// GetResourcesResourceKeyWithResponse request returning *GetResourcesResourceKeyResponse
func (c *ClientWithResponses) GetResourcesResourceKeyWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourcesResourceKeyResponse, error) {
	rsp, err := c.GetResourcesResourceKey(ctx, resourceKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourcesResourceKeyResponse(rsp)
}

// GetResourcesResourceKeyContentWithResponse request returning *GetResourcesResourceKeyContentResponse
func (c *ClientWithResponses) GetResourcesResourceKeyContentWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourcesResourceKeyContentResponse, error) {
	rsp, err := c.GetResourcesResourceKeyContent(ctx, resourceKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourcesResourceKeyContentResponse(rsp)
}

// PostResourcesResourceKeyDeletionWithBodyWithResponse request with arbitrary body returning *PostResourcesResourceKeyDeletionResponse
func (c *ClientWithResponses) PostResourcesResourceKeyDeletionWithBodyWithResponse(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesResourceKeyDeletionResponse, error) {
	rsp, err := c.PostResourcesResourceKeyDeletionWithBody(ctx, resourceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesResourceKeyDeletionResponse(rsp)
}

func (c *ClientWithResponses) PostResourcesResourceKeyDeletionWithResponse(ctx context.Context, resourceKey string, body PostResourcesResourceKeyDeletionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesResourceKeyDeletionResponse, error) {
	rsp, err := c.PostResourcesResourceKeyDeletion(ctx, resourceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesResourceKeyDeletionResponse(rsp)
}

// PostSignalsBroadcastWithBodyWithResponse request with arbitrary body returning *PostSignalsBroadcastResponse
func (c *ClientWithResponses) PostSignalsBroadcastWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSignalsBroadcastResponse, error) {
	rsp, err := c.PostSignalsBroadcastWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSignalsBroadcastResponse(rsp)
}

func (c *ClientWithResponses) PostSignalsBroadcastWithResponse(ctx context.Context, body PostSignalsBroadcastJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSignalsBroadcastResponse, error) {
	rsp, err := c.PostSignalsBroadcast(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSignalsBroadcastResponse(rsp)
}

// GetTopologyWithResponse request returning *GetTopologyResponse
func (c *ClientWithResponses) GetTopologyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTopologyResponse, error) {
	rsp, err := c.GetTopology(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTopologyResponse(rsp)
}

// PostUserTasksSearchWithBodyWithResponse request with arbitrary body returning *PostUserTasksSearchResponse
func (c *ClientWithResponses) PostUserTasksSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserTasksSearchResponse, error) {
	rsp, err := c.PostUserTasksSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserTasksSearchResponse(rsp)
}

func (c *ClientWithResponses) PostUserTasksSearchWithResponse(ctx context.Context, body PostUserTasksSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserTasksSearchResponse, error) {
	rsp, err := c.PostUserTasksSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserTasksSearchResponse(rsp)
}

func (c *ClientWithResponses) PostUserTasksSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBodyWithResponse(ctx context.Context, body PostUserTasksSearchApplicationVndCamundaAPIKeysNumberPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserTasksSearchResponse, error) {
	rsp, err := c.PostUserTasksSearchWithApplicationVndCamundaAPIKeysNumberPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserTasksSearchResponse(rsp)
}

func (c *ClientWithResponses) PostUserTasksSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBodyWithResponse(ctx context.Context, body PostUserTasksSearchApplicationVndCamundaAPIKeysStringPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserTasksSearchResponse, error) {
	rsp, err := c.PostUserTasksSearchWithApplicationVndCamundaAPIKeysStringPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserTasksSearchResponse(rsp)
}

// PatchUserTasksUserTaskKeyWithBodyWithResponse request with arbitrary body returning *PatchUserTasksUserTaskKeyResponse
func (c *ClientWithResponses) PatchUserTasksUserTaskKeyWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserTasksUserTaskKeyResponse, error) {
	rsp, err := c.PatchUserTasksUserTaskKeyWithBody(ctx, userTaskKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserTasksUserTaskKeyResponse(rsp)
}

func (c *ClientWithResponses) PatchUserTasksUserTaskKeyWithResponse(ctx context.Context, userTaskKey string, body PatchUserTasksUserTaskKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserTasksUserTaskKeyResponse, error) {
	rsp, err := c.PatchUserTasksUserTaskKey(ctx, userTaskKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserTasksUserTaskKeyResponse(rsp)
}

// DeleteUserTasksUserTaskKeyAssigneeWithResponse request returning *DeleteUserTasksUserTaskKeyAssigneeResponse
func (c *ClientWithResponses) DeleteUserTasksUserTaskKeyAssigneeWithResponse(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*DeleteUserTasksUserTaskKeyAssigneeResponse, error) {
	rsp, err := c.DeleteUserTasksUserTaskKeyAssignee(ctx, userTaskKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserTasksUserTaskKeyAssigneeResponse(rsp)
}

// PostUserTasksUserTaskKeyAssignmentWithBodyWithResponse request with arbitrary body returning *PostUserTasksUserTaskKeyAssignmentResponse
func (c *ClientWithResponses) PostUserTasksUserTaskKeyAssignmentWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserTasksUserTaskKeyAssignmentResponse, error) {
	rsp, err := c.PostUserTasksUserTaskKeyAssignmentWithBody(ctx, userTaskKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserTasksUserTaskKeyAssignmentResponse(rsp)
}

func (c *ClientWithResponses) PostUserTasksUserTaskKeyAssignmentWithResponse(ctx context.Context, userTaskKey string, body PostUserTasksUserTaskKeyAssignmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserTasksUserTaskKeyAssignmentResponse, error) {
	rsp, err := c.PostUserTasksUserTaskKeyAssignment(ctx, userTaskKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserTasksUserTaskKeyAssignmentResponse(rsp)
}

// PostUserTasksUserTaskKeyCompletionWithBodyWithResponse request with arbitrary body returning *PostUserTasksUserTaskKeyCompletionResponse
func (c *ClientWithResponses) PostUserTasksUserTaskKeyCompletionWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserTasksUserTaskKeyCompletionResponse, error) {
	rsp, err := c.PostUserTasksUserTaskKeyCompletionWithBody(ctx, userTaskKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserTasksUserTaskKeyCompletionResponse(rsp)
}

func (c *ClientWithResponses) PostUserTasksUserTaskKeyCompletionWithResponse(ctx context.Context, userTaskKey string, body PostUserTasksUserTaskKeyCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserTasksUserTaskKeyCompletionResponse, error) {
	rsp, err := c.PostUserTasksUserTaskKeyCompletion(ctx, userTaskKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserTasksUserTaskKeyCompletionResponse(rsp)
}

// ParsePutClockResponse parses an HTTP response from a PutClockWithResponse call
func ParsePutClockResponse(rsp *http.Response) (*PutClockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutClockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostClockResetResponse parses an HTTP response from a PostClockResetWithResponse call
func ParsePostClockResetResponse(rsp *http.Response) (*PostClockResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClockResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostDecisionDefinitionsEvaluationResponse parses an HTTP response from a PostDecisionDefinitionsEvaluationWithResponse call
func ParsePostDecisionDefinitionsEvaluationResponse(rsp *http.Response) (*PostDecisionDefinitionsEvaluationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDecisionDefinitionsEvaluationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest EvaluateDecisionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest EvaluateDecisionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest EvaluateDecisionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostDecisionDefinitionsSearchResponse parses an HTTP response from a PostDecisionDefinitionsSearchWithResponse call
func ParsePostDecisionDefinitionsSearchResponse(rsp *http.Response) (*PostDecisionDefinitionsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDecisionDefinitionsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest DecisionDefinitionSearchQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest DecisionDefinitionSearchQueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest DecisionDefinitionSearchQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDecisionDefinitionsDecisionDefinitionKeyXmlResponse parses an HTTP response from a GetDecisionDefinitionsDecisionDefinitionKeyXmlWithResponse call
func ParseGetDecisionDefinitionsDecisionDefinitionKeyXmlResponse(rsp *http.Response) (*GetDecisionDefinitionsDecisionDefinitionKeyXmlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDecisionDefinitionsDecisionDefinitionKeyXmlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParsePostDecisionInstancesSearchResponse parses an HTTP response from a PostDecisionInstancesSearchWithResponse call
func ParsePostDecisionInstancesSearchResponse(rsp *http.Response) (*PostDecisionInstancesSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDecisionInstancesSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest DecisionInstanceSearchQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest DecisionInstanceSearchQueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest DecisionInstanceSearchQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostDecisionRequirementsSearchResponse parses an HTTP response from a PostDecisionRequirementsSearchWithResponse call
func ParsePostDecisionRequirementsSearchResponse(rsp *http.Response) (*PostDecisionRequirementsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDecisionRequirementsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest DecisionRequirementsSearchQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest DecisionRequirementsSearchQueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest DecisionRequirementsSearchQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	}

	return response, nil
}

// ParsePostDeploymentsResponse parses an HTTP response from a PostDeploymentsWithResponse call
func ParsePostDeploymentsResponse(rsp *http.Response) (*PostDeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest DeploymentResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest DeploymentResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	}

	return response, nil
}

// ParseCreateDocumentResponse parses an HTTP response from a CreateDocumentWithResponse call
func ParseCreateDocumentResponse(rsp *http.Response) (*CreateDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 201:
		var dest DocumentReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 201:
		var dest DocumentReferenceResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON201 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 201:
		var dest DocumentReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	}

	return response, nil
}

// ParseCreateDocumentsResponse parses an HTTP response from a CreateDocumentsWithResponse call
func ParseCreateDocumentsResponse(rsp *http.Response) (*CreateDocumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 201:
		var dest DocumentCreationBatchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 207:
		var dest DocumentCreationBatchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 201:
		var dest DocumentCreationBatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON201 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 207:
		var dest DocumentCreationBatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON207 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 201:
		var dest DocumentCreationBatchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON201 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 207:
		var dest DocumentCreationBatchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	}

	return response, nil
}

// ParseDeleteDocumentResponse parses an HTTP response from a DeleteDocumentWithResponse call
func ParseDeleteDocumentResponse(rsp *http.Response) (*DeleteDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDocumentResponse parses an HTTP response from a GetDocumentWithResponse call
func ParseGetDocumentResponse(rsp *http.Response) (*GetDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateDocumentLinkResponse parses an HTTP response from a CreateDocumentLinkWithResponse call
func ParseCreateDocumentLinkResponse(rsp *http.Response) (*CreateDocumentLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDocumentLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DocumentLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	}

	return response, nil
}

// ParsePutElementInstancesElementInstanceKeyVariablesResponse parses an HTTP response from a PutElementInstancesElementInstanceKeyVariablesWithResponse call
func ParsePutElementInstancesElementInstanceKeyVariablesResponse(rsp *http.Response) (*PutElementInstancesElementInstanceKeyVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutElementInstancesElementInstanceKeyVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostFlownodeInstancesSearchResponse parses an HTTP response from a PostFlownodeInstancesSearchWithResponse call
func ParsePostFlownodeInstancesSearchResponse(rsp *http.Response) (*PostFlownodeInstancesSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFlownodeInstancesSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest FlowNodeInstanceSearchQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest FlowNodeInstanceSearchQueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest FlowNodeInstanceSearchQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostIncidentsSearchResponse parses an HTTP response from a PostIncidentsSearchWithResponse call
func ParsePostIncidentsSearchResponse(rsp *http.Response) (*PostIncidentsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIncidentsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest IncidentSearchQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest IncidentSearchQueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest IncidentSearchQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetIncidentsIncidentKeyResponse parses an HTTP response from a GetIncidentsIncidentKeyWithResponse call
func ParseGetIncidentsIncidentKeyResponse(rsp *http.Response) (*GetIncidentsIncidentKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentsIncidentKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest IncidentResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest IncidentItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest IncidentResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostIncidentsIncidentKeyResolutionResponse parses an HTTP response from a PostIncidentsIncidentKeyResolutionWithResponse call
func ParsePostIncidentsIncidentKeyResolutionResponse(rsp *http.Response) (*PostIncidentsIncidentKeyResolutionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIncidentsIncidentKeyResolutionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostJobsActivationResponse parses an HTTP response from a PostJobsActivationWithResponse call
func ParsePostJobsActivationResponse(rsp *http.Response) (*PostJobsActivationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJobsActivationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest JobActivationResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest JobActivationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest JobActivationResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePatchJobsJobKeyResponse parses an HTTP response from a PatchJobsJobKeyWithResponse call
func ParsePatchJobsJobKeyResponse(rsp *http.Response) (*PatchJobsJobKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchJobsJobKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostJobsJobKeyCompletionResponse parses an HTTP response from a PostJobsJobKeyCompletionWithResponse call
func ParsePostJobsJobKeyCompletionResponse(rsp *http.Response) (*PostJobsJobKeyCompletionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJobsJobKeyCompletionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseThrowJobErrorResponse parses an HTTP response from a ThrowJobErrorWithResponse call
func ParseThrowJobErrorResponse(rsp *http.Response) (*ThrowJobErrorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ThrowJobErrorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostJobsJobKeyFailureResponse parses an HTTP response from a PostJobsJobKeyFailureWithResponse call
func ParsePostJobsJobKeyFailureResponse(rsp *http.Response) (*PostJobsJobKeyFailureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJobsJobKeyFailureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetLicenseResponse parses an HTTP response from a GetLicenseWithResponse call
func ParseGetLicenseResponse(rsp *http.Response) (*GetLicenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LicenseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMessagesCorrelationResponse parses an HTTP response from a PostMessagesCorrelationWithResponse call
func ParsePostMessagesCorrelationResponse(rsp *http.Response) (*PostMessagesCorrelationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMessagesCorrelationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest MessageCorrelationResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest MessageCorrelationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest MessageCorrelationResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostMessagesPublicationResponse parses an HTTP response from a PostMessagesPublicationWithResponse call
func ParsePostMessagesPublicationResponse(rsp *http.Response) (*PostMessagesPublicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMessagesPublicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest MessagePublicationResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest MessagePublicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest MessagePublicationResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostProcessInstancesResponse parses an HTTP response from a PostProcessInstancesWithResponse call
func ParsePostProcessInstancesResponse(rsp *http.Response) (*PostProcessInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProcessInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest CreateProcessInstanceResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest CreateProcessInstanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest CreateProcessInstanceResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON504 = &dest

	}

	return response, nil
}

// ParsePostProcessInstancesSearchResponse parses an HTTP response from a PostProcessInstancesSearchWithResponse call
func ParsePostProcessInstancesSearchResponse(rsp *http.Response) (*PostProcessInstancesSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProcessInstancesSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest ProcessInstanceSearchQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest ProcessInstanceSearchQueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest ProcessInstanceSearchQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostProcessInstancesProcessInstanceKeyCancellationResponse parses an HTTP response from a PostProcessInstancesProcessInstanceKeyCancellationWithResponse call
func ParsePostProcessInstancesProcessInstanceKeyCancellationResponse(rsp *http.Response) (*PostProcessInstancesProcessInstanceKeyCancellationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProcessInstancesProcessInstanceKeyCancellationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostProcessInstancesProcessInstanceKeyMigrationResponse parses an HTTP response from a PostProcessInstancesProcessInstanceKeyMigrationWithResponse call
func ParsePostProcessInstancesProcessInstanceKeyMigrationResponse(rsp *http.Response) (*PostProcessInstancesProcessInstanceKeyMigrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProcessInstancesProcessInstanceKeyMigrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostProcessInstancesProcessInstanceKeyModificationResponse parses an HTTP response from a PostProcessInstancesProcessInstanceKeyModificationWithResponse call
func ParsePostProcessInstancesProcessInstanceKeyModificationResponse(rsp *http.Response) (*PostProcessInstancesProcessInstanceKeyModificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProcessInstancesProcessInstanceKeyModificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetResourcesResourceKeyResponse parses an HTTP response from a GetResourcesResourceKeyWithResponse call
func ParseGetResourcesResourceKeyResponse(rsp *http.Response) (*GetResourcesResourceKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourcesResourceKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetResourcesResourceKeyContentResponse parses an HTTP response from a GetResourcesResourceKeyContentWithResponse call
func ParseGetResourcesResourceKeyContentResponse(rsp *http.Response) (*GetResourcesResourceKeyContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourcesResourceKeyContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostResourcesResourceKeyDeletionResponse parses an HTTP response from a PostResourcesResourceKeyDeletionWithResponse call
func ParsePostResourcesResourceKeyDeletionResponse(rsp *http.Response) (*PostResourcesResourceKeyDeletionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResourcesResourceKeyDeletionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostSignalsBroadcastResponse parses an HTTP response from a PostSignalsBroadcastWithResponse call
func ParsePostSignalsBroadcastResponse(rsp *http.Response) (*PostSignalsBroadcastResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSignalsBroadcastResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest SignalBroadcastResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest SignalBroadcastResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest SignalBroadcastResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetTopologyResponse parses an HTTP response from a GetTopologyWithResponse call
func ParseGetTopologyResponse(rsp *http.Response) (*GetTopologyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTopologyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TopologyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserTasksSearchResponse parses an HTTP response from a PostUserTasksSearchWithResponse call
func ParsePostUserTasksSearchResponse(rsp *http.Response) (*PostUserTasksSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserTasksSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest UserTaskSearchQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.number+json" && rsp.StatusCode == 200:
		var dest UserTaskSearchQueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysNumberJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.camunda.api.keys.string+json" && rsp.StatusCode == 200:
		var dest UserTaskSearchQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCamundaApiKeysStringJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePatchUserTasksUserTaskKeyResponse parses an HTTP response from a PatchUserTasksUserTaskKeyWithResponse call
func ParsePatchUserTasksUserTaskKeyResponse(rsp *http.Response) (*PatchUserTasksUserTaskKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUserTasksUserTaskKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserTasksUserTaskKeyAssigneeResponse parses an HTTP response from a DeleteUserTasksUserTaskKeyAssigneeWithResponse call
func ParseDeleteUserTasksUserTaskKeyAssigneeResponse(rsp *http.Response) (*DeleteUserTasksUserTaskKeyAssigneeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserTasksUserTaskKeyAssigneeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostUserTasksUserTaskKeyAssignmentResponse parses an HTTP response from a PostUserTasksUserTaskKeyAssignmentWithResponse call
func ParsePostUserTasksUserTaskKeyAssignmentResponse(rsp *http.Response) (*PostUserTasksUserTaskKeyAssignmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserTasksUserTaskKeyAssignmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostUserTasksUserTaskKeyCompletionResponse parses an HTTP response from a PostUserTasksUserTaskKeyCompletionWithResponse call
func ParsePostUserTasksUserTaskKeyCompletionResponse(rsp *http.Response) (*PostUserTasksUserTaskKeyCompletionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserTasksUserTaskKeyCompletionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}
