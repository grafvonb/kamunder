// Package operate provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package operate

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	Bearer_keyScopes = "bearer_key.Scopes"
	CookieScopes     = "cookie.Scopes"
)

// Defines values for DecisionInstanceDecisionType.
const (
	DecisionInstanceDecisionTypeDECISIONTABLE     DecisionInstanceDecisionType = "DECISION_TABLE"
	DecisionInstanceDecisionTypeLITERALEXPRESSION DecisionInstanceDecisionType = "LITERAL_EXPRESSION"
	DecisionInstanceDecisionTypeUNKNOWN           DecisionInstanceDecisionType = "UNKNOWN"
	DecisionInstanceDecisionTypeUNSPECIFIED       DecisionInstanceDecisionType = "UNSPECIFIED"
)

// Defines values for DecisionInstanceState.
const (
	DecisionInstanceStateEVALUATED   DecisionInstanceState = "EVALUATED"
	DecisionInstanceStateFAILED      DecisionInstanceState = "FAILED"
	DecisionInstanceStateUNKNOWN     DecisionInstanceState = "UNKNOWN"
	DecisionInstanceStateUNSPECIFIED DecisionInstanceState = "UNSPECIFIED"
)

// Defines values for FlowNodeInstanceState.
const (
	FlowNodeInstanceStateACTIVE     FlowNodeInstanceState = "ACTIVE"
	FlowNodeInstanceStateCOMPLETED  FlowNodeInstanceState = "COMPLETED"
	FlowNodeInstanceStateTERMINATED FlowNodeInstanceState = "TERMINATED"
)

// Defines values for FlowNodeInstanceType.
const (
	FlowNodeInstanceTypeBOUNDARYEVENT          FlowNodeInstanceType = "BOUNDARY_EVENT"
	FlowNodeInstanceTypeBUSINESSRULETASK       FlowNodeInstanceType = "BUSINESS_RULE_TASK"
	FlowNodeInstanceTypeCALLACTIVITY           FlowNodeInstanceType = "CALL_ACTIVITY"
	FlowNodeInstanceTypeENDEVENT               FlowNodeInstanceType = "END_EVENT"
	FlowNodeInstanceTypeEVENTBASEDGATEWAY      FlowNodeInstanceType = "EVENT_BASED_GATEWAY"
	FlowNodeInstanceTypeEVENTSUBPROCESS        FlowNodeInstanceType = "EVENT_SUB_PROCESS"
	FlowNodeInstanceTypeEXCLUSIVEGATEWAY       FlowNodeInstanceType = "EXCLUSIVE_GATEWAY"
	FlowNodeInstanceTypeINCLUSIVEGATEWAY       FlowNodeInstanceType = "INCLUSIVE_GATEWAY"
	FlowNodeInstanceTypeINTERMEDIATECATCHEVENT FlowNodeInstanceType = "INTERMEDIATE_CATCH_EVENT"
	FlowNodeInstanceTypeINTERMEDIATETHROWEVENT FlowNodeInstanceType = "INTERMEDIATE_THROW_EVENT"
	FlowNodeInstanceTypeMANUALTASK             FlowNodeInstanceType = "MANUAL_TASK"
	FlowNodeInstanceTypeMULTIINSTANCEBODY      FlowNodeInstanceType = "MULTI_INSTANCE_BODY"
	FlowNodeInstanceTypePARALLELGATEWAY        FlowNodeInstanceType = "PARALLEL_GATEWAY"
	FlowNodeInstanceTypePROCESS                FlowNodeInstanceType = "PROCESS"
	FlowNodeInstanceTypeRECEIVETASK            FlowNodeInstanceType = "RECEIVE_TASK"
	FlowNodeInstanceTypeSCRIPTTASK             FlowNodeInstanceType = "SCRIPT_TASK"
	FlowNodeInstanceTypeSENDTASK               FlowNodeInstanceType = "SEND_TASK"
	FlowNodeInstanceTypeSEQUENCEFLOW           FlowNodeInstanceType = "SEQUENCE_FLOW"
	FlowNodeInstanceTypeSERVICETASK            FlowNodeInstanceType = "SERVICE_TASK"
	FlowNodeInstanceTypeSTARTEVENT             FlowNodeInstanceType = "START_EVENT"
	FlowNodeInstanceTypeSUBPROCESS             FlowNodeInstanceType = "SUB_PROCESS"
	FlowNodeInstanceTypeTASK                   FlowNodeInstanceType = "TASK"
	FlowNodeInstanceTypeUNKNOWN                FlowNodeInstanceType = "UNKNOWN"
	FlowNodeInstanceTypeUNSPECIFIED            FlowNodeInstanceType = "UNSPECIFIED"
	FlowNodeInstanceTypeUSERTASK               FlowNodeInstanceType = "USER_TASK"
)

// Defines values for IncidentState.
const (
	IncidentStateACTIVE   IncidentState = "ACTIVE"
	IncidentStateMIGRATED IncidentState = "MIGRATED"
	IncidentStatePENDING  IncidentState = "PENDING"
	IncidentStateRESOLVED IncidentState = "RESOLVED"
)

// Defines values for IncidentType.
const (
	IncidentTypeCALLEDDECISIONERROR        IncidentType = "CALLED_DECISION_ERROR"
	IncidentTypeCALLEDELEMENTERROR         IncidentType = "CALLED_ELEMENT_ERROR"
	IncidentTypeCONDITIONERROR             IncidentType = "CONDITION_ERROR"
	IncidentTypeDECISIONEVALUATIONERROR    IncidentType = "DECISION_EVALUATION_ERROR"
	IncidentTypeEXECUTIONLISTENERNORETRIES IncidentType = "EXECUTION_LISTENER_NO_RETRIES"
	IncidentTypeEXTRACTVALUEERROR          IncidentType = "EXTRACT_VALUE_ERROR"
	IncidentTypeFORMNOTFOUND               IncidentType = "FORM_NOT_FOUND"
	IncidentTypeIOMAPPINGERROR             IncidentType = "IO_MAPPING_ERROR"
	IncidentTypeJOBNORETRIES               IncidentType = "JOB_NO_RETRIES"
	IncidentTypeMESSAGESIZEEXCEEDED        IncidentType = "MESSAGE_SIZE_EXCEEDED"
	IncidentTypeUNHANDLEDERROREVENT        IncidentType = "UNHANDLED_ERROR_EVENT"
	IncidentTypeUNKNOWN                    IncidentType = "UNKNOWN"
	IncidentTypeUNSPECIFIED                IncidentType = "UNSPECIFIED"
)

// Defines values for ProcessInstanceState.
const (
	ACTIVE    ProcessInstanceState = "ACTIVE"
	CANCELED  ProcessInstanceState = "CANCELED"
	COMPLETED ProcessInstanceState = "COMPLETED"
)

// Defines values for SortOrder.
const (
	ASC  SortOrder = "ASC"
	DESC SortOrder = "DESC"
)

// ChangeStatus defines model for ChangeStatus.
type ChangeStatus struct {
	Deleted *int64  `json:"deleted,omitempty"`
	Message *string `json:"message,omitempty"`
}

// DecisionDefinition defines model for DecisionDefinition.
type DecisionDefinition struct {
	DecisionId                  *string `json:"decisionId,omitempty"`
	DecisionRequirementsId      *string `json:"decisionRequirementsId,omitempty"`
	DecisionRequirementsKey     *int64  `json:"decisionRequirementsKey,omitempty"`
	DecisionRequirementsName    *string `json:"decisionRequirementsName,omitempty"`
	DecisionRequirementsVersion *int32  `json:"decisionRequirementsVersion,omitempty"`
	Id                          *string `json:"id,omitempty"`
	Key                         *int64  `json:"key,omitempty"`
	Name                        *string `json:"name,omitempty"`
	TenantId                    *string `json:"tenantId,omitempty"`
	Version                     *int32  `json:"version,omitempty"`
}

// DecisionInstance defines model for DecisionInstance.
type DecisionInstance struct {
	DecisionDefinitionId *string                       `json:"decisionDefinitionId,omitempty"`
	DecisionId           *string                       `json:"decisionId,omitempty"`
	DecisionName         *string                       `json:"decisionName,omitempty"`
	DecisionType         *DecisionInstanceDecisionType `json:"decisionType,omitempty"`
	DecisionVersion      *int32                        `json:"decisionVersion,omitempty"`
	EvaluatedInputs      *[]DecisionInstanceInput      `json:"evaluatedInputs,omitempty"`
	EvaluatedOutputs     *[]DecisionInstanceOutput     `json:"evaluatedOutputs,omitempty"`
	EvaluationDate       *string                       `json:"evaluationDate,omitempty"`
	EvaluationFailure    *string                       `json:"evaluationFailure,omitempty"`
	Id                   *string                       `json:"id,omitempty"`
	Key                  *int64                        `json:"key,omitempty"`
	ProcessDefinitionKey *int64                        `json:"processDefinitionKey,omitempty"`
	ProcessInstanceKey   *int64                        `json:"processInstanceKey,omitempty"`
	Result               *string                       `json:"result,omitempty"`
	State                *DecisionInstanceState        `json:"state,omitempty"`
	TenantId             *string                       `json:"tenantId,omitempty"`
}

// DecisionInstanceDecisionType defines model for DecisionInstance.DecisionType.
type DecisionInstanceDecisionType string

// DecisionInstanceState defines model for DecisionInstance.State.
type DecisionInstanceState string

// DecisionInstanceInput defines model for DecisionInstanceInput.
type DecisionInstanceInput struct {
	Id    *string `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// DecisionInstanceOutput defines model for DecisionInstanceOutput.
type DecisionInstanceOutput struct {
	Id        *string `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	RuleId    *string `json:"ruleId,omitempty"`
	RuleIndex *int32  `json:"ruleIndex,omitempty"`
	Value     *string `json:"value,omitempty"`
}

// DecisionRequirements defines model for DecisionRequirements.
type DecisionRequirements struct {
	DecisionRequirementsId *string `json:"decisionRequirementsId,omitempty"`
	Id                     *string `json:"id,omitempty"`
	Key                    *int64  `json:"key,omitempty"`
	Name                   *string `json:"name,omitempty"`
	ResourceName           *string `json:"resourceName,omitempty"`
	TenantId               *string `json:"tenantId,omitempty"`
	Version                *int32  `json:"version,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Instance *string `json:"instance,omitempty"`
	Message  *string `json:"message,omitempty"`
	Status   *int32  `json:"status,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// FlowNodeInstance defines model for FlowNodeInstance.
type FlowNodeInstance struct {
	EndDate              *string                `json:"endDate,omitempty"`
	FlowNodeId           *string                `json:"flowNodeId,omitempty"`
	FlowNodeName         *string                `json:"flowNodeName,omitempty"`
	Incident             *bool                  `json:"incident,omitempty"`
	IncidentKey          *int64                 `json:"incidentKey,omitempty"`
	Key                  *int64                 `json:"key,omitempty"`
	ProcessDefinitionKey *int64                 `json:"processDefinitionKey,omitempty"`
	ProcessInstanceKey   *int64                 `json:"processInstanceKey,omitempty"`
	StartDate            *string                `json:"startDate,omitempty"`
	State                *FlowNodeInstanceState `json:"state,omitempty"`
	TenantId             *string                `json:"tenantId,omitempty"`
	Type                 *FlowNodeInstanceType  `json:"type,omitempty"`
}

// FlowNodeInstanceState defines model for FlowNodeInstance.State.
type FlowNodeInstanceState string

// FlowNodeInstanceType defines model for FlowNodeInstance.Type.
type FlowNodeInstanceType string

// FlowNodeStatistics defines model for FlowNodeStatistics.
type FlowNodeStatistics struct {
	// Active The total number of active instances of the flow node
	Active *int64 `json:"active,omitempty"`

	// ActivityId The id of the flow node for which the results are aggregated
	ActivityId *string `json:"activityId,omitempty"`

	// Canceled The total number of canceled instances of the flow node
	Canceled *int64 `json:"canceled,omitempty"`

	// Completed The total number of completed instances of the flow node
	Completed *int64 `json:"completed,omitempty"`

	// Incidents The total number of incidents for the flow node
	Incidents *int64 `json:"incidents,omitempty"`
}

// Incident defines model for Incident.
type Incident struct {
	CreationTime         *string        `json:"creationTime,omitempty"`
	JobKey               *int64         `json:"jobKey,omitempty"`
	Key                  *int64         `json:"key,omitempty"`
	Message              *string        `json:"message,omitempty"`
	ProcessDefinitionKey *int64         `json:"processDefinitionKey,omitempty"`
	ProcessInstanceKey   *int64         `json:"processInstanceKey,omitempty"`
	State                *IncidentState `json:"state,omitempty"`
	TenantId             *string        `json:"tenantId,omitempty"`
	Type                 *IncidentType  `json:"type,omitempty"`
}

// IncidentState defines model for Incident.State.
type IncidentState string

// IncidentType defines model for Incident.Type.
type IncidentType string

// ProcessDefinition defines model for ProcessDefinition.
type ProcessDefinition struct {
	BpmnProcessId *string `json:"bpmnProcessId,omitempty"`
	Key           *int64  `json:"key,omitempty"`
	Name          *string `json:"name,omitempty"`
	TenantId      *string `json:"tenantId,omitempty"`
	Version       *int32  `json:"version,omitempty"`
	VersionTag    *string `json:"versionTag,omitempty"`
}

// ProcessInstance defines model for ProcessInstance.
type ProcessInstance struct {
	BpmnProcessId             *string               `json:"bpmnProcessId,omitempty"`
	EndDate                   *string               `json:"endDate,omitempty"`
	Incident                  *bool                 `json:"incident,omitempty"`
	Key                       *int64                `json:"key,omitempty"`
	ParentFlowNodeInstanceKey *int64                `json:"parentFlowNodeInstanceKey,omitempty"`
	ParentKey                 *int64                `json:"parentKey,omitempty"`
	ParentProcessInstanceKey  *ProcessInstance      `json:"parentProcessInstanceKey,omitempty"`
	ProcessDefinitionKey      *int64                `json:"processDefinitionKey,omitempty"`
	ProcessVersion            *int32                `json:"processVersion,omitempty"`
	ProcessVersionTag         *string               `json:"processVersionTag,omitempty"`
	StartDate                 *string               `json:"startDate,omitempty"`
	State                     *ProcessInstanceState `json:"state,omitempty"`
	TenantId                  *string               `json:"tenantId,omitempty"`
}

// ProcessInstanceState defines model for ProcessInstance.State.
type ProcessInstanceState string

// QueryDecisionDefinition defines model for QueryDecisionDefinition.
type QueryDecisionDefinition struct {
	Filter      *DecisionDefinition       `json:"filter,omitempty"`
	SearchAfter *[]map[string]interface{} `json:"searchAfter,omitempty"`
	Size        *int32                    `json:"size,omitempty"`
	Sort        *[]Sort                   `json:"sort,omitempty"`
}

// QueryDecisionInstance defines model for QueryDecisionInstance.
type QueryDecisionInstance struct {
	Filter      *DecisionInstance         `json:"filter,omitempty"`
	SearchAfter *[]map[string]interface{} `json:"searchAfter,omitempty"`
	Size        *int32                    `json:"size,omitempty"`
	Sort        *[]Sort                   `json:"sort,omitempty"`
}

// QueryDecisionRequirements defines model for QueryDecisionRequirements.
type QueryDecisionRequirements struct {
	Filter      *DecisionRequirements     `json:"filter,omitempty"`
	SearchAfter *[]map[string]interface{} `json:"searchAfter,omitempty"`
	Size        *int32                    `json:"size,omitempty"`
	Sort        *[]Sort                   `json:"sort,omitempty"`
}

// QueryFlowNodeInstance defines model for QueryFlowNodeInstance.
type QueryFlowNodeInstance struct {
	Filter      *FlowNodeInstance         `json:"filter,omitempty"`
	SearchAfter *[]map[string]interface{} `json:"searchAfter,omitempty"`
	Size        *int32                    `json:"size,omitempty"`
	Sort        *[]Sort                   `json:"sort,omitempty"`
}

// QueryIncident defines model for QueryIncident.
type QueryIncident struct {
	Filter      *Incident                 `json:"filter,omitempty"`
	SearchAfter *[]map[string]interface{} `json:"searchAfter,omitempty"`
	Size        *int32                    `json:"size,omitempty"`
	Sort        *[]Sort                   `json:"sort,omitempty"`
}

// QueryProcessDefinition defines model for QueryProcessDefinition.
type QueryProcessDefinition struct {
	Filter      *ProcessDefinition        `json:"filter,omitempty"`
	SearchAfter *[]map[string]interface{} `json:"searchAfter,omitempty"`
	Size        *int32                    `json:"size,omitempty"`
	Sort        *[]Sort                   `json:"sort,omitempty"`
}

// QueryProcessInstance defines model for QueryProcessInstance.
type QueryProcessInstance struct {
	Filter      *ProcessInstance          `json:"filter,omitempty"`
	SearchAfter *[]map[string]interface{} `json:"searchAfter,omitempty"`
	Size        *int32                    `json:"size,omitempty"`
	Sort        *[]Sort                   `json:"sort,omitempty"`
}

// QueryVariable defines model for QueryVariable.
type QueryVariable struct {
	Filter      *Variable                 `json:"filter,omitempty"`
	SearchAfter *[]map[string]interface{} `json:"searchAfter,omitempty"`
	Size        *int32                    `json:"size,omitempty"`
	Sort        *[]Sort                   `json:"sort,omitempty"`
}

// ResultsDecisionDefinition defines model for ResultsDecisionDefinition.
type ResultsDecisionDefinition struct {
	Items *[]DecisionDefinition `json:"items,omitempty"`
	Total *int64                `json:"total,omitempty"`
}

// ResultsDecisionInstance defines model for ResultsDecisionInstance.
type ResultsDecisionInstance struct {
	Items *[]DecisionInstance `json:"items,omitempty"`
	Total *int64              `json:"total,omitempty"`
}

// ResultsDecisionRequirements defines model for ResultsDecisionRequirements.
type ResultsDecisionRequirements struct {
	Items *[]DecisionRequirements `json:"items,omitempty"`
	Total *int64                  `json:"total,omitempty"`
}

// ResultsFlowNodeInstance defines model for ResultsFlowNodeInstance.
type ResultsFlowNodeInstance struct {
	Items *[]FlowNodeInstance `json:"items,omitempty"`
	Total *int64              `json:"total,omitempty"`
}

// ResultsIncident defines model for ResultsIncident.
type ResultsIncident struct {
	Items *[]Incident `json:"items,omitempty"`
	Total *int64      `json:"total,omitempty"`
}

// ResultsProcessDefinition defines model for ResultsProcessDefinition.
type ResultsProcessDefinition struct {
	Items *[]ProcessDefinition `json:"items,omitempty"`
	Total *int64               `json:"total,omitempty"`
}

// ResultsProcessInstance defines model for ResultsProcessInstance.
type ResultsProcessInstance struct {
	Items *[]ProcessInstance `json:"items,omitempty"`
	Total *int64             `json:"total,omitempty"`
}

// ResultsVariable defines model for ResultsVariable.
type ResultsVariable struct {
	Items *[]Variable `json:"items,omitempty"`
	Total *int64      `json:"total,omitempty"`
}

// Sort defines model for Sort.
type Sort struct {
	Field *string    `json:"field,omitempty"`
	Order *SortOrder `json:"order,omitempty"`
}

// SortOrder defines model for Sort.Order.
type SortOrder string

// Variable defines model for Variable.
type Variable struct {
	Key                *int64  `json:"key,omitempty"`
	Name               *string `json:"name,omitempty"`
	ProcessInstanceKey *int64  `json:"processInstanceKey,omitempty"`
	ScopeKey           *int64  `json:"scopeKey,omitempty"`
	TenantId           *string `json:"tenantId,omitempty"`
	Truncated          *bool   `json:"truncated,omitempty"`
	Value              *string `json:"value,omitempty"`
}

// SearchDecisionDefinitionsJSONRequestBody defines body for SearchDecisionDefinitions for application/json ContentType.
type SearchDecisionDefinitionsJSONRequestBody = QueryDecisionDefinition

// SearchDecisionInstancesJSONRequestBody defines body for SearchDecisionInstances for application/json ContentType.
type SearchDecisionInstancesJSONRequestBody = QueryDecisionInstance

// SearchDecisionRequirementsJSONRequestBody defines body for SearchDecisionRequirements for application/json ContentType.
type SearchDecisionRequirementsJSONRequestBody = QueryDecisionRequirements

// SearchFlownodeInstancesJSONRequestBody defines body for SearchFlownodeInstances for application/json ContentType.
type SearchFlownodeInstancesJSONRequestBody = QueryFlowNodeInstance

// SearchIncidentsJSONRequestBody defines body for SearchIncidents for application/json ContentType.
type SearchIncidentsJSONRequestBody = QueryIncident

// SearchProcessDefinitionsJSONRequestBody defines body for SearchProcessDefinitions for application/json ContentType.
type SearchProcessDefinitionsJSONRequestBody = QueryProcessDefinition

// SearchProcessInstancesJSONRequestBody defines body for SearchProcessInstances for application/json ContentType.
type SearchProcessInstancesJSONRequestBody = QueryProcessInstance

// SearchVariablesForProcessInstancesJSONRequestBody defines body for SearchVariablesForProcessInstances for application/json ContentType.
type SearchVariablesForProcessInstancesJSONRequestBody = QueryVariable

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SearchDecisionDefinitionsWithBody request with any body
	SearchDecisionDefinitionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchDecisionDefinitions(ctx context.Context, body SearchDecisionDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDecisionDefinitionByKey request
	GetDecisionDefinitionByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchDecisionInstancesWithBody request with any body
	SearchDecisionInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchDecisionInstances(ctx context.Context, body SearchDecisionInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDecisionInstanceById request
	GetDecisionInstanceById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchDecisionRequirementsWithBody request with any body
	SearchDecisionRequirementsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchDecisionRequirements(ctx context.Context, body SearchDecisionRequirementsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDecisionRequirementsByKey request
	GetDecisionRequirementsByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDecisionRequirementsAsXmlByKey request
	GetDecisionRequirementsAsXmlByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchFlownodeInstancesWithBody request with any body
	SearchFlownodeInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchFlownodeInstances(ctx context.Context, body SearchFlownodeInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowNodeInstanceByKey request
	GetFlowNodeInstanceByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchIncidentsWithBody request with any body
	SearchIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchIncidents(ctx context.Context, body SearchIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentByKey request
	GetIncidentByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchProcessDefinitionsWithBody request with any body
	SearchProcessDefinitionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchProcessDefinitions(ctx context.Context, body SearchProcessDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProcessDefinitionByKey request
	GetProcessDefinitionByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProcessDefinitionAsXmlByKey request
	GetProcessDefinitionAsXmlByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchProcessInstancesWithBody request with any body
	SearchProcessInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchProcessInstances(ctx context.Context, body SearchProcessInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProcessInstanceAndAllDependantDataByKey request
	DeleteProcessInstanceAndAllDependantDataByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProcessInstanceByKey request
	GetProcessInstanceByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSequenceFlowsOfProcessInstanceByKey request
	GetSequenceFlowsOfProcessInstanceByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowNodeStatisticByProcessInstanceId request
	GetFlowNodeStatisticByProcessInstanceId(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchVariablesForProcessInstancesWithBody request with any body
	SearchVariablesForProcessInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchVariablesForProcessInstances(ctx context.Context, body SearchVariablesForProcessInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVariableByKey request
	GetVariableByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SearchDecisionDefinitionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchDecisionDefinitionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchDecisionDefinitions(ctx context.Context, body SearchDecisionDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchDecisionDefinitionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDecisionDefinitionByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDecisionDefinitionByKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchDecisionInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchDecisionInstancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchDecisionInstances(ctx context.Context, body SearchDecisionInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchDecisionInstancesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDecisionInstanceById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDecisionInstanceByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchDecisionRequirementsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchDecisionRequirementsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchDecisionRequirements(ctx context.Context, body SearchDecisionRequirementsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchDecisionRequirementsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDecisionRequirementsByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDecisionRequirementsByKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDecisionRequirementsAsXmlByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDecisionRequirementsAsXmlByKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchFlownodeInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchFlownodeInstancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchFlownodeInstances(ctx context.Context, body SearchFlownodeInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchFlownodeInstancesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowNodeInstanceByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowNodeInstanceByKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchIncidentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchIncidents(ctx context.Context, body SearchIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchIncidentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentByKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchProcessDefinitionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchProcessDefinitionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchProcessDefinitions(ctx context.Context, body SearchProcessDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchProcessDefinitionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProcessDefinitionByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProcessDefinitionByKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProcessDefinitionAsXmlByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProcessDefinitionAsXmlByKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchProcessInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchProcessInstancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchProcessInstances(ctx context.Context, body SearchProcessInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchProcessInstancesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProcessInstanceAndAllDependantDataByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProcessInstanceAndAllDependantDataByKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProcessInstanceByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProcessInstanceByKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSequenceFlowsOfProcessInstanceByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSequenceFlowsOfProcessInstanceByKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowNodeStatisticByProcessInstanceId(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowNodeStatisticByProcessInstanceIdRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchVariablesForProcessInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchVariablesForProcessInstancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchVariablesForProcessInstances(ctx context.Context, body SearchVariablesForProcessInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchVariablesForProcessInstancesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVariableByKey(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVariableByKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSearchDecisionDefinitionsRequest calls the generic SearchDecisionDefinitions builder with application/json body
func NewSearchDecisionDefinitionsRequest(server string, body SearchDecisionDefinitionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchDecisionDefinitionsRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchDecisionDefinitionsRequestWithBody generates requests for SearchDecisionDefinitions with any type of body
func NewSearchDecisionDefinitionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/decision-definitions/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDecisionDefinitionByKeyRequest generates requests for GetDecisionDefinitionByKey
func NewGetDecisionDefinitionByKeyRequest(server string, key int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/decision-definitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchDecisionInstancesRequest calls the generic SearchDecisionInstances builder with application/json body
func NewSearchDecisionInstancesRequest(server string, body SearchDecisionInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchDecisionInstancesRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchDecisionInstancesRequestWithBody generates requests for SearchDecisionInstances with any type of body
func NewSearchDecisionInstancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/decision-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDecisionInstanceByIdRequest generates requests for GetDecisionInstanceById
func NewGetDecisionInstanceByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/decision-instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchDecisionRequirementsRequest calls the generic SearchDecisionRequirements builder with application/json body
func NewSearchDecisionRequirementsRequest(server string, body SearchDecisionRequirementsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchDecisionRequirementsRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchDecisionRequirementsRequestWithBody generates requests for SearchDecisionRequirements with any type of body
func NewSearchDecisionRequirementsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/drd/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDecisionRequirementsByKeyRequest generates requests for GetDecisionRequirementsByKey
func NewGetDecisionRequirementsByKeyRequest(server string, key int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/drd/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDecisionRequirementsAsXmlByKeyRequest generates requests for GetDecisionRequirementsAsXmlByKey
func NewGetDecisionRequirementsAsXmlByKeyRequest(server string, key int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/drd/%s/xml", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchFlownodeInstancesRequest calls the generic SearchFlownodeInstances builder with application/json body
func NewSearchFlownodeInstancesRequest(server string, body SearchFlownodeInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchFlownodeInstancesRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchFlownodeInstancesRequestWithBody generates requests for SearchFlownodeInstances with any type of body
func NewSearchFlownodeInstancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/flownode-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFlowNodeInstanceByKeyRequest generates requests for GetFlowNodeInstanceByKey
func NewGetFlowNodeInstanceByKeyRequest(server string, key int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/flownode-instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchIncidentsRequest calls the generic SearchIncidents builder with application/json body
func NewSearchIncidentsRequest(server string, body SearchIncidentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchIncidentsRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchIncidentsRequestWithBody generates requests for SearchIncidents with any type of body
func NewSearchIncidentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentByKeyRequest generates requests for GetIncidentByKey
func NewGetIncidentByKeyRequest(server string, key int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchProcessDefinitionsRequest calls the generic SearchProcessDefinitions builder with application/json body
func NewSearchProcessDefinitionsRequest(server string, body SearchProcessDefinitionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchProcessDefinitionsRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchProcessDefinitionsRequestWithBody generates requests for SearchProcessDefinitions with any type of body
func NewSearchProcessDefinitionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/process-definitions/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProcessDefinitionByKeyRequest generates requests for GetProcessDefinitionByKey
func NewGetProcessDefinitionByKeyRequest(server string, key int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/process-definitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProcessDefinitionAsXmlByKeyRequest generates requests for GetProcessDefinitionAsXmlByKey
func NewGetProcessDefinitionAsXmlByKeyRequest(server string, key int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/process-definitions/%s/xml", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchProcessInstancesRequest calls the generic SearchProcessInstances builder with application/json body
func NewSearchProcessInstancesRequest(server string, body SearchProcessInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchProcessInstancesRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchProcessInstancesRequestWithBody generates requests for SearchProcessInstances with any type of body
func NewSearchProcessInstancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/process-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProcessInstanceAndAllDependantDataByKeyRequest generates requests for DeleteProcessInstanceAndAllDependantDataByKey
func NewDeleteProcessInstanceAndAllDependantDataByKeyRequest(server string, key int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/process-instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProcessInstanceByKeyRequest generates requests for GetProcessInstanceByKey
func NewGetProcessInstanceByKeyRequest(server string, key int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/process-instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSequenceFlowsOfProcessInstanceByKeyRequest generates requests for GetSequenceFlowsOfProcessInstanceByKey
func NewGetSequenceFlowsOfProcessInstanceByKeyRequest(server string, key int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/process-instances/%s/sequence-flows", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFlowNodeStatisticByProcessInstanceIdRequest generates requests for GetFlowNodeStatisticByProcessInstanceId
func NewGetFlowNodeStatisticByProcessInstanceIdRequest(server string, key int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/process-instances/%s/statistics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchVariablesForProcessInstancesRequest calls the generic SearchVariablesForProcessInstances builder with application/json body
func NewSearchVariablesForProcessInstancesRequest(server string, body SearchVariablesForProcessInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchVariablesForProcessInstancesRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchVariablesForProcessInstancesRequestWithBody generates requests for SearchVariablesForProcessInstances with any type of body
func NewSearchVariablesForProcessInstancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/variables/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVariableByKeyRequest generates requests for GetVariableByKey
func NewGetVariableByKeyRequest(server string, key int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/variables/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SearchDecisionDefinitionsWithBodyWithResponse request with any body
	SearchDecisionDefinitionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchDecisionDefinitionsResponse, error)

	SearchDecisionDefinitionsWithResponse(ctx context.Context, body SearchDecisionDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchDecisionDefinitionsResponse, error)

	// GetDecisionDefinitionByKeyWithResponse request
	GetDecisionDefinitionByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetDecisionDefinitionByKeyResponse, error)

	// SearchDecisionInstancesWithBodyWithResponse request with any body
	SearchDecisionInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchDecisionInstancesResponse, error)

	SearchDecisionInstancesWithResponse(ctx context.Context, body SearchDecisionInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchDecisionInstancesResponse, error)

	// GetDecisionInstanceByIdWithResponse request
	GetDecisionInstanceByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetDecisionInstanceByIdResponse, error)

	// SearchDecisionRequirementsWithBodyWithResponse request with any body
	SearchDecisionRequirementsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchDecisionRequirementsResponse, error)

	SearchDecisionRequirementsWithResponse(ctx context.Context, body SearchDecisionRequirementsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchDecisionRequirementsResponse, error)

	// GetDecisionRequirementsByKeyWithResponse request
	GetDecisionRequirementsByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetDecisionRequirementsByKeyResponse, error)

	// GetDecisionRequirementsAsXmlByKeyWithResponse request
	GetDecisionRequirementsAsXmlByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetDecisionRequirementsAsXmlByKeyResponse, error)

	// SearchFlownodeInstancesWithBodyWithResponse request with any body
	SearchFlownodeInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchFlownodeInstancesResponse, error)

	SearchFlownodeInstancesWithResponse(ctx context.Context, body SearchFlownodeInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchFlownodeInstancesResponse, error)

	// GetFlowNodeInstanceByKeyWithResponse request
	GetFlowNodeInstanceByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetFlowNodeInstanceByKeyResponse, error)

	// SearchIncidentsWithBodyWithResponse request with any body
	SearchIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchIncidentsResponse, error)

	SearchIncidentsWithResponse(ctx context.Context, body SearchIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchIncidentsResponse, error)

	// GetIncidentByKeyWithResponse request
	GetIncidentByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetIncidentByKeyResponse, error)

	// SearchProcessDefinitionsWithBodyWithResponse request with any body
	SearchProcessDefinitionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchProcessDefinitionsResponse, error)

	SearchProcessDefinitionsWithResponse(ctx context.Context, body SearchProcessDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchProcessDefinitionsResponse, error)

	// GetProcessDefinitionByKeyWithResponse request
	GetProcessDefinitionByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetProcessDefinitionByKeyResponse, error)

	// GetProcessDefinitionAsXmlByKeyWithResponse request
	GetProcessDefinitionAsXmlByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetProcessDefinitionAsXmlByKeyResponse, error)

	// SearchProcessInstancesWithBodyWithResponse request with any body
	SearchProcessInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchProcessInstancesResponse, error)

	SearchProcessInstancesWithResponse(ctx context.Context, body SearchProcessInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchProcessInstancesResponse, error)

	// DeleteProcessInstanceAndAllDependantDataByKeyWithResponse request
	DeleteProcessInstanceAndAllDependantDataByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*DeleteProcessInstanceAndAllDependantDataByKeyResponse, error)

	// GetProcessInstanceByKeyWithResponse request
	GetProcessInstanceByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetProcessInstanceByKeyResponse, error)

	// GetSequenceFlowsOfProcessInstanceByKeyWithResponse request
	GetSequenceFlowsOfProcessInstanceByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetSequenceFlowsOfProcessInstanceByKeyResponse, error)

	// GetFlowNodeStatisticByProcessInstanceIdWithResponse request
	GetFlowNodeStatisticByProcessInstanceIdWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetFlowNodeStatisticByProcessInstanceIdResponse, error)

	// SearchVariablesForProcessInstancesWithBodyWithResponse request with any body
	SearchVariablesForProcessInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchVariablesForProcessInstancesResponse, error)

	SearchVariablesForProcessInstancesWithResponse(ctx context.Context, body SearchVariablesForProcessInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchVariablesForProcessInstancesResponse, error)

	// GetVariableByKeyWithResponse request
	GetVariableByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetVariableByKeyResponse, error)
}

type SearchDecisionDefinitionsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ResultsDecisionDefinition
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r SearchDecisionDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchDecisionDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDecisionDefinitionByKeyResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *DecisionDefinition
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetDecisionDefinitionByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDecisionDefinitionByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchDecisionInstancesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ResultsDecisionInstance
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r SearchDecisionInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchDecisionInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDecisionInstanceByIdResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *DecisionInstance
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetDecisionInstanceByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDecisionInstanceByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchDecisionRequirementsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ResultsDecisionRequirements
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r SearchDecisionRequirementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchDecisionRequirementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDecisionRequirementsByKeyResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *DecisionRequirements
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetDecisionRequirementsByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDecisionRequirementsByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDecisionRequirementsAsXmlByKeyResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	XML200                    *string
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetDecisionRequirementsAsXmlByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDecisionRequirementsAsXmlByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchFlownodeInstancesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ResultsFlowNodeInstance
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r SearchFlownodeInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchFlownodeInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowNodeInstanceByKeyResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *FlowNodeInstance
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetFlowNodeInstanceByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowNodeInstanceByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchIncidentsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ResultsIncident
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r SearchIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentByKeyResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Incident
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetIncidentByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchProcessDefinitionsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ResultsProcessDefinition
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r SearchProcessDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchProcessDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProcessDefinitionByKeyResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ProcessDefinition
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetProcessDefinitionByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProcessDefinitionByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProcessDefinitionAsXmlByKeyResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	XML200                    *string
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetProcessDefinitionAsXmlByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProcessDefinitionAsXmlByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchProcessInstancesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ResultsProcessInstance
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r SearchProcessInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchProcessInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProcessInstanceAndAllDependantDataByKeyResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ChangeStatus
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteProcessInstanceAndAllDependantDataByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProcessInstanceAndAllDependantDataByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProcessInstanceByKeyResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ProcessInstance
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetProcessInstanceByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProcessInstanceByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSequenceFlowsOfProcessInstanceByKeyResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetSequenceFlowsOfProcessInstanceByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSequenceFlowsOfProcessInstanceByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowNodeStatisticByProcessInstanceIdResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]FlowNodeStatistics
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetFlowNodeStatisticByProcessInstanceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowNodeStatisticByProcessInstanceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchVariablesForProcessInstancesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ResultsVariable
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r SearchVariablesForProcessInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchVariablesForProcessInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVariableByKeyResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Variable
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetVariableByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVariableByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SearchDecisionDefinitionsWithBodyWithResponse request with arbitrary body returning *SearchDecisionDefinitionsResponse
func (c *ClientWithResponses) SearchDecisionDefinitionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchDecisionDefinitionsResponse, error) {
	rsp, err := c.SearchDecisionDefinitionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchDecisionDefinitionsResponse(rsp)
}

func (c *ClientWithResponses) SearchDecisionDefinitionsWithResponse(ctx context.Context, body SearchDecisionDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchDecisionDefinitionsResponse, error) {
	rsp, err := c.SearchDecisionDefinitions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchDecisionDefinitionsResponse(rsp)
}

// GetDecisionDefinitionByKeyWithResponse request returning *GetDecisionDefinitionByKeyResponse
func (c *ClientWithResponses) GetDecisionDefinitionByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetDecisionDefinitionByKeyResponse, error) {
	rsp, err := c.GetDecisionDefinitionByKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDecisionDefinitionByKeyResponse(rsp)
}

// SearchDecisionInstancesWithBodyWithResponse request with arbitrary body returning *SearchDecisionInstancesResponse
func (c *ClientWithResponses) SearchDecisionInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchDecisionInstancesResponse, error) {
	rsp, err := c.SearchDecisionInstancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchDecisionInstancesResponse(rsp)
}

func (c *ClientWithResponses) SearchDecisionInstancesWithResponse(ctx context.Context, body SearchDecisionInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchDecisionInstancesResponse, error) {
	rsp, err := c.SearchDecisionInstances(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchDecisionInstancesResponse(rsp)
}

// GetDecisionInstanceByIdWithResponse request returning *GetDecisionInstanceByIdResponse
func (c *ClientWithResponses) GetDecisionInstanceByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetDecisionInstanceByIdResponse, error) {
	rsp, err := c.GetDecisionInstanceById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDecisionInstanceByIdResponse(rsp)
}

// SearchDecisionRequirementsWithBodyWithResponse request with arbitrary body returning *SearchDecisionRequirementsResponse
func (c *ClientWithResponses) SearchDecisionRequirementsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchDecisionRequirementsResponse, error) {
	rsp, err := c.SearchDecisionRequirementsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchDecisionRequirementsResponse(rsp)
}

func (c *ClientWithResponses) SearchDecisionRequirementsWithResponse(ctx context.Context, body SearchDecisionRequirementsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchDecisionRequirementsResponse, error) {
	rsp, err := c.SearchDecisionRequirements(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchDecisionRequirementsResponse(rsp)
}

// GetDecisionRequirementsByKeyWithResponse request returning *GetDecisionRequirementsByKeyResponse
func (c *ClientWithResponses) GetDecisionRequirementsByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetDecisionRequirementsByKeyResponse, error) {
	rsp, err := c.GetDecisionRequirementsByKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDecisionRequirementsByKeyResponse(rsp)
}

// GetDecisionRequirementsAsXmlByKeyWithResponse request returning *GetDecisionRequirementsAsXmlByKeyResponse
func (c *ClientWithResponses) GetDecisionRequirementsAsXmlByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetDecisionRequirementsAsXmlByKeyResponse, error) {
	rsp, err := c.GetDecisionRequirementsAsXmlByKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDecisionRequirementsAsXmlByKeyResponse(rsp)
}

// SearchFlownodeInstancesWithBodyWithResponse request with arbitrary body returning *SearchFlownodeInstancesResponse
func (c *ClientWithResponses) SearchFlownodeInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchFlownodeInstancesResponse, error) {
	rsp, err := c.SearchFlownodeInstancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchFlownodeInstancesResponse(rsp)
}

func (c *ClientWithResponses) SearchFlownodeInstancesWithResponse(ctx context.Context, body SearchFlownodeInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchFlownodeInstancesResponse, error) {
	rsp, err := c.SearchFlownodeInstances(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchFlownodeInstancesResponse(rsp)
}

// GetFlowNodeInstanceByKeyWithResponse request returning *GetFlowNodeInstanceByKeyResponse
func (c *ClientWithResponses) GetFlowNodeInstanceByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetFlowNodeInstanceByKeyResponse, error) {
	rsp, err := c.GetFlowNodeInstanceByKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowNodeInstanceByKeyResponse(rsp)
}

// SearchIncidentsWithBodyWithResponse request with arbitrary body returning *SearchIncidentsResponse
func (c *ClientWithResponses) SearchIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchIncidentsResponse, error) {
	rsp, err := c.SearchIncidentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchIncidentsResponse(rsp)
}

func (c *ClientWithResponses) SearchIncidentsWithResponse(ctx context.Context, body SearchIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchIncidentsResponse, error) {
	rsp, err := c.SearchIncidents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchIncidentsResponse(rsp)
}

// GetIncidentByKeyWithResponse request returning *GetIncidentByKeyResponse
func (c *ClientWithResponses) GetIncidentByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetIncidentByKeyResponse, error) {
	rsp, err := c.GetIncidentByKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentByKeyResponse(rsp)
}

// SearchProcessDefinitionsWithBodyWithResponse request with arbitrary body returning *SearchProcessDefinitionsResponse
func (c *ClientWithResponses) SearchProcessDefinitionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchProcessDefinitionsResponse, error) {
	rsp, err := c.SearchProcessDefinitionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchProcessDefinitionsResponse(rsp)
}

func (c *ClientWithResponses) SearchProcessDefinitionsWithResponse(ctx context.Context, body SearchProcessDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchProcessDefinitionsResponse, error) {
	rsp, err := c.SearchProcessDefinitions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchProcessDefinitionsResponse(rsp)
}

// GetProcessDefinitionByKeyWithResponse request returning *GetProcessDefinitionByKeyResponse
func (c *ClientWithResponses) GetProcessDefinitionByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetProcessDefinitionByKeyResponse, error) {
	rsp, err := c.GetProcessDefinitionByKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProcessDefinitionByKeyResponse(rsp)
}

// GetProcessDefinitionAsXmlByKeyWithResponse request returning *GetProcessDefinitionAsXmlByKeyResponse
func (c *ClientWithResponses) GetProcessDefinitionAsXmlByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetProcessDefinitionAsXmlByKeyResponse, error) {
	rsp, err := c.GetProcessDefinitionAsXmlByKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProcessDefinitionAsXmlByKeyResponse(rsp)
}

// SearchProcessInstancesWithBodyWithResponse request with arbitrary body returning *SearchProcessInstancesResponse
func (c *ClientWithResponses) SearchProcessInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchProcessInstancesResponse, error) {
	rsp, err := c.SearchProcessInstancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchProcessInstancesResponse(rsp)
}

func (c *ClientWithResponses) SearchProcessInstancesWithResponse(ctx context.Context, body SearchProcessInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchProcessInstancesResponse, error) {
	rsp, err := c.SearchProcessInstances(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchProcessInstancesResponse(rsp)
}

// DeleteProcessInstanceAndAllDependantDataByKeyWithResponse request returning *DeleteProcessInstanceAndAllDependantDataByKeyResponse
func (c *ClientWithResponses) DeleteProcessInstanceAndAllDependantDataByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*DeleteProcessInstanceAndAllDependantDataByKeyResponse, error) {
	rsp, err := c.DeleteProcessInstanceAndAllDependantDataByKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProcessInstanceAndAllDependantDataByKeyResponse(rsp)
}

// GetProcessInstanceByKeyWithResponse request returning *GetProcessInstanceByKeyResponse
func (c *ClientWithResponses) GetProcessInstanceByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetProcessInstanceByKeyResponse, error) {
	rsp, err := c.GetProcessInstanceByKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProcessInstanceByKeyResponse(rsp)
}

// GetSequenceFlowsOfProcessInstanceByKeyWithResponse request returning *GetSequenceFlowsOfProcessInstanceByKeyResponse
func (c *ClientWithResponses) GetSequenceFlowsOfProcessInstanceByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetSequenceFlowsOfProcessInstanceByKeyResponse, error) {
	rsp, err := c.GetSequenceFlowsOfProcessInstanceByKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSequenceFlowsOfProcessInstanceByKeyResponse(rsp)
}

// GetFlowNodeStatisticByProcessInstanceIdWithResponse request returning *GetFlowNodeStatisticByProcessInstanceIdResponse
func (c *ClientWithResponses) GetFlowNodeStatisticByProcessInstanceIdWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetFlowNodeStatisticByProcessInstanceIdResponse, error) {
	rsp, err := c.GetFlowNodeStatisticByProcessInstanceId(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowNodeStatisticByProcessInstanceIdResponse(rsp)
}

// SearchVariablesForProcessInstancesWithBodyWithResponse request with arbitrary body returning *SearchVariablesForProcessInstancesResponse
func (c *ClientWithResponses) SearchVariablesForProcessInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchVariablesForProcessInstancesResponse, error) {
	rsp, err := c.SearchVariablesForProcessInstancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchVariablesForProcessInstancesResponse(rsp)
}

func (c *ClientWithResponses) SearchVariablesForProcessInstancesWithResponse(ctx context.Context, body SearchVariablesForProcessInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchVariablesForProcessInstancesResponse, error) {
	rsp, err := c.SearchVariablesForProcessInstances(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchVariablesForProcessInstancesResponse(rsp)
}

// GetVariableByKeyWithResponse request returning *GetVariableByKeyResponse
func (c *ClientWithResponses) GetVariableByKeyWithResponse(ctx context.Context, key int64, reqEditors ...RequestEditorFn) (*GetVariableByKeyResponse, error) {
	rsp, err := c.GetVariableByKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVariableByKeyResponse(rsp)
}

// ParseSearchDecisionDefinitionsResponse parses an HTTP response from a SearchDecisionDefinitionsWithResponse call
func ParseSearchDecisionDefinitionsResponse(rsp *http.Response) (*SearchDecisionDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchDecisionDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsDecisionDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDecisionDefinitionByKeyResponse parses an HTTP response from a GetDecisionDefinitionByKeyWithResponse call
func ParseGetDecisionDefinitionByKeyResponse(rsp *http.Response) (*GetDecisionDefinitionByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDecisionDefinitionByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DecisionDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseSearchDecisionInstancesResponse parses an HTTP response from a SearchDecisionInstancesWithResponse call
func ParseSearchDecisionInstancesResponse(rsp *http.Response) (*SearchDecisionInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchDecisionInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsDecisionInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDecisionInstanceByIdResponse parses an HTTP response from a GetDecisionInstanceByIdWithResponse call
func ParseGetDecisionInstanceByIdResponse(rsp *http.Response) (*GetDecisionInstanceByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDecisionInstanceByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DecisionInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseSearchDecisionRequirementsResponse parses an HTTP response from a SearchDecisionRequirementsWithResponse call
func ParseSearchDecisionRequirementsResponse(rsp *http.Response) (*SearchDecisionRequirementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchDecisionRequirementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsDecisionRequirements
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDecisionRequirementsByKeyResponse parses an HTTP response from a GetDecisionRequirementsByKeyWithResponse call
func ParseGetDecisionRequirementsByKeyResponse(rsp *http.Response) (*GetDecisionRequirementsByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDecisionRequirementsByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DecisionRequirements
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDecisionRequirementsAsXmlByKeyResponse parses an HTTP response from a GetDecisionRequirementsAsXmlByKeyWithResponse call
func ParseGetDecisionRequirementsAsXmlByKeyResponse(rsp *http.Response) (*GetDecisionRequirementsAsXmlByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDecisionRequirementsAsXmlByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseSearchFlownodeInstancesResponse parses an HTTP response from a SearchFlownodeInstancesWithResponse call
func ParseSearchFlownodeInstancesResponse(rsp *http.Response) (*SearchFlownodeInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchFlownodeInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsFlowNodeInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetFlowNodeInstanceByKeyResponse parses an HTTP response from a GetFlowNodeInstanceByKeyWithResponse call
func ParseGetFlowNodeInstanceByKeyResponse(rsp *http.Response) (*GetFlowNodeInstanceByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowNodeInstanceByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlowNodeInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseSearchIncidentsResponse parses an HTTP response from a SearchIncidentsWithResponse call
func ParseSearchIncidentsResponse(rsp *http.Response) (*SearchIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsIncident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetIncidentByKeyResponse parses an HTTP response from a GetIncidentByKeyWithResponse call
func ParseGetIncidentByKeyResponse(rsp *http.Response) (*GetIncidentByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseSearchProcessDefinitionsResponse parses an HTTP response from a SearchProcessDefinitionsWithResponse call
func ParseSearchProcessDefinitionsResponse(rsp *http.Response) (*SearchProcessDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchProcessDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProcessDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetProcessDefinitionByKeyResponse parses an HTTP response from a GetProcessDefinitionByKeyWithResponse call
func ParseGetProcessDefinitionByKeyResponse(rsp *http.Response) (*GetProcessDefinitionByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProcessDefinitionByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProcessDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetProcessDefinitionAsXmlByKeyResponse parses an HTTP response from a GetProcessDefinitionAsXmlByKeyWithResponse call
func ParseGetProcessDefinitionAsXmlByKeyResponse(rsp *http.Response) (*GetProcessDefinitionAsXmlByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProcessDefinitionAsXmlByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseSearchProcessInstancesResponse parses an HTTP response from a SearchProcessInstancesWithResponse call
func ParseSearchProcessInstancesResponse(rsp *http.Response) (*SearchProcessInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchProcessInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsProcessInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteProcessInstanceAndAllDependantDataByKeyResponse parses an HTTP response from a DeleteProcessInstanceAndAllDependantDataByKeyWithResponse call
func ParseDeleteProcessInstanceAndAllDependantDataByKeyResponse(rsp *http.Response) (*DeleteProcessInstanceAndAllDependantDataByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProcessInstanceAndAllDependantDataByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChangeStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetProcessInstanceByKeyResponse parses an HTTP response from a GetProcessInstanceByKeyWithResponse call
func ParseGetProcessInstanceByKeyResponse(rsp *http.Response) (*GetProcessInstanceByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProcessInstanceByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProcessInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetSequenceFlowsOfProcessInstanceByKeyResponse parses an HTTP response from a GetSequenceFlowsOfProcessInstanceByKeyWithResponse call
func ParseGetSequenceFlowsOfProcessInstanceByKeyResponse(rsp *http.Response) (*GetSequenceFlowsOfProcessInstanceByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSequenceFlowsOfProcessInstanceByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetFlowNodeStatisticByProcessInstanceIdResponse parses an HTTP response from a GetFlowNodeStatisticByProcessInstanceIdWithResponse call
func ParseGetFlowNodeStatisticByProcessInstanceIdResponse(rsp *http.Response) (*GetFlowNodeStatisticByProcessInstanceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowNodeStatisticByProcessInstanceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FlowNodeStatistics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseSearchVariablesForProcessInstancesResponse parses an HTTP response from a SearchVariablesForProcessInstancesWithResponse call
func ParseSearchVariablesForProcessInstancesResponse(rsp *http.Response) (*SearchVariablesForProcessInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchVariablesForProcessInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetVariableByKeyResponse parses an HTTP response from a GetVariableByKeyWithResponse call
func ParseGetVariableByKeyResponse(rsp *http.Response) (*GetVariableByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVariableByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Variable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}
