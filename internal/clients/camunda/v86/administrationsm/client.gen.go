// Package administrationsm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package administrationsm

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for ConsoleSMAdminApiAppType.
const (
	ConsoleSMAdminApiAppTypeConsole      ConsoleSMAdminApiAppType = "console"
	ConsoleSMAdminApiAppTypeIdentity     ConsoleSMAdminApiAppType = "identity"
	ConsoleSMAdminApiAppTypeModeler      ConsoleSMAdminApiAppType = "modeler"
	ConsoleSMAdminApiAppTypeOperate      ConsoleSMAdminApiAppType = "operate"
	ConsoleSMAdminApiAppTypeOptimize     ConsoleSMAdminApiAppType = "optimize"
	ConsoleSMAdminApiAppTypeTasklist     ConsoleSMAdminApiAppType = "tasklist"
	ConsoleSMAdminApiAppTypeUnknown      ConsoleSMAdminApiAppType = "unknown"
	ConsoleSMAdminApiAppTypeZeebeBroker  ConsoleSMAdminApiAppType = "zeebe-broker"
	ConsoleSMAdminApiAppTypeZeebeGateway ConsoleSMAdminApiAppType = "zeebe-gateway"
)

// Defines values for ConsoleSMAdminApiClusterType.
const (
	Automation ConsoleSMAdminApiClusterType = "automation"
	Management ConsoleSMAdminApiClusterType = "management"
)

// Defines values for ConsoleSMAdminApiStatus.
const (
	ConsoleSMAdminApiStatusHealthy   ConsoleSMAdminApiStatus = "healthy"
	ConsoleSMAdminApiStatusUnhealthy ConsoleSMAdminApiStatus = "unhealthy"
	ConsoleSMAdminApiStatusUnknown   ConsoleSMAdminApiStatus = "unknown"
)

// ConsoleSMAdminApiApp defines model for ConsoleSMAdminApi.App.
type ConsoleSMAdminApiApp struct {
	// Generation This is the current version of the running application
	Generation string `json:"generation"`

	// Id Unique identifier of the application
	Id string `json:"id"`

	// Metrics The metrics URL of the application
	Metrics *string `json:"metrics,omitempty"`

	// Readiness The readiness URL of the application
	Readiness *string                  `json:"readiness,omitempty"`
	Status    ConsoleSMAdminApiStatus  `json:"status"`
	Type      ConsoleSMAdminApiAppType `json:"type"`

	// Url The public URL of the application
	Url string `json:"url"`
}

// ConsoleSMAdminApiAppType defines model for ConsoleSMAdminApi.AppType.
type ConsoleSMAdminApiAppType string

// ConsoleSMAdminApiCluster defines model for ConsoleSMAdminApi.Cluster.
type ConsoleSMAdminApiCluster struct {
	// Apps The list of applications running in the cluster
	Apps []ConsoleSMAdminApiApp `json:"apps"`

	// Generation This is the current version of the running cluster
	Generation string `json:"generation"`

	// Name Name of the cluster
	Name string `json:"name"`

	// Namespace Namespace the cluster is running in.
	Namespace string                       `json:"namespace"`
	Status    ConsoleSMAdminApiStatus      `json:"status"`
	Type      ConsoleSMAdminApiClusterType `json:"type"`

	// Uuid Unique identifier of the cluster
	Uuid string `json:"uuid"`
}

// ConsoleSMAdminApiClusterType defines model for ConsoleSMAdminApi.ClusterType.
type ConsoleSMAdminApiClusterType string

// ConsoleSMAdminApiStatus defines model for ConsoleSMAdminApi.Status.
type ConsoleSMAdminApiStatus string

// ConsoleSMAdminApiUsageMetricsForCluster defines model for ConsoleSMAdminApi.UsageMetricsForCluster.
type ConsoleSMAdminApiUsageMetricsForCluster struct {
	DecisionInstances ConsoleSMAdminApiUsageMetricsInstances `json:"decisionInstances"`

	// Id The identifier of the cluster.
	Id               string                                 `json:"id"`
	ProcessInstances ConsoleSMAdminApiUsageMetricsInstances `json:"processInstances"`
	TaskUsers        ConsoleSMAdminApiUsageMetricsTaskUsers `json:"taskUsers"`
}

// ConsoleSMAdminApiUsageMetricsInstances defines model for ConsoleSMAdminApi.UsageMetricsInstances.
type ConsoleSMAdminApiUsageMetricsInstances struct {
	// Total The number of usage metrics for a specific type.
	Total float64 `json:"total"`
}

// ConsoleSMAdminApiUsageMetricsTaskUsers defines model for ConsoleSMAdminApi.UsageMetricsTaskUsers.
type ConsoleSMAdminApiUsageMetricsTaskUsers struct {
	// Assignees The users that tasks have been assigned to.
	Assignees []string `json:"assignees"`

	// Total The number of usage metrics for a specific type.
	Total float64 `json:"total"`
}

// GetUsageMetricsParams defines parameters for GetUsageMetrics.
type GetUsageMetricsParams struct {
	// Id The unique identifier of the cluster
	Id string `form:"id" json:"id"`

	// Start The start timestamp of the time range as UNIX timestamp in milliseconds
	Start float64 `form:"start" json:"start"`

	// End The end timestamp of the time range as UNIX timestamp in milliseconds
	End float64 `form:"end" json:"end"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetClusters request
	GetClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsageMetrics request
	GetUsageMetrics(ctx context.Context, params *GetUsageMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsageMetrics(ctx context.Context, params *GetUsageMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsageMetricsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetClustersRequest generates requests for GetClusters
func NewGetClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin-api/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsageMetricsRequest generates requests for GetUsageMetrics
func NewGetUsageMetricsRequest(server string, params *GetUsageMetricsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin-api/usage-metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetClustersWithResponse request
	GetClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClustersResponse, error)

	// GetUsageMetricsWithResponse request
	GetUsageMetricsWithResponse(ctx context.Context, params *GetUsageMetricsParams, reqEditors ...RequestEditorFn) (*GetUsageMetricsResponse, error)
}

type GetClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ConsoleSMAdminApiCluster
}

// Status returns HTTPResponse.Status
func (r GetClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsageMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConsoleSMAdminApiUsageMetricsForCluster
}

// Status returns HTTPResponse.Status
func (r GetUsageMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsageMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetClustersWithResponse request returning *GetClustersResponse
func (c *ClientWithResponses) GetClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClustersResponse, error) {
	rsp, err := c.GetClusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClustersResponse(rsp)
}

// GetUsageMetricsWithResponse request returning *GetUsageMetricsResponse
func (c *ClientWithResponses) GetUsageMetricsWithResponse(ctx context.Context, params *GetUsageMetricsParams, reqEditors ...RequestEditorFn) (*GetUsageMetricsResponse, error) {
	rsp, err := c.GetUsageMetrics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsageMetricsResponse(rsp)
}

// ParseGetClustersResponse parses an HTTP response from a GetClustersWithResponse call
func ParseGetClustersResponse(rsp *http.Response) (*GetClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ConsoleSMAdminApiCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsageMetricsResponse parses an HTTP response from a GetUsageMetricsWithResponse call
func ParseGetUsageMetricsResponse(rsp *http.Response) (*GetUsageMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsageMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConsoleSMAdminApiUsageMetricsForCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
